<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java并发-AQS(二)</title>
    <link href="/2022/06/16/Java%E5%B9%B6%E5%8F%91-AQS(%E4%BA%8C)/"/>
    <url>/2022/06/16/Java%E5%B9%B6%E5%8F%91-AQS(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<p>独占模式详解。<br>AQS - java.util.concurrent.locks.AbstractQueuedSynchronizer源码。</p><span id="more"></span><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The synchronization state.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> state;<br></code></pre></td></tr></table></figure><ul><li>state用于判断共享资源是否正在被占用的标记为</li></ul><p>volatile保住了线程之间的可见性，就是当一个线程修改了state的值，其他线程下一次读取能读到最新值。</p><p>为什么是int而不是boolean？</p><blockquote><p>需要了解线程获取锁的两种模式，独占和共享。<br><strong>独占模式</strong>：当一个线程获取锁时，其他线程都必须等待；<br><strong>共享模式</strong>：当一个线程获取锁时，其他也想以共享模式获取锁的线程也能一起访问共享资源，但其他想以独占模式获取锁的线程需要等待。<br>说明了共享模式下，可能有多个线程正在共享资源，所以state需要表示线程占用数量，因此是int值。</p></blockquote><hr><h2 id="head、tail"><a href="#head、tail" class="headerlink" title="head、tail"></a>head、tail</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node head;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node tail;<br></code></pre></td></tr></table></figure><p>AQS中存在一个队列用于对等待线程进行管理，这个队列通过一个FIFO的双向链表来实现，</p><ul><li>head表示队列的头</li><li>tail表示队列的尾</li></ul><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p><img src="/images/Java%E5%B9%B6%E5%8F%91-AQS(%E4%BA%8C)/%E5%86%85%E9%83%A8%E7%B1%BBNode.png" alt="内部类Node"></p><p>waitStatus主要包含四个状态：</p><ul><li>0，节点初始化默认值或节点已经释放</li><li>CANCELLED为1，表示当前节点获取锁的请求已经被取消</li><li>SIGNAL为-1，表示当前节点的后续节点需要被唤醒</li><li>CONDITION为-2，表示当前节点正在等待某一个Condition对象，和条件模式相关</li><li>PROPAGATE为-3，传递共享模式下锁释放状态，和共享模式相关<br>方法predecessor是获取前置的Node</li></ul><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>思考主要两种使用场景：</p><ul><li>尝试获取锁，不管有没有获取到，立即返回.（tryAcquire）</li><li>必须获取锁，如果当前时刻锁被占用，则进行等待。（acquire）</li></ul><h2 id="tryAcquire"><a href="#tryAcquire" class="headerlink" title="tryAcquire()"></a>tryAcquire()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>tryAcquire是被<code>protected</code>修饰的方法，参数是一个int，代表对int state的增加操作，返回值是boolean，代表是否成功获得锁。<br>该方法只有一行实现<code>throw new UnsupportedOperationException()</code>，意图很明显，AQL规定基础类必须@Override方法，否则直接抛出异常。<br>因为尝试获取锁这个操作可能包含某些业务自定义的逻辑，比如是否<strong>“<code>可重入</code>”</strong>等。</p><p><strong>若上层调用tryAcquire：</strong></p><ul><li>如果返回true，线程获得锁，此时可以对相应的共享资源进行操作，使用完之后再进行释放。</li><li>如果返回false，获取锁失败：<ul><li>上层逻辑不想等待锁，那么可以自己进行相对应的处理</li><li>上层逻辑选择等待锁，那么可以直接调用acquire方法，acquire方法内部封装了复杂的排队逻辑，非常易用。</li></ul></li></ul><h2 id="acquire"><a href="#acquire" class="headerlink" title="acquire()"></a>acquire()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!tryAcquire(arg) &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg))<br>        selfInterrupt();<br>&#125;<br></code></pre></td></tr></table></figure><p>acquire是被<code>final</code>修饰，表示不允许子类擅自@Override，<br>似乎在表示：等待并获取锁，我非常可靠，直接用就行了，其他你不用管(手动&#x2F;狗头🐕)</p><h3 id="1-逻辑判断if"><a href="#1-逻辑判断if" class="headerlink" title="1.逻辑判断if"></a>1.逻辑判断if</h3><p>if包含了两部分:</p><ul><li><code>!tryAcquire(arg)</code></li><li><code>acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</code></li></ul><p>执行流程：</p><blockquote><p>tryAcquire上方说过，表示尝试获取锁，这里加了<code>!</code>，<br>如果获取锁成功，那么<code>!tryAcquire(arg)</code>为false，说明不需要参与排队，也不用继续判断下一个条件；<br>如果获取锁失败，那么<code>!tryAcquire(arg)</code>为true，说明需要进行排队，<br>那么继续执行下一个条件 -&gt; <strong>“<code>acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</code>”</strong></p></blockquote><h3 id="2-入队addWaiter"><a href="#2-入队addWaiter" class="headerlink" title="2.入队addWaiter"></a>2.入队addWaiter</h3><ul><li>if逻辑判断中的acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</li></ul><p>需要先执行addWaiter(Node.EXCLUSIVE)添加队列的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">addWaiter</span><span class="hljs-params">(Node mode)</span> &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(Thread.currentThread(), mode);<br>    <span class="hljs-comment">// Try the fast path of enq; backup to full enq on failure</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">pred</span> <span class="hljs-operator">=</span> tail;<br>    <span class="hljs-keyword">if</span> (pred != <span class="hljs-literal">null</span>) &#123;<br>        node.prev = pred;<br>        <span class="hljs-keyword">if</span> (compareAndSetTail(pred, node)) &#123;<br>            pred.next = node;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>    &#125;<br>    enq(node);<br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法作用就是将当前线程封装成一个Node，然后加入等待对接，返回值就是该Node。</p><p>执行流程：</p><blockquote><p>新建pred节点引用，指向当前节点的尾节点，如果尾节点不为空，那么下面将进行三步操作:</p><ul><li>1.将<strong>“<code>当前节点</code>”</strong>的prev指针(前指针)指向pred节点(尾节点)</li><li>2.尝试通过CAS操作将<strong>“<code>当前节点</code>”</strong>置为尾节点：if(compareAndSetTail(pred, node))<ul><li>如果返回false，说明pred节点已经不是尾结点，<br>  在上面的执行过程中，尾结点已经被其他线程修改，那么退出判断，调用enq()方法，重新执行完整的入队方法</li><li>如果返回true，说明CAS操作之前，pred节点依然是尾结点，CAS操作使当前node顺利成为尾结点。<br>  若当前node顺利成为尾节点，那么pred节点和当前node之间的相对位置已经确定，此时将pred节点的next指针指向当前node，是不会存在线程安全问题的。</li></ul></li></ul></blockquote><p><strong>由于在多线程环境下执行，有几个容易混乱且弄不懂的细节，也是该方法的重点：</strong><br>当执行到方法行<strong>第7行：“<code>if (compareAndSetTail(pred, node))</code>”：</strong></p><ul><li>1.pred引用指向的对象如果不再是<code>尾结点</code>的话，<strong>CAS会失败</strong>，-&gt; 就会执行下面的第12行：<code>enq()</code>方法</li><li>2.如果CAS成功，虽然CAS具有原子性，但是if中的第8、9行执行并不具备原子性，<br><strong>不过此时pred节点和当前节点的相对位置已经确定(CAS成功核验)，其他线程只是正在插入新的尾结点(第6行node.prev &#x3D; pred;)，并不会影响8、9的操作，所以是线程安全的</strong></li><li>3.需要记住的是，当前后两个节点建立连接的时候，首先是后节点的pre指向前节点(第6行node.prev &#x3D; pred)，当后节点成功成为尾结点后，前节点的next才会指向后节点。</li></ul><p>理解以上，当运行到13行：<code>enq(node);</code>，说明出现了两种情况之一：</p><ul><li>队列为空</li><li>快速插入失败，想要进行完整流程的插入<br>这里说的快速插入指的是7-10行的逻辑，当并发线程较少的情况，快速插入成功率很高，程序不用进入完整的插入流程，效率会更高。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">enq</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node)</span> &#123;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail;<br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// Must initialize</span><br>            <span class="hljs-keyword">if</span> (compareAndSetHead(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>()))<br>                tail = head;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            node.prev = t;<br>            <span class="hljs-keyword">if</span> (compareAndSetTail(t, node)) &#123;<br>                t.next = node;<br>                <span class="hljs-keyword">return</span> t;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的逻辑有似曾相识的感觉，<br>就是加了一个死循环，如果队列未初始化(tail &#x3D;&#x3D; null)，那么就尝试初始化，<br>如果插入尾结点失败，那么久一直不断重试，直到插入成功为止。</p><p>对比图，快速插入和完整插入<br><img src="/images/Java%E5%B9%B6%E5%8F%91-AQS(%E4%BA%8C)/addWaiter%E5%92%8Cenq.png" alt="addWaiter和enq.png"></p><blockquote><p>思考：在我们理解中，一旦addWaiter成功，进入了FIFO队列，那么应该是“生产-消费”模式，有一个消费者不断从这个队列头部获取节点，出队节点中封装的线程拥有拿锁的权限。</p></blockquote><p><strong>但是实际上AQS并没有这么做，</strong><br><strong>而是在各个线程中维护了当前Node的waitStatus，</strong><br><strong>根据不同的状态，程序做不同的操作。通过 -&gt; “<code>acquireQueued方法</code>”</strong></p><h3 id="3-核心acquireQueued"><a href="#3-核心acquireQueued" class="headerlink" title="3.核心acquireQueued"></a>3.核心acquireQueued</h3><h4 id="acquireQueued流程"><a href="#acquireQueued流程" class="headerlink" title="acquireQueued流程"></a>acquireQueued流程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">acquireQueued</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node, <span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">failed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">interrupted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> node.predecessor();<br>            <span class="hljs-keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;<br>                setHead(node);<br>                p.next = <span class="hljs-literal">null</span>; <span class="hljs-comment">// help GC</span><br>                failed = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">return</span> interrupted;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;<br>                parkAndCheckInterrupt())<br>                interrupted = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (failed)<br>            cancelAcquire(node);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先是两个变量：</p><ul><li>failed：初始为true，意思是默认失败。</li><li>interrupted：初始为false，意思是等待锁的过程中没有被中断。</li></ul><blockquote><p>使用到这两个变量的地方：<br>1.第11行，return之前，failed会改为false，代表执行成功，并返回interrupted<br>2.第15行，如果满足if判断条件，会更改interrupted为true，最终在11行被返回出去<br>3.第18行，finally中，通过failed值来进行一个名为cancelAcquire操作(即取消当前线程获取锁的行为)</p></blockquote><p>可以将acquireQueued方法分为三部分：</p><ul><li>7-11行。当前置节点为head，说明当前节点有权限去尝试拿锁，这是<code>一种约定</code>(见下tips)。<br>如果tryAcquire返回true，代表拿到了锁，那么顺理成章，函数返回。如果不满足第7行判断条件，那么进入下一阶段。</li><li>13-15行。if中包含两个方法(详细方法体后续再看)，<br>看名字是首先判断当前线程是否需要挂起等待（shouldP…）？如果需要就挂起，并且判断外部是否调用线程中断（parkA…）；<br>如果不需要，那么继续尝试拿锁。</li><li>18-19行。如果try抛出非预期异常，那么当前获取锁行为置为取消(即CANCELLED为1，表示当前节点获取锁的请求已经被取消)</li></ul><blockquote><p>tips:<br>1.<code>一个约定</code>：<em>head节点代表当前正在持有锁的节点。</em> 若当前节点的前置节点是head，那么该节点就开始自旋获取锁。一旦head节点释放，当前节点就能第一时间获取到。<br>2.interrupted变量最终被返回出去，上层acquire方法判断该值，来选择是否调用当前线程中断。这里属于一种延迟中断机制。</p></blockquote><p><img src="/images/Java%E5%B9%B6%E5%8F%91-AQS(%E4%BA%8C)/acquireQueued%E6%96%B9%E6%B3%95.png" alt="acquireQueued方法.png"></p><h4 id="shouldParkAfterFailedAcquire"><a href="#shouldParkAfterFailedAcquire" class="headerlink" title="shouldParkAfterFailedAcquire"></a>shouldParkAfterFailedAcquire</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldParkAfterFailedAcquire</span><span class="hljs-params">(Node pred, Node node)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> pred.waitStatus;<br>    <span class="hljs-keyword">if</span> (ws == Node.SIGNAL)<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * This node has already set status asking a release</span><br><span class="hljs-comment">         * to signal it, so it can safely park.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (ws &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * Predecessor was cancelled. Skip over predecessors and</span><br><span class="hljs-comment">         * indicate retry.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">do</span> &#123;<br>            node.prev = pred = pred.prev;<br>        &#125; <span class="hljs-keyword">while</span> (pred.waitStatus &gt; <span class="hljs-number">0</span>);<br>        pred.next = node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * waitStatus must be 0 or PROPAGATE.  Indicate that we</span><br><span class="hljs-comment">         * need a signal, but don&#x27;t park yet.  Caller will need to</span><br><span class="hljs-comment">         * retry to make sure it cannot acquire before parking.</span><br><span class="hljs-comment">         */</span><br>        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>若当前节点没有拿锁的权限或拿锁失败(即acquireQueued()中的第7行if)，<br>会进入shouldParkAfterFailedAcquire判断是否需要挂起(park)，方法参数是pred Node和当前Node的引用。</p><p>首先获取pred Node的waitStatus，开头说过该枚举的含义：</p><blockquote><p>0，节点初始化默认值或节点已经释放<br>CANCELLED为1，表示当前节点获取锁的请求已经被取消<br>SIGNAL为-1，表示当前节点的后续节点需要被唤醒<br>CONDITION为-2，表示当前节点正在等待某一个Condition对象，和条件模式相关<br>PROPAGATE为-3，传递共享模式下锁释放状态，和共享模式相关</p></blockquote><p>回到方法流程：</p><ul><li>3-8行。当pred的waitStatus为SIGNAL时，说明前置节点也在拿锁，并且之后将会唤醒当前节点，所以当前线程可以挂起休息，返回true。</li><li>9-17行。如果ws大于0，说明pred的waitStatus是CANCELLED，所以可以将其从队列中删除。<br>这里通过从后向前搜索，将pred指向搜索过程中第一个waitStatus不为CANCEL的节点。相当于链式的删除被CANCEL的节点。<br>然后返回false，代表当前节点不需要挂起，因为pred指向了新的Node，需要重试外层逻辑。</li><li>19-24行。到这里ws只会出现0的情况(?见下方tips)，0表示pred处于初始化默认状态，所以通过CAS将当前pred的waitStatus修改为SIGNAL，然后返回false，重试外层逻辑。<blockquote><p>tips：走到19-24这时，pred的ws还有两种可能，0或PROPAGATE，为什么不能是CONDITION？<br>因为waitStatus只有在其他条件模式下，才会被修改为CONDITION，这里不会出现，<br>并且只有在共享模式下，才可能出现waitStatus为PROPAGATE，暂时也不用管。<br>那么在独占模式下，ws只会出现0的情况。</p></blockquote></li></ul><p>如果shouldParkAfterFailedAcquire返回false，那么在进行一轮重试acquireQueued核心流程；<br>如果返回true，则代表当前节点需要被挂起，则进入 -&gt; “<code>parkAndCheckInterrupt方法</code>”**</p><h4 id="parkAndCheckInterrupt"><a href="#parkAndCheckInterrupt" class="headerlink" title="parkAndCheckInterrupt"></a>parkAndCheckInterrupt</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">parkAndCheckInterrupt</span><span class="hljs-params">()</span> &#123;<br>    LockSupport.park(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-keyword">return</span> Thread.interrupted();<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法只有两行，对当前线程进行挂起操作。<br>这里<code>LockSupport.park(this)</code>本质是通过UNSAFE下的native方法调用操作系统原语来将当前线程挂起。</p><ul><li><strong>此时当前Node中的线程阻塞在此处，直到持有锁的线程调用“<code>release方法</code>”，release方法会唤醒后续节点。</strong></li></ul><p>那么<code>return Thread.interrupted()</code>又是什么意思呢？</p><blockquote><p>因为在线程挂起期间，该线程可能会被调用中断方法，线程在LockSupport.park(挂起)期间，无法响应中断，<br>所以只有当线程被唤醒，执行到第三行，才回去检查park期间是否被调用中断，<br>如果有的话，则将改值传递出去，通过外层来响应中断。</p></blockquote><h4 id="acquireQueued总结"><a href="#acquireQueued总结" class="headerlink" title="acquireQueued总结"></a>acquireQueued总结</h4><p>通过对acquireQueued方法分析，<br>如果当前线程所在的节点处于头节点的后一个，那么它将会不断去尝试拿锁，直到获取成功。<br>否则进行判断，是否需要挂起。<br>这样能保证head之后的一个节点在自旋CAS获取锁，其他线程都已经被挂起或正在被挂起。这样能最大限度的避免无用的自旋消耗CPU</p><hr><p><strong>上面大量的线程被挂起，那么就会有唤醒的时候。当线程释放锁，那么将会尝试唤醒后续节点。-&gt; <code>release方法</code></strong></p><hr><h2 id="tryRelease"><a href="#tryRelease" class="headerlink" title="tryRelease"></a>tryRelease</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>和tryAcquire一样，tryRelease也是AQS开放给上层自由实现的抽象方法</p><h2 id="release"><a href="#release" class="headerlink" title="release"></a>release</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">release</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">if</span> (tryRelease(arg)) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-literal">null</span> &amp;&amp; h.waitStatus != <span class="hljs-number">0</span>)<br>            unparkSuccessor(h);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>假如尝试释放锁成功，下一步就是唤醒等待队列的其他节点，这里主要是看<code>unparkSuccessor(h)方法</code>，参数是head Node。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unparkSuccessor</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * If status is negative (i.e., possibly needing signal) try</span><br><span class="hljs-comment">     * to clear in anticipation of signalling.  It is OK if this</span><br><span class="hljs-comment">     * fails or if status is changed by waiting thread.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> node.waitStatus;<br>    <span class="hljs-keyword">if</span> (ws &lt; <span class="hljs-number">0</span>)<br>        compareAndSetWaitStatus(node, ws, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Thread to unpark is held in successor, which is normally</span><br><span class="hljs-comment">     * just the next node.  But if cancelled or apparently null,</span><br><span class="hljs-comment">     * traverse backwards from tail to find the actual</span><br><span class="hljs-comment">     * non-cancelled successor.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> node.next;<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> || s.waitStatus &gt; <span class="hljs-number">0</span>) &#123;<br>        s = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail; t != <span class="hljs-literal">null</span> &amp;&amp; t != node; t = t.prev)<br>            <span class="hljs-keyword">if</span> (t.waitStatus &lt;= <span class="hljs-number">0</span>)<br>                s = t;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (s != <span class="hljs-literal">null</span>)<br>        LockSupport.unpark(s.thread);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>0，节点初始化默认值或节点已经释放<br>CANCELLED为1，表示当前节点获取锁的请求已经被取消<br>SIGNAL为-1，表示当前节点的后续节点需要被唤醒<br>CONDITION为-2，表示当前节点正在等待某一个Condition对象，和条件模式相关<br>PROPAGATE为-3，传递共享模式下锁释放状态，和共享模式相关</p></blockquote><p><strong>获取head的waitStatus，如果不为0，那么将其置为0，表示锁已释放。</strong><br>接下来获取后续节点，如果后续节点为null或处于CANCELED状态，<br>那么<code>从后往前(见tips)</code>搜索，找到除了head外，最靠前且非CANCELED状态的Node，对其进行唤醒，让它起来尝试拿锁。</p><p>这时，拿锁、挂起、释放、唤醒都能够高效进行</p><blockquote><p>tips：为什么是从后往前？而不是从头开始向尾部搜索。<br>在入队操作addWaiter方法中，前后节点的建立顺序。<br>1.后节点的pre指向前节点<br>2.前节点的next才会指向后节点<br>这两步的操作并不是原子的，也就是如果从前往后搜索，可能前节点的next还未建立好，那么搜索会中断</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java并发</tag>
      
      <tag>AQS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java并发-锁(一)</title>
    <link href="/2022/06/16/Java%E5%B9%B6%E5%8F%91-%E9%94%81(%E4%B8%80)/"/>
    <url>/2022/06/16/Java%E5%B9%B6%E5%8F%91-%E9%94%81(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<p>锁、悲观锁(对象锁)机制</p><span id="more"></span><h1 id="什么是锁？"><a href="#什么是锁？" class="headerlink" title="什么是锁？"></a>什么是锁？</h1><p>在并发环境下，会出现多个线程对一个资源进行争抢的情况。为了解决争抢时引发的问题，就出现了锁。</p><p>锁是用来控制多个线程访问共享资源的方式，一般来说，一个锁能够防止多个线程同时访问共享资源。</p><blockquote><p>可以认为本质上就是在临界资源上对线程的一种串行化。</p></blockquote><h2 id="乐观锁、悲观锁"><a href="#乐观锁、悲观锁" class="headerlink" title="乐观锁、悲观锁"></a>乐观锁、悲观锁</h2><p><img src="/images/Java%E5%B9%B6%E5%8F%91-%E9%94%81(%E4%B8%80)/%E4%B9%90%E8%A7%82%E9%94%81%E6%82%B2%E8%A7%82%E9%94%81.png" alt="乐观锁悲观锁"></p><h1 id="Java锁机制"><a href="#Java锁机制" class="headerlink" title="Java锁机制"></a>Java锁机制</h1><h2 id="Jvm运行结构"><a href="#Jvm运行结构" class="headerlink" title="Jvm运行结构"></a>Jvm运行结构</h2><p>Jvm运行内存结构主要五个部分：程序计数器(PC寄存器)、JVM栈、Native方法栈、堆、方法区。</p><p><img src="/images/Java%E5%B9%B6%E5%8F%91-%E9%94%81(%E4%B8%80)/jvm%E8%BF%90%E8%A1%8C%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84.png" alt="jvm运行内存结构"></p><ul><li>对蓝色区域进行争抢的时候，就会引发难以预料的情况。</li></ul><blockquote><p>在Java中，锁主要采用了两种实现方式：<br><code>1</code>、基于Object的悲观锁（本文主要讲解学习的）<br><code>2</code>、基于CAS的乐观锁。</p></blockquote><h2 id="对象、对象头"><a href="#对象、对象头" class="headerlink" title="对象、对象头"></a>对象、对象头</h2><p>在Java中，每个Object，都拥有一把锁，锁存放在对象头中，记录当前对象被那个线程占用。</p><ul><li>Java对象分为三个部分：<ul><li>对象头</li><li>实例数据</li><li>对齐填充字节</li></ul></li></ul><blockquote><p>实例数据就是你在初始化对象时设定的属性和状态内容。<br>对齐填充字节是为了满足 “Java对象大小是8字节的倍数” 这一条件而设计的，为对象填充一些无用字节，大可不必理会。</p></blockquote><hr><ul><li>对象头是重点，对象头包含了两部分:<ul><li>Mark Word</li><li>Class Pointer</li></ul></li></ul><blockquote><p>相比较于实例数据，对象头属于一些额储存开销，所以被设计的极小来提升效率（一般为232bit或264bit）<br>ClassPointer是一个指针，指向当前对象类型所在方法区中的Class信息。<br>Mark Word存储了很多当前对象运行时的状态信息，比如HashCode、锁状态标志、指向锁记录的指针、偏向线程Id、锁标志位等等。</p></blockquote><p>MarkWord图<br><img src="/images/Java%E5%B9%B6%E5%8F%91-%E9%94%81(%E4%B8%80)/MarkWord.png" alt="MarkWord"></p><blockquote><p>Mark Word只有32bit（或64bit）并且它是非结构化的。<br>这样，在不同的锁标识位下，不同字段可以重用不同的比特位，节省空间。</p></blockquote><p>上图中，这把抽象的 <strong><code>“锁”</code></strong> 的信息就储存在对象头的MarkWord中。<br>重点关注最后两位，这两位代表锁标志位，分别对应 <strong>“<code>无锁</code>”</strong> , <strong>“<code>偏向锁</code>”</strong> , <strong>“<code>轻量级锁</code>”</strong> , <strong>“<code>重量级锁</code>”</strong> 这四种状态。<br>锁状态是只能升级，不能降级。 <strong>无锁-&gt;偏向锁-&gt;轻量级锁-&gt;重量级锁</strong></p><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p>在Java中，启用对象锁的方式是使用 <strong>“<code>synchronized</code>”</strong> 关键字。</p><blockquote><p>synchronized被编译后会生成<code>monitorenter</code>和<code>monitorexit</code>两个字节码指令，依赖这两个指令来进行线程同步。</p></blockquote><p><img src="/images/Java%E5%B9%B6%E5%8F%91-%E9%94%81(%E4%B8%80)/synchronized%E7%BC%96%E8%AF%91%E5%90%8E.jpg" alt="synchronized编译后"></p><hr><p>monitor(管程&#x2F;监视器)<br><img src="/images/Java%E5%B9%B6%E5%8F%91-%E9%94%81(%E4%B8%80)/monitor.png" alt="monitor"></p><p>上图模拟流程：<br>1.<code>Entry Set</code>中聚集了一些想要进入<code>Monitor</code>的线程，处于<code>waiting</code>状态。<br>2.假设某个名为<code>A线程</code>成功进入<code>Monitor</code>，那么它就处于<code>active</code>状态。<br>3.此时线程执行途中，遇到一个判断条件，需要它暂时让出执行权，那么它将进入<code>Wait Set</code>，状态也被标记为<code>waiting</code>。<br>4.这时<code>Entry Set</code>中的其他线程就有机会进入<code>Monitor</code>，假设一个<code>线程B</code>成功进入并且顺利完成，<br>那么它可以通过<code>notify</code>的行是来唤醒<code>Wait Set</code>中的<code>线程A</code>，让<code>线程A</code>再次进入<code>Monitor</code>，执行完成后便退出。</p><p>这就是synchronized关键字所实现的同步机制，需要注意的：</p><blockquote><p>synchronized有性能问题，因为 <code>synchronized</code> 依赖 <code>monitor</code> 依赖 <code>Mutex Lock</code>(操作系统提供的)<br>所以每当挂起或者唤醒一个线程都要切换到操作系统的内核态，这个操作是比较重量级的。<br>在某些情况下，甚至切换时间本身就会超出线程执行任务的时间。</p></blockquote><p>但是从Java6开始，synchronized进行了优化，引入了 “<code>偏向锁</code>” , “<code>轻量级锁</code>” 的概念。<br>因此对象锁总共有四种状态，从低到高分别是 <strong>“<code>无锁</code>”</strong> , <strong>“<code>偏向锁</code>”</strong> , <strong>“<code>轻量级锁</code>”</strong> , <strong>“<code>重量级锁</code>”</strong> ，这就分别对应Mark Word中锁标记位的四种状态<br>锁状态是只能升级，不能降级。 <strong>无锁-&gt;偏向锁-&gt;轻量级锁-&gt;重量级锁</strong></p><h2 id="对象锁的四种状态"><a href="#对象锁的四种状态" class="headerlink" title="对象锁的四种状态"></a>对象锁的四种状态</h2><h3 id="无锁"><a href="#无锁" class="headerlink" title="无锁"></a>无锁</h3><p>无锁顾名思义就是没有对资源进行操作系统级别（Mute Lock）的锁定。</p><p>在这个基础上，“<strong>无锁</strong>” 其实有两种语义。</p><ul><li>某种资源不会出现在多线程环境下，或者即使出现在多线程环境下也不会出现线程竞争的情况，<br>那么确实无需堆这个资源进行任何的同步保护，直接给各个线程随意调用就可以。</li><li>资源会被竞争，但是不使用操作系统同步原语对共享资源进行锁定，而是通过一些其他的机制来控制同步。<br>比如CAS(CompareAndSwap)，通过函数级别的锁，进行 “无锁” 编程。<br>大部分情况下，无锁效率更高，但是并非意味着无锁能够全面替代有锁。</li></ul><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><ul><li><p>概念<br>假设一个对象被加锁了，但在实际运行时，只有一条线程会获取这个对象锁，<br>那么最理想的方式，是不通过系统状态切换，也不通过CAS，只在用户态把这件事做掉。<br>设想的是，最好对象锁能认识这个线程，只要这个线程过来，那么对象直接把锁交出去。<br>我们可以认为这个对象锁偏爱这个线程，所以被称为 “偏向锁”</p></li><li><p>是如何实现的？<br>在Mark Word中，当锁的标志位是01，(详细可见上图MarkWord)<br>那么判断倒数第三个bit是否为1，如果是1，代表当前对象的锁状态为偏向锁，<br>于是再去读Mark Word的前23个bit，这23个bit就是线程ID，<br>通过线程ID来确定想要获得的对象锁的线程是不是“被偏爱的线程”</p></li></ul><p>假设情况发送了变化，对象发现不只有一个线程，而是多个线程正在竞争锁，那么偏向锁会升级为<strong>“<code>轻量级锁</code>”</strong></p><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><blockquote><p>(在MarkWord中的占位详细可见上图MarkWord，以及jvm虚拟机见上上图jvm运行内存结构)</p></blockquote><p>不再是用MarkWord中的线程ID来找到线程和锁之间的绑定关系。</p><p>当一个线程想要获得某个对象的锁时，通过锁标志位00来知道是轻量级锁，<br>这时，线程会在自己的虚拟机中开辟一块 <strong>“ Lock Record ”</strong> 的空间。关于虚拟机栈，是线程私有的</p><p><strong>Lock Record 存放的是对象头的Mark Word的副本以及Owner指针。</strong><br>线程通过CAS去尝试获取锁，一旦获得，那么将会复制该对象的Mark Word到虚拟机栈的Lock Record中，并且将Lock Record中的Owner指针指向该对象锁。<br>另一方面，对象的Mark Word中的前30bit将生成一个指针，指向持有该对象锁的线程虚拟机栈中的Lock Record。<br>这样就实现了线程和对象锁的绑定，互相知道对方的存在。</p><p>这时，这个对象被锁定了，获取了这个对象锁的线程就可以去执行一些任务。<br>如果其他线程想要获取这个对象怎么办？-此时其他线程将会<strong>自旋等待</strong>（见下方小tips）。</p><p>假如对象锁被一个线程持有着，此时也有一个线程正在自旋等待，<br>如果同时又有多个线程想要获取这个对象锁。<br>也就是说，一旦自旋等待的线程数超过1个，那么轻量级锁将会升级成为<strong>“<code>重量级锁</code>”</strong></p><blockquote><p>知识盲区？（也有说 自旋个数超过CPU核数的一半  或者自旋次数超过10次才会升级成重量级锁）</p></blockquote><blockquote><p>tips：<br>自旋：可以理解为一种轮询，自己不断循环尝试去看锁有没有释放，<br>如果释放了，就获取，没有释放就进行下一轮轮询，这种方式区别于被操作系统阻塞，如果对象锁很快被释放，自旋去获得锁完全在用户空间解决，不需要系统中断和线程恢复，所以效率更高。<br>自旋相当于CPU在空转，如果长时间自旋，将会浪费CPU自源，于是出现一种叫做<strong>“自适应自旋”</strong>的优化，<br>简单来说就是自旋时间不再固定，是由上一次在同一个锁上的自旋时间以及锁的状态来决定。<br>比如：当前正在自旋等待的线程刚刚成功获得过锁，但是锁目前被其他线程持有，那么虚拟机会任务下次自旋很有可能会再次成功，进而允许更长的自旋时间。</p></blockquote><h3 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h3><p>如果被标记为重量级锁，那么就会和最初的synchronized那样，通过Monitor来对线程进行控制，此时将会使用同步原语来锁定资源，对线程的控制也最为严格</p><p><img src="/images/Java%E5%B9%B6%E5%8F%91-%E9%94%81(%E4%B8%80)/monitor.png" alt="重量级锁"></p><h3 id="对象锁的状态变化"><a href="#对象锁的状态变化" class="headerlink" title="对象锁的状态变化"></a>对象锁的状态变化</h3><p><img src="/images/Java%E5%B9%B6%E5%8F%91-%E9%94%81(%E4%B8%80)/%E5%AF%B9%E8%B1%A1%E9%94%81%E7%9A%84%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96.png" alt="对象锁的状态变化"></p><h1 id="思考？理解"><a href="#思考？理解" class="headerlink" title="思考？理解"></a>思考？理解</h1><h3 id="为什么有轻量级锁。直接使用monitor不行吗？"><a href="#为什么有轻量级锁。直接使用monitor不行吗？" class="headerlink" title="为什么有轻量级锁。直接使用monitor不行吗？"></a>为什么有轻量级锁。直接使用monitor不行吗？</h3><blockquote><p>可以的，但如果有多个线程使用同一个资源，但是他们没有竞争。<br><code>线程1</code>在13:00点使用，<code>线程2</code>在14:00点使用，没有竞争。如果还用monitor是不是有点杀鸡用牛刀了。<br>为了提升性能，提出了轻量级锁。不再用对象关联monitor了，而是对象的mark word字段和线程栈的 lock record进行交换作为锁。<br>如果有锁重入，就会创建多个lock record放入线程栈，<br>那么问题有来了，<code>如果重入多了，多次创建lock record不是也消耗性能吗？</code><br>所以提出了偏向锁。对线头设置线程id，解决重入问题。</p></blockquote><h3 id="理清下这些锁在什么场景下使用？"><a href="#理清下这些锁在什么场景下使用？" class="headerlink" title="理清下这些锁在什么场景下使用？"></a>理清下这些锁在什么场景下使用？</h3><ul><li>偏向锁：只有一个线程，没有其他线程</li><li>轻量级锁：多个线程但是没有竞争<br>这点尤为重要，轻量级锁是解决不了锁竞争的。轻量级锁解决的问题是在多线程没有竞争下，仍旧关联monitor的问题。</li><li>重量级锁：多个线程有竞争</li></ul><h3 id="锁升级的过程："><a href="#锁升级的过程：" class="headerlink" title="锁升级的过程："></a>锁升级的过程：</h3><blockquote><p>对象默认是开启<code>偏向锁</code>的，当一个线程使用时，对象mark word会设置该线程的id，<br>如果还有另外一个线程 会升级为<code>轻量级锁</code>，<br>如果<code>轻量级锁</code>升级<code>失败</code>，说明有线程正在使用资源，发生了资源竞争，会升级为<code>重量级锁</code>。<br>如果<code>轻量级锁</code>升级<code>成功</code>了，在释放锁的使用，对象会变成<code>无锁状态</code>，不再是<code>偏向</code>的，下次加锁是会直接在<code>轻量级锁</code>。</p></blockquote><h3 id="还有一点可能有异议？"><a href="#还有一点可能有异议？" class="headerlink" title="还有一点可能有异议？"></a>还有一点可能有异议？</h3><blockquote><p>自旋的过程是发生在有锁竞争的情况下，所以该锁已经是<code>重量级锁</code>了。<br>自旋是已经升级为<code>重量级锁</code>入队之前进行的自旋，自旋失败会入队排队，但此时已经是<code>重量级锁</code>了，<br>从<code>偏项锁</code>升级为<code>轻量级锁</code>的时候就一次cas，成功就成功，不成功就升级为<code>重量级锁</code>。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>锁</tag>
      
      <tag>Java并发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring专题-知识点</title>
    <link href="/2022/06/15/Spring%E4%B8%93%E9%A2%98-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2022/06/15/Spring%E4%B8%93%E9%A2%98-%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>Spring专题-知识点，面试回答思路整理。</p><span id="more"></span><h1 id="1、谈谈Spring-IOC的理解，原理与实现"><a href="#1、谈谈Spring-IOC的理解，原理与实现" class="headerlink" title="1、谈谈Spring IOC的理解，原理与实现?"></a>1、谈谈Spring IOC的理解，原理与实现?</h1><h2 id="总"><a href="#总" class="headerlink" title="总:"></a>总:</h2><ul><li><p>控制反转：理论思想，原来的对象是由使用者来进行控制，有了spring之后，可以把整个对象交给spring来帮我们进行管理</p></li><li><p>DI：依赖注入，把对应的属性的值注入到具体的对象中，@Autowired，populateBean完成属性值的注入</p></li><li><p>容器：存储对象，使用map结构来存储，在spring中一般存在三级缓存，singletonObjects存放完整的bean对象,整个bean的生命周期，从创建到使用到销毁的过程全部都是由容器来管理（bean的生命周期）</p></li></ul><h2 id="分"><a href="#分" class="headerlink" title="分:"></a>分:</h2><p><code>1、</code>一般聊ioc容器的时候要涉及到容器的创建过程（beanFactory,DefaultListableBeanFactory）,向bean工厂中设置一些参数（BeanPostProcessor,Aware接口的子类）等等属性</p><p><code>2</code>、加载解析bean对象，准备要创建的bean对象的定义对象beanDefinition,(xml或者注解的解析过程)</p><p><code>3</code>、beanFactoryPostProcessor的处理，此处是扩展点，PlaceHolderConfigurSupport,ConfigurationClassPostProcessor</p><p><code>4</code>、BeanPostProcessor的注册功能，方便后续对bean对象完成具体的扩展功能</p><p><code>5</code>、通过反射的方式讲BeanDefinition对象实例化成具体的bean对象，</p><p><code>6</code>、bean对象的初始化过程（填充属性，调用aware子类的方法，调用BeanPostProcessor前置处理方法，调用init-mehtod方法，调用BeanPostProcessor的后置处理方法）</p><p><code>7</code>、生成完整的bean对象，通过getBean方法可以直接获取</p><p><code>8</code>、销毁过程</p><h1 id="2、谈一下spring-IOC的底层实现"><a href="#2、谈一下spring-IOC的底层实现" class="headerlink" title="2、谈一下spring IOC的底层实现"></a>2、谈一下spring IOC的底层实现</h1><ul><li><p>X底层实现：工作原理，过程，数据结构，流程，设计模式，设计思想</p></li><li><p>√ 你对他的理解和你了解过的实现过程</p></li><li><p>反射，工厂，设计模式（会的说，不会的不说），关键的几个方法【createBeanFactory，getBean,doGetBean,createBean,doCreateBean,createBeanInstance(getDeclaredConstructor,newinstance),populateBean,initializingBean】</p></li></ul><p><code>1</code>、先通过createBeanFactory创建出一个Bean工厂（DefaultListableBeanFactory）</p><p><code>2</code>、开始循环创建对象，因为容器中的bean默认都是单例的，所以优先通过getBean,doGetBean从容器中查找，找不到的话，</p><p><code>3</code>、通过createBean,doCreateBean方法，以反射的方式创建对象，一般情况下使用的是无参的构造方法（getDeclaredConstructor，newInstance）</p><p><code>4</code>、进行对象的属性填充populateBean</p><p><code>5</code>、进行其他的初始化操作（initializingBean）</p><h1 id="3、描述一下bean的生命周期？"><a href="#3、描述一下bean的生命周期？" class="headerlink" title="3、描述一下bean的生命周期？"></a>3、描述一下bean的生命周期？</h1><p>【背图-见最后】记住图中的流程</p><p>在表述的时候不要只说图中有的关键点，要学会扩展描述：</p><p><code>1</code>、实例化bean：反射的方式生成对象</p><p><code>2</code>、填充bean的属性：populateBean(),循环依赖的问题（三级缓存）</p><p><code>3</code>、调用aware接口相关的方法：invokeAwareMethod(完成BeanName,BeanFactory,BeanClassLoader对象的属性设置)</p><p><code>4</code>、调用BeanPostProcessor中的前置处理方法：使用比较多的有（ApplicationContextPostProcessor,设置ApplicationContext,Environment,ResourceLoader,EmbeddValueResolver等对象）</p><p><code>5</code>、调用initmethod方法：invokeInitmethod(),判断是否实现了initializingBean接口，如果有，调用afterPropertiesSet方法，没有就不调用</p><p><code>6</code>、调用BeanPostProcessor的后置处理方法：spring的aop就是在此处实现的，AbstractAutoProxyCreator注册Destuction相关的回调接口：钩子函数</p><p><code>7</code>、获取到完整的对象，可以通过getBean的方式来进行对象的获取</p><p><code>8</code>、销毁流程，1.判断是否实现了DispoableBean接口，2.调用destroyMethod方法</p><h1 id="4、Spring-是如何解决循环依赖的问题的？"><a href="#4、Spring-是如何解决循环依赖的问题的？" class="headerlink" title="4、Spring 是如何解决循环依赖的问题的？"></a>4、Spring 是如何解决循环依赖的问题的？</h1><blockquote><p>三级缓存，提前暴露对象，aop</p></blockquote><ul><li><p>总：什么是循环依赖问题，A依赖B,B依赖A</p></li><li><p>分：先说明bean的创建过程：实例化，初始化（填充属性）</p><p>  <code>1</code>、先创建A对象，实例化A对象，此时A对象中的b属性为空，填充属性b</p><p>  <code>2</code>、从容器中查找B对象，如果找到了，直接赋值不存在循环依赖问题（不通），找不到直接创建B对象</p><p>  <code>3</code>、实例化B对象，此时B对象中的a属性为空，填充属性a</p><p>  <code>4</code>、从容器中查找A对象，找不到，直接创建</p></li><li><p>形成闭环的原因</p></li></ul><p>此时，如果仔细琢磨的话，会发现A对象是存在的，只不过此时的A对象不是一个完整的状态，只完成了实例化但是未完成初始化，如果在程序调用过程中，拥有了某个对象的引用，能否在后期给他完成赋值操作，可以优先把非完整状态的对象优先赋值，等待后续操作来完成赋值，相当于提前暴露了某个不完整对象的引用，所以解决问题的核心在于实例化和初始化分开操作，这也是解决循环依赖问题的关键，</p><p>当所有的对象都完成实例化和初始化操作之后，还要把完整对象放到容器中，此时在容器中存在对象的几个状态，完成实例化&#x3D;但未完成初始化，完整状态，因为都在容器中，所以要使用不同的map结构来进行存储，此时就有了一级缓存和二级缓存，如果一级缓存中有了，那么二级缓存中就不会存在同名的对象，因为他们的查找顺序是1，2，3这样的方式来查找的。一级缓存中放的是完整对象，二级缓存中放的是非完整对象</p><p>为什么需要三级缓存？三级缓存的value类型是ObjectFactory,是一个函数式接口，存在的意义是保证在整个容器的运行过程中同名的bean对象只能有一个。</p><p>如果一个对象需要被代理，或者说需要生成代理对象，那么要不要优先生成一个普通对象？要</p><p>普通对象和代理对象是不能同时出现在容器中的，因此当一个对象需要被代理的时候，就要使用代理对象覆盖掉之前的普通对象，在实际的调用过程中，是没有办法确定什么时候对象被使用，所以就要求当某个对象被调用的时候，优先判断此对象是否需要被代理，类似于一种回调机制的实现，因此传入lambda表达式的时候，可以通过lambda表达式来执行对象的覆盖过程，getEarlyBeanReference()</p><p>因此，所有的bean对象在创建的时候都要优先放到三级缓存中，在后续的使用过程中，如果需要被代理则返回代理对象，如果不需要被代理，则直接返回普通对象</p><h1 id="4-1、缓存的放置时间和删除时间"><a href="#4-1、缓存的放置时间和删除时间" class="headerlink" title="4.1、缓存的放置时间和删除时间"></a>4.1、缓存的放置时间和删除时间</h1><ul><li><p>三级缓存：createBeanInstance之后：addSingletonFactory</p></li><li><p>二级缓存：第一次从三级缓存确定对象是代理对象还是普通对象的时候，同时删除三级缓存 getSingleton</p></li><li><p>一级缓存：生成完整对象之后放到一级缓存，删除二三级缓存:addSingleton</p></li></ul><h1 id="5、Bean-Factory与FactoryBean有什么区别？"><a href="#5、Bean-Factory与FactoryBean有什么区别？" class="headerlink" title="5、Bean Factory与FactoryBean有什么区别？"></a>5、Bean Factory与FactoryBean有什么区别？</h1><ul><li><p>相同点：都是用来创建bean对象的</p></li><li><p>不同点：使用BeanFactory创建对象的时候，必须要遵循严格的生命周期流程，太复杂了，，如果想要简单的自定义某个对象的创建，同时创建完成的对象想交给spring来管理，那么就需要实现FactroyBean接口了</p><p>  isSingleton:是否是单例对象</p><p>  getObjectType:获取返回对象的类型</p><p>  getObject:自定义创建对象的过程(new，反射，动态代理)</p></li></ul><h1 id="6、Spring中用到的设计模式"><a href="#6、Spring中用到的设计模式" class="headerlink" title="6、Spring中用到的设计模式?"></a>6、Spring中用到的设计模式?</h1><p>单例模式：bean默认都是单例的</p><p>原型模式：指定作用域为prototype</p><p>工厂模式：BeanFactory</p><p>模板方法：postProcessBeanFactory,onRefresh,initPropertyValue</p><p>策略模式：XmlBeanDefinitionReader,PropertiesBeanDefinitionReader</p><p>观察者模式：listener，event，multicast</p><p>适配器模式：Adapter</p><p>装饰者模式：BeanWrapper</p><p>责任链模式：使用aop的时候会先生成一个拦截器链</p><p>代理模式：动态代理</p><p>委托者模式：delegate</p><p>。。。。。。。。。等。。。</p><h1 id="7、Spring的AOP的底层实现原理"><a href="#7、Spring的AOP的底层实现原理" class="headerlink" title="7、Spring的AOP的底层实现原理?"></a>7、Spring的AOP的底层实现原理?</h1><blockquote><p>动态代理。aop是ioc的一个扩展功能，先有的ioc，再有的aop，只是在ioc的整个流程中新增的一个扩展点而已：BeanPostProcessor</p></blockquote><ul><li><p>总：aop概念，应用场景，动态代理</p></li><li><p>分：bean的创建过程中有一个步骤可以对bean进行扩展实现，aop本身就是一个扩展功能，所以在BeanPostProcessor的后置处理方法中来进行实现</p><p>  <code>1</code>、代理对象的创建过程（advice，切面，切点）</p><p>  <code>2</code>、通过jdk或者cglib的方式来生成代理对象</p><p>  <code>3</code>、在执行方法调用的时候，会调用到生成的字节码文件中，直接回找到DynamicAdvisoredInterceptor类中的intercept方法，从此方法开始执行</p><p>  <code>4</code>、根据之前定义好的通知来生成拦截器链</p><p>  <code>5</code>、从拦截器链中依次获取每一个通知开始进行执行，在执行过程中，为了方便找到下一个通知是哪个，会有一个CglibMethodInvocation的对象，找的时候是从-1的位置一次开始查找并且执行的。</p></li></ul><h1 id="8、Spring的事务是如何回滚的-事务管理是如何实现的？"><a href="#8、Spring的事务是如何回滚的-事务管理是如何实现的？" class="headerlink" title="8、Spring的事务是如何回滚的?事务管理是如何实现的？"></a>8、Spring的事务是如何回滚的?事务管理是如何实现的？</h1><ul><li><p>总：spring的事务是由aop来实现的，首先要生成具体的代理对象，然后按照aop的整套流程来执行具体的操作逻辑，正常情况下要通过通知来完成核心功能，但是事务不是通过通知来实现的，而是通过一个TransactionInterceptor来实现的，然后调用invoke来实现具体的逻辑</p></li><li><p>分：</p><p>  <code>1</code>、先做准备工作，解析各个方法上事务相关的属性，根据具体的属性来判断是否开始新事务</p><p>  <code>2</code>、当需要开启的时候，获取数据库连接，关闭自动提交功能，开起事务</p><p>  <code>3</code>、执行具体的sql逻辑操作</p><p>  <code>4</code>、在操作过程中，如果执行失败了，那么会通过completeTransactionAfterThrowing看来完成事务的回滚操作，回滚的具体逻辑是通过doRollBack方法来实现的，实现的时候也是要先获取连接对象，通过连接对象来回滚</p><p>  <code>5</code>、如果执行过程中，没有任何意外情况的发生，那么通过commitTransactionAfterReturning来完成事务的提交操作，提交的具体逻辑是通过doCommit方法来实现的，实现的时候也是要获取连接，通过连接对象来提交</p><p>  <code>6</code>、当事务执行完毕之后需要清除相关的事务信息cleanupTransactionInfo</p></li></ul><p>如果想要聊的更加细致的话，需要知道TransactionInfo,TransactionStatus,</p><h1 id="9、谈一下spring事务传播？"><a href="#9、谈一下spring事务传播？" class="headerlink" title="9、谈一下spring事务传播？"></a>9、谈一下spring事务传播？</h1><ul><li>传播特性有几种？7种<blockquote><p>【Required】【Requires_new】【nested】【Support】【Not_Support】【Never】【Mandatory】</p></blockquote></li></ul><p><code>Q1</code>、 某一个事务嵌套另一个事务的时候怎么办？<br><code>Q2</code>、 A方法调用B方法，AB方法都有事务，并且传播特性不同，那么A如果有异常，B怎么办，B如果有异常，A怎么办？</p><ul><li><p>总：事务的传播特性指的是不同方法的嵌套调用过程中，事务应该如何进行处理，是用同一个事务还是不同的事务，当出现异常的时候会回滚还是提交，两个方法之间的相关影响，在日常工作中，使用比较多的是required，Requires_new,nested</p></li><li><p>分：<br>  <code>1</code>、先说事务的不同分类，可以分为三类：支持当前事务，不支持当前事务，嵌套事务</p><p>  <code>2</code>、如果外层方法是required，内层方法是，required,requires_new,nested</p><p>  <code>3</code>、如果外层方法是requires_new，内层方法是，required,requires_new,nested</p><p>  <code>4</code>、如果外层方法是nested，内层方法是，required,requires_new,nested</p></li></ul><h1 id="10、【总览图】"><a href="#10、【总览图】" class="headerlink" title="10、【总览图】"></a>10、【总览图】</h1><p><img src="/images/Spring%E4%B8%93%E9%A2%98-%E7%9F%A5%E8%AF%86%E7%82%B9/spring%E6%BA%90%E7%A0%81.jpg" alt="总览图.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信公众号开发配置(个人订阅号)</title>
    <link href="/2022/06/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE(%E4%B8%AA%E4%BA%BA%E8%AE%A2%E9%98%85%E5%8F%B7)/"/>
    <url>/2022/06/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE(%E4%B8%AA%E4%BA%BA%E8%AE%A2%E9%98%85%E5%8F%B7)/</url>
    
    <content type="html"><![CDATA[<p>好多年前申请了一个微信公众号，都冻结好几回了，之前看到朋友在弄，我也尝试弄一个看看。【简洁版】</p><span id="more"></span><h1 id="一、公众号"><a href="#一、公众号" class="headerlink" title="一、公众号"></a>一、公众号</h1><h2 id="1-申请"><a href="#1-申请" class="headerlink" title="1.申请"></a>1.申请</h2><p>这个还是需要去到官方，自行申请使用</p><blockquote><p><a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a></p></blockquote><h2 id="2-文档"><a href="#2-文档" class="headerlink" title="2.文档"></a>2.文档</h2><p>官方文档，建议阅读一下，也可以跳过，先按照步骤配置部署，后续再看</p><blockquote><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Overview.html">https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Overview.html</a></p></blockquote><h1 id="二、Java代码"><a href="#二、Java代码" class="headerlink" title="二、Java代码"></a>二、Java代码</h1><h2 id="1-初始代码"><a href="#1-初始代码" class="headerlink" title="1.初始代码"></a>1.初始代码</h2><p>官方提供非常方便的初始化代码。clone到本地，打开</p><blockquote><p><a href="https://github.com/binarywang/weixin-java-mp-demo">https://github.com/binarywang/weixin-java-mp-demo</a></p></blockquote><h2 id="2-修改代码"><a href="#2-修改代码" class="headerlink" title="2.修改代码"></a>2.修改代码</h2><h3 id="2-1-文件准备"><a href="#2-1-文件准备" class="headerlink" title="2.1.文件准备"></a>2.1.文件准备</h3><ul><li>复制application.yml.template模板文件，粘贴为application.yml<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE(%E4%B8%AA%E4%BA%BA%E8%AE%A2%E9%98%85%E5%8F%B7)/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%B2%98%E8%B4%B4%E4%BF%AE%E6%94%B9.jpg" alt="配置文件粘贴修改.jpg"></li></ul><h3 id="2-2-登录公众号官网"><a href="#2-2-登录公众号官网" class="headerlink" title="2.2.登录公众号官网"></a>2.2.登录公众号官网</h3><ul><li>查看帐号appId，secret，token，aesKey(测试帐号无)<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE(%E4%B8%AA%E4%BA%BA%E8%AE%A2%E9%98%85%E5%8F%B7)/%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE%E6%9F%A5%E7%9C%8B.png" alt="密钥配置查看.png"></li></ul><blockquote><p>测试帐号是没有aesKey，不需要配置可以空，token可以自定义，测试为明文易于开发</p></blockquote><h3 id="2-3-修改application-yml"><a href="#2-3-修改application-yml" class="headerlink" title="2.3.修改application.yml"></a>2.3.修改application.yml</h3><ul><li>将官网配置填入<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE(%E4%B8%AA%E4%BA%BA%E8%AE%A2%E9%98%85%E5%8F%B7)/%E5%A1%AB%E5%86%99%E5%85%AC%E4%BC%97%E5%8F%B7%E9%85%8D%E7%BD%AE1.png" alt="填写公众号配置1.png"></li></ul><h3 id="2-4-自定义服务端口"><a href="#2-4-自定义服务端口" class="headerlink" title="2.4.自定义服务端口"></a>2.4.自定义服务端口</h3><ul><li>因为默认启动端口是8080，部署的时候可能被占用，所以可以提前修改<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-string">xxxx</span> <span class="hljs-comment"># 填你的端口号</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2-5-新增本地测试接口"><a href="#2-5-新增本地测试接口" class="headerlink" title="2.5 新增本地测试接口"></a>2.5 新增本地测试接口</h3><ul><li>因为部署配置的时候，微信会发送请求来核验服务情况（详情阅读<a href="https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Overview.html">官方文档</a>），自定义接口你可以提前自测服务是否有成功启动。</li></ul><p>可以直接新增到WxPortalController中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(value = &quot;/test&quot;, produces = &quot;text/plain;charset=utf-8&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">authGet</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String appid)</span> &#123;<br>    <span class="hljs-keyword">return</span> appid;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE(%E4%B8%AA%E4%BA%BA%E8%AE%A2%E9%98%85%E5%8F%B7)/%E8%87%AA%E6%B5%8B%E4%BB%A3%E7%A0%811.png" alt="自测代码1.png"></p><blockquote><p>注意这个请求本地访问为 <a href="http://localhost:【port】/wx/portal/{appid}/test">http://localhost:【port】/wx/portal/{appid}/test</a><br>路径中的[produces]这个属性是字符解码防止乱码，而不是路径</p></blockquote><h1 id="三、服务器"><a href="#三、服务器" class="headerlink" title="三、服务器"></a>三、服务器</h1><p>自行准备：</p><ul><li>1.Java运行环境</li></ul><p>需要：</p><ul><li>1.Java项目部署jar包</li><li>2.nginx（开发者测试appid的不需要，正式的微信只支持80端口和443端口）</li></ul><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="1-项目打包"><a href="#1-项目打包" class="headerlink" title="1.项目打包"></a>1.项目打包</h3><ul><li>通过idea中的Maven插件，install项目，在项目中的target中得到，xxxx.jar<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE(%E4%B8%AA%E4%BA%BA%E8%AE%A2%E9%98%85%E5%8F%B7)/%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85.png" alt="项目打包.png"></li></ul><h3 id="2-将xx-jar上传服务器启动"><a href="#2-将xx-jar上传服务器启动" class="headerlink" title="2.将xx.jar上传服务器启动"></a>2.将xx.jar上传服务器启动</h3><ul><li><p>可以通过MobaXterm，xshell，命令等方式，上传到服务器（建议目录&#x2F;usr&#x2F;local&#x2F;xxx下）</p><blockquote><p>命令: java -jar xxx.jar &gt; xxx.file 2&gt;&amp;1 &amp;</p></blockquote></li><li><p>命令执行为jar包启动，日志输出在指定文件下</p></li></ul><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>自行网上查找教程这里不多赘述</li></ul><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><ul><li>找到nginx安装目录下 nginx&#x2F;conf&#x2F;nginx.conf</li></ul><ol><li><p>备份配置文件</p><blockquote><p>cp nginx.conf nginx_bak.conf</p></blockquote></li><li><p>配置Java转发</p><blockquote><p>vi nginx.conf</p></blockquote></li><li><p>配置详情<br>在http-server下面加入。【需要自行修改】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 自行修改【gzh】：这里是转发的路径，比如ip/gzh会转发到proxy_pass中配置的路径</span><br>location /gzh/ &#123;<br>     <span class="hljs-comment"># 截去gzh - 自行修改</span><br>     rewrite ^.+gzh/?(.*)$ /<span class="hljs-variable">$1</span> <span class="hljs-built_in">break</span>;<br>     <span class="hljs-comment"># 自己的项目地址及端口号 - 记得修改</span><br>     proxy_pass  http://127.0.0.1:【port】;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>4.重启nginx</p><blockquote><p>进入目录：cd nginx&#x2F;sbin<br>执行：.&#x2F;nginx -s reload</p></blockquote><h1 id="四-公众号官网配置"><a href="#四-公众号官网配置" class="headerlink" title="四.公众号官网配置"></a>四.公众号官网配置</h1><ul><li>注意：因为配置了nginx转发，如果上方加了【gzh】那么路径为</li></ul><blockquote><p>http:&#x2F;&#x2F;【服务器ip】&#x2F;【gzh或你自定义的】&#x2F;wx&#x2F;portal&#x2F;【填你的AppID】</p></blockquote><p>配置点击完成查看服务器运行日志</p><blockquote><p>cat xxx.file</p></blockquote><p>看到打印了成功接收到微信的消息就没有问题</p><p>补充：持续打印日志</p><blockquote><p>tail -f xxx.file</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信公众号</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring源码解析图(一)</title>
    <link href="/2022/06/09/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%9B%BE(%E4%B8%80)/"/>
    <url>/2022/06/09/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%9B%BE(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<p>之前学习查看Spring源码的记录。回过头看看发现又忘了，哈哈哈，记录一下之前的图片。</p><span id="more"></span><h1 id="1-Spring架构原理图"><a href="#1-Spring架构原理图" class="headerlink" title="1.Spring架构原理图"></a>1.Spring架构原理图</h1><p><img src="/images/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%9B%BE(%E4%B8%80)/Spring%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E5%9B%BE.jpg" alt="Spring架构原理图"></p><h1 id="2-Spring流程图"><a href="#2-Spring流程图" class="headerlink" title="2.Spring流程图"></a>2.Spring流程图</h1><p><img src="/images/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%9B%BE(%E4%B8%80)/Spring%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="Spring流程图"></p><h1 id="3-Bean生命周期流程"><a href="#3-Bean生命周期流程" class="headerlink" title="3.Bean生命周期流程"></a>3.Bean生命周期流程</h1><p><img src="/images/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%9B%BE(%E4%B8%80)/Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%B5%81%E7%A8%8B.jpg" alt="Bean生命周期流程"></p><h1 id="4-bean初始化流程"><a href="#4-bean初始化流程" class="headerlink" title="4.bean初始化流程"></a>4.bean初始化流程</h1><p><img src="/images/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%9B%BE(%E4%B8%80)/bean%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B.jpg" alt="bean初始化流程"></p><h1 id="5-容器刷新流程"><a href="#5-容器刷新流程" class="headerlink" title="5.容器刷新流程"></a>5.容器刷新流程</h1><p><img src="/images/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%9B%BE(%E4%B8%80)/%E5%AE%B9%E5%99%A8%E5%88%B7%E6%96%B0%E6%B5%81%E7%A8%8B.jpg" alt="容器刷新流程"></p><h1 id="6-AOP原理"><a href="#6-AOP原理" class="headerlink" title="6.AOP原理"></a>6.AOP原理</h1><p><img src="/images/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%9B%BE(%E4%B8%80)/AOP%E5%8E%9F%E7%90%86.jpg" alt="AOP原理"></p><h1 id="7-监听器原理"><a href="#7-监听器原理" class="headerlink" title="7.监听器原理"></a>7.监听器原理</h1><p><img src="/images/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%9B%BE(%E4%B8%80)/%E7%9B%91%E5%90%AC%E5%99%A8%E5%8E%9F%E7%90%86.jpg" alt="监听器原理"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python-PySide6学习使用</title>
    <link href="/2022/06/08/Python-PySide6%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/06/08/Python-PySide6%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>python图形界面的开发使用，还不太会。<br>最近的python学习到这里结束了，之后有时间在研究一下吧。</p><span id="more"></span><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul><li>1.安装PySide6</li><li>2.打开图形化界面。【见下图】先点击进入pyside6的源码位置，找到exe文件</li><li>3.生成代码 PySide6-uic 【demo.ui】 o 【ui_demo.py】</li></ul><p><img src="/images/python-pyside6%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/%E4%BB%A3%E7%A0%81%E5%9B%BE%E7%89%87.jpg" alt="代码图片"><br><img src="/images/python-pyside6%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/%E5%B7%A5%E5%85%B7exe.png" alt="工具exe位置"></p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>1.目前测试代码会卡死。【应该是没有自定义信号？】</p><p><img src="/images/python-pyside6%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/%E7%9F%A5%E8%AF%86.png" alt="工具exe位置"></p><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><blockquote><pre><code class="hljs"># ------------- 使用 -------------# self.ui.___ACTION___triggered.connect(___FUNCTION___)# self.ui.___BUTTON___clicked.connect___FUNCTION___)# self.ui.___COMBO_BOX___.currentIndexChanged.connect(___FUNCTION___)# self.ui.___SPIN_BOX___.valueChanged.connect(___FUNCTION___)# #自定义信号.属性名.connect(_FUNCTION___)# -------------------------------</code></pre></blockquote><h1 id="源码-master分支"><a href="#源码-master分支" class="headerlink" title="源码 - master分支"></a>源码 - master分支</h1><p><a href="https://github.com/nullaman/python_studay">https://github.com/nullaman/python_studay</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python图形界面</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python-YOLO学习使用</title>
    <link href="/2022/06/08/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/06/08/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>YOLO系列的学习。智商和知识有限，带专的我目前处在了解和使用的阶段。</p><p>牢记：卷积神经网络，不要当成一个算法，当成一个方法，提取特征的方法！</p><span id="more"></span><h1 id="相关的知识"><a href="#相关的知识" class="headerlink" title="相关的知识"></a>相关的知识</h1><h2 id="学习中相关知识盲区记录"><a href="#学习中相关知识盲区记录" class="headerlink" title="学习中相关知识盲区记录"></a>学习中相关知识盲区记录</h2><blockquote><p>牢记：卷积神经网络，不要当成一个算法，当成一个方法，提取特征的方法！</p></blockquote><h3 id="1-基础"><a href="#1-基础" class="headerlink" title="1.基础"></a>1.基础</h3><ul><li>召回率（查重率）</li><li>precision 准度 &#x3D; TP &#x2F; (TP+FP)</li><li>true positives 正确的判定</li><li>false positives 错误的判定为正例</li><li>Recall 召回 &#x3D; TP&#x2F;(TP+FN)</li><li>FN  false negatives，正类判定为负类，“去真”,<br>例如：<br>已知：100总人数，男80，女20<br>目标：找到所有女<br>结果：从中选了50人，其中20女，30男</li></ul><blockquote><p>TP:20，FP:30，FN:0（女生全部找出来了，没有女生被当做男生）<br>true negatives：负类判断为负类，也就是一个男生被当成男生<br>TN:50</p></blockquote><p><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/%E7%9F%A5%E8%AF%86%E7%9B%B2%E5%8C%BA1.png" alt="图片加载"></p><h3 id="2-全连接、卷积、感受野"><a href="#2-全连接、卷积、感受野" class="headerlink" title="2.全连接、卷积、感受野"></a>2.全连接、卷积、感受野</h3><ul><li>全连接层(Fully Connected Layer)</li></ul><p>是早期构建卷积神经网络的主要结构，位于卷积神经发网络的末尾，全连接层的每一个节点都与前层的节点全部互连，整合前层网络提取的特征，并把这些特征映射到样本标记空间。全连接层对前层输出的特征进行加权求和，并把结果输入到激活函数，最终完成目标的分类。</p><ul><li><p><a href="https://towardsdatascience.com/convolutional-neural-network-17fb77e76c05">卷积层(CONV)</a></p></li><li><p>感受野</p></li></ul><p>用来表示网络内部的不同位置的神经元对原图像的感受范围的大小。神经元之所以无法对原始图像的所有信息进行感知，是因为在这些网络结构中普遍使用卷积层和pooling层，在层与层之间均为局部相连（通过sliding filter）。神经元感受野的值越大表示其能接触到的原始图像范围就越大，也意味着他可能蕴含更为全局、语义层次更高的特征；而值越小则表示其所包含的特征越趋向于局部和细节。因此感受野的值可以大致用来判断每一层的抽象层次。</p><blockquote><p>卷积取的是局部特征，全连接就是把以前的局部特征重新通过权值矩阵组装成完整的图。因为用到了所有的局部特征，所以叫全连接。</p></blockquote><h3 id="3-损失函数"><a href="#3-损失函数" class="headerlink" title="3.损失函数"></a>3.损失函数</h3><p><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0.png" alt="图片加载"></p><h3 id="3-知识图片补充记录"><a href="#3-知识图片补充记录" class="headerlink" title="3.知识图片补充记录"></a>3.知识图片补充记录</h3><p><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/%E6%AF%8F%E4%B8%AA%E5%90%AB%E4%B9%89.png" alt="图片加载"><br><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84.png" alt="图片加载"><br><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/%E6%A0%B8%E5%BF%83%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84.png" alt="图片加载"></p><h3 id="4-深度残差网络？-论文"><a href="#4-深度残差网络？-论文" class="headerlink" title="4.深度残差网络？-论文"></a>4.深度残差网络？-论文</h3><p><a href="https://arxiv.org/pdf/1512.03385.pdf">？深度残差网络-论文</a></p><h1 id="YOLO学习使用"><a href="#YOLO学习使用" class="headerlink" title="YOLO学习使用"></a>YOLO学习使用</h1><h2 id="官方YOLOv5介绍"><a href="#官方YOLOv5介绍" class="headerlink" title="官方YOLOv5介绍"></a>官方YOLOv5介绍</h2><blockquote><p>YOLOv5🚀是在 COCO 数据集上预训练的一系列对象检测架构和模型，代表Ultralytics 对未来视觉 AI 方法的开源研究，结合了经过数千小时的研究和开发的经验教训和最佳实践。</p></blockquote><h2 id="项目结构介绍"><a href="#项目结构介绍" class="headerlink" title="项目结构介绍"></a>项目结构介绍</h2><p><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/my-yolo5%E7%9B%AE%E5%BD%95%E8%AF%B4%E6%98%8E.png" alt="图片加载"></p><ul><li>自己新建的项目<ul><li>自己数据集<ul><li>train 训练集 训练数量偏多<ul><li>images 训练图片存放</li><li>labels 对应图片的labels数据</li></ul></li><li>valid 验证集 一般比训练图片少<ul><li>images 验证图片存放</li><li>labels 对应验证图片的labels数据</li></ul></li><li>data.yaml 配置文件 : 主要配置自己的训练集和验证集 以及分类。见下图【mytest-data-yaml】</li></ul></li><li>官方<a href="https://github.com/ultralytics/yolov5">下载</a>的yolov5代码<ul><li>data 存放自带的一些数据图片，还有coco数据集配置。注：coco数据集需要自行下载，非常大。见下图【yolo5-data】</li><li>models 存放网络模型架构yaml配置文件。见下图【yolo5-models】</li><li>runs 运行日志。见下图【yolo5-runs】<ul><li>detect 执行检测的输出结果</li><li>train 训练效果，训练日志输出<ul><li>weights 训练的成果中有best.pt还有最后一次last.pt，可以配置预加载继续训练</li></ul></li></ul></li><li>utils 主要方法。见下图【yolo5-utils&amp;weights】</li><li>weights 一般存放一些预加载网络模型。见下图【yolo5-utils&amp;weights】</li><li>detect.py 要执行的方法 【详细见下】</li><li>train.py 要执行的方法 【详细见下】</li></ul></li></ul></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>1.根据上方创建自己项目目录</li><li>2.修改配置文件</li><li>3.训练train.py，检测detect.py</li></ul><h2 id="train-py和detect-py"><a href="#train-py和detect-py" class="headerlink" title="train.py和detect.py"></a>train.py和detect.py</h2><blockquote><p>train.py配置训练自己的网络模型<br><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/train%E4%BB%A3%E7%A0%81.jpg" alt="mytest-data-yaml.jpg"></p></blockquote><blockquote><p>detect.py执行检测<br><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/detect%E4%BB%A3%E7%A0%81.png" alt="mytest-data-yaml.jpg"></p></blockquote><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>图片【mytest-data-yaml】<br><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/mytest-data-yaml.jpg" alt="mytest-data-yaml"></p><p>图片【yolo5-data.png】<br><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/yolo5-data.png" alt="yolo5-data.png"></p><p>图片【yolo5-models.png】<br><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/yolo5-models.png" alt="yolo5-models.png"></p><p>图片【yolo5-runs.png】<br><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/yolo5-runs.png" alt="yolo5-runs.png"></p><p>图片【yolo5-utils&amp;weights.png】<br><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/yolo5-utils&weights.png" alt="yolo5-utils&amp;weights.png"></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>卷积神经网络CNN</tag>
      
      <tag>yolo</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习python基础/爬虫等</title>
    <link href="/2022/06/08/%E5%AD%A6%E4%B9%A0python%E5%9F%BA%E7%A1%80%E7%AD%89/"/>
    <url>/2022/06/08/%E5%AD%A6%E4%B9%A0python%E5%9F%BA%E7%A1%80%E7%AD%89/</url>
    
    <content type="html"><![CDATA[<p>学习了感兴趣的一些东西，python基础，爬虫基础等，还写了个小玩意爬dy直播间的实时评论，存在自己数据库。<br>因为有一段时间了，就记录一下。</p><span id="more"></span><h1 id="源码-master分支"><a href="#源码-master分支" class="headerlink" title="源码 - master分支"></a>源码 - master分支</h1><p><a href="https://github.com/nullaman/python_studay">https://github.com/nullaman/python_studay</a></p><h1 id="学习目录-持续更新"><a href="#学习目录-持续更新" class="headerlink" title="学习目录 - 持续更新"></a>学习目录 - 持续更新</h1><h3 id="demo1-demo3"><a href="#demo1-demo3" class="headerlink" title="demo1-demo3"></a>demo1-demo3</h3><p>python基础</p><h3 id="demo1"><a href="#demo1" class="headerlink" title="demo1"></a>demo1</h3><p>requests入门等<br>第二章 : re，bs4，xpath使用<br>第三章 : cookie，网易云评论抓取<br>第四章 : 多线程，协程，线程池，异步，aiohttp，aiofile<br>第五章 : selenium，无头浏览器，超级鹰<br>mytest : dy直播接聊天评论抓取，写入数据库</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>come back ~ 冲冲冲！！！</title>
    <link href="/2022/06/08/come-back/"/>
    <url>/2022/06/08/come-back/</url>
    
    <content type="html"><![CDATA[<p>我又回来啦！之前博客github忘记备份，电脑重置了，搁置了一年半载，重新部署搞了一个博客，加油！！！！</p>]]></content>
    
    
    <categories>
      
      <category>加油</category>
      
    </categories>
    
    
    <tags>
      
      <tag>加油</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原型模式-Java设计模式(六)</title>
    <link href="/2019/12/11/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%85%AD)/"/>
    <url>/2019/12/11/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%85%AD)/</url>
    
    <content type="html"><![CDATA[<p>原型模式-Java设计模式(六)</p><span id="more"></span><h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><blockquote><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><blockquote><p>在运行期建立和删除原型<br>(个人理解：消息模块的消息记录对象，除了接收人不同，其他字段均相等，可使用，无需频繁new对象)</p></blockquote><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><blockquote><p>优点： 1、性能提高。 2、逃避构造函数的约束。<br>缺点： 1、配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。 2、必须实现 Cloneable 接口。</p></blockquote><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><blockquote><p>1、当一个系统应该独立于它的产品创建，构成和表示时。<br>2、当要实例化的类是在运行时刻指定时，例如，通过动态装载。<br>3、为了避免创建一个与产品类层次平行的工厂类层次时。<br>4、当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。</p></blockquote><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><blockquote><p>继承 Cloneable，重写 clone()</p></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote><p>与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。<br>浅拷贝实现 Cloneable，重写，<br>深拷贝是通过实现 Serializable 读取二进制流。</p></blockquote><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="简历类"><a href="#简历类" class="headerlink" title="简历类"></a>简历类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 简历类 - 实现Cloneable,重写clone()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Resume</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String date;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String content;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDate</span><span class="hljs-params">(String date)</span> &#123;<br>        <span class="hljs-built_in">this</span>.date = date;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContent</span><span class="hljs-params">(String content)</span> &#123;<br>        <span class="hljs-built_in">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Resume</span> <span class="hljs-variable">resume</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            resume = (Resume) <span class="hljs-built_in">super</span>.clone();<br>        &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> resume;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;，在【&quot;</span> + <span class="hljs-built_in">this</span>.getDate() + <span class="hljs-string">&quot;】在【&quot;</span> + <span class="hljs-built_in">this</span>.getContent() + <span class="hljs-string">&quot;】干活。&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 引用方式 和 clone()对比</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Resume</span> <span class="hljs-variable">resume</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Resume</span>();<br>        resume.setDate(LocalDate.now().minusMonths(<span class="hljs-number">1</span>).toString());<br>        resume.setName(<span class="hljs-string">&quot;aman&quot;</span>);<br>        resume.setContent(<span class="hljs-number">999</span> + <span class="hljs-string">&quot;企业&quot;</span>);<br>        System.out.println(resume);<br><br>        <span class="hljs-type">Resume</span> <span class="hljs-variable">AAA</span> <span class="hljs-operator">=</span> resume;<br>        System.out.println(<span class="hljs-string">&quot;===========【 1 】============&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;resume:|||&quot;</span> + resume);<br>        System.out.println(<span class="hljs-string">&quot;AAA:   |||&quot;</span> + AAA);<br><br>        System.out.println(<span class="hljs-string">&quot;===========【 2 】============&quot;</span>);<br>        <span class="hljs-comment">// ！！！更改任意一个，都会改变 ！！！</span><br>        <span class="hljs-comment">//Resume.setContent(&quot;????????&quot;);</span><br>        AAA.setContent(<span class="hljs-string">&quot;????????&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;resume:|||&quot;</span> + resume);<br>        System.out.println(<span class="hljs-string">&quot;AAA:   |||&quot;</span> + AAA);<br><br>        System.out.println(<span class="hljs-string">&quot;===========【 3 】============&quot;</span>);<br>        <span class="hljs-type">Resume</span> <span class="hljs-variable">clone</span> <span class="hljs-operator">=</span> (Resume) resume.clone();<br>        System.out.println(<span class="hljs-string">&quot;resume:|||&quot;</span> + resume);<br>        System.out.println(<span class="hljs-string">&quot;AAA:   |||&quot;</span> + AAA);<br>        System.out.println(<span class="hljs-string">&quot;clone: |||&quot;</span> + clone);<br><br>        System.out.println(<span class="hljs-string">&quot;===========【 4 】============&quot;</span>);<br>        clone.setContent(<span class="hljs-string">&quot;clone嘻嘻嘻嘻&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;resume:|||&quot;</span> + resume);<br>        System.out.println(<span class="hljs-string">&quot;AAA:   |||&quot;</span> + AAA);<br>        System.out.println(<span class="hljs-string">&quot;clone: |||&quot;</span> + clone);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%85%AD)/test1.png" alt="图片加载"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 克隆多个</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Resume</span> <span class="hljs-variable">resume</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Resume</span>();<br>        resume.setDate(LocalDate.now().minusMonths(<span class="hljs-number">1</span>).toString());<br>        resume.setName(<span class="hljs-string">&quot;aman&quot;</span>);<br>        resume.setContent(<span class="hljs-number">999</span> + <span class="hljs-string">&quot;企业&quot;</span>);<br>        System.out.println(resume);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">10</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;=======================&quot;</span>);<br>            i++;<br>            resume.clone();<br>            resume.setContent(String.valueOf(i));<br>            System.out.println(resume);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/images/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%85%AD)/test2.png" alt="图片加载"></p><h2 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h2><p><img src="/images/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%85%AD)/UML1.png" alt="图片加载"><br><img src="/images/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%85%AD)/UML2.png" alt="图片加载"></p><h1 id="源码-prototype分支"><a href="#源码-prototype分支" class="headerlink" title="源码 - prototype分支"></a>源码 - prototype分支</h1><blockquote><p>不同分支对应不同设计模式源码<br><a href="https://github.com/nullaman/JavaDesignMode">https://github.com/nullaman/JavaDesignMode</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java设计模式</tag>
      
      <tag>原型模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工厂方法模式-Java设计模式(六)</title>
    <link href="/2019/12/10/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%85%AD)/"/>
    <url>/2019/12/10/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%85%AD)/</url>
    
    <content type="html"><![CDATA[<p>方法工厂模式-Java设计模式(六)</p><span id="more"></span><h1 id="方法工厂模式"><a href="#方法工厂模式" class="headerlink" title="方法工厂模式"></a>方法工厂模式</h1><blockquote><p>定义一个创建对象的接口，让子类决定实例化哪一个类。<br>工厂方法使一个类的实例化延迟到其子类。</p></blockquote><h2 id="与简单工厂的区别"><a href="#与简单工厂的区别" class="headerlink" title="与简单工厂的区别"></a>与简单工厂的区别</h2><blockquote><p>简单工厂最大的有点就在于工厂类中包含了必要的逻辑判断，根据客户端的选择条件动态实例化相关的类，对于客户端来说，去除了与具体产品的依赖。</p></blockquote><h2 id="实现说明"><a href="#实现说明" class="headerlink" title="实现说明"></a>实现说明</h2><blockquote><p>工厂方法模式实现时，客户端需要决定实例化哪一个工厂来实现运算类，选择判断的问题还是存在的，<br>也就是说，工厂方法把简单工厂内部逻辑判断移动到了客户端代码来进行。<br>你想要加功能，本来是改工厂类的，而现在是修改客户端。</p></blockquote><h1 id="代码-amp-UML结构图"><a href="#代码-amp-UML结构图" class="headerlink" title="代码 &amp; UML结构图"></a>代码 &amp; UML结构图</h1><p>学雷锋的例子~</p><h2 id="【工厂接口】"><a href="#【工厂接口】" class="headerlink" title="【工厂接口】"></a>【工厂接口】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 工厂接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IFactory</span> &#123;<br><br>    LeiFeng <span class="hljs-title function_">createLeiFeng</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="【雷锋】类"><a href="#【雷锋】类" class="headerlink" title="【雷锋】类"></a>【雷锋】类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 雷锋类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LeiFeng</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSweep</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;扫地&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doWash</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;洗衣&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doRice</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;做饭&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="【大学生】-学雷锋"><a href="#【大学生】-学雷锋" class="headerlink" title="【大学生】-学雷锋"></a>【大学生】-学雷锋</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 大学生学雷锋 - 继承工厂接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Undergraduate</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IFactory</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> LeiFeng <span class="hljs-title function_">createLeiFeng</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LeiFeng</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="【志愿者】-学雷锋"><a href="#【志愿者】-学雷锋" class="headerlink" title="【志愿者】-学雷锋"></a>【志愿者】-学雷锋</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 志愿者学雷锋 - 继承工厂接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Volunteer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IFactory</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> LeiFeng <span class="hljs-title function_">createLeiFeng</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LeiFeng</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">IFactory</span> <span class="hljs-variable">volunteer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Volunteer</span>();<br>        <span class="hljs-type">LeiFeng</span> <span class="hljs-variable">heiHei</span> <span class="hljs-operator">=</span> volunteer.createLeiFeng();<br>        System.out.println(<span class="hljs-string">&quot;志愿者学雷锋&quot;</span>);<br>        heiHei.doRice();<br>        heiHei.doSweep();<br>        heiHei.doWash();<br><br>        System.out.println(<span class="hljs-string">&quot;---------分割线----------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;大学生学雷锋&quot;</span>);<br>        <span class="hljs-type">IFactory</span> <span class="hljs-variable">undergraduate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Undergraduate</span>();<br>        <span class="hljs-type">LeiFeng</span> <span class="hljs-variable">xiaoMing</span> <span class="hljs-operator">=</span> undergraduate.createLeiFeng();<br>        xiaoMing.doRice();<br>        xiaoMing.doSweep();<br>        xiaoMing.doWash();<br><br>        <span class="hljs-type">LeiFeng</span> <span class="hljs-variable">hongHong</span> <span class="hljs-operator">=</span> undergraduate.createLeiFeng();<br>        hongHong.doRice();<br>        hongHong.doSweep();<br>        hongHong.doWash();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h2><p><img src="/images/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%85%AD)/%E6%96%B9%E6%B3%95%E5%B7%A5%E5%8E%82UML1.png" alt="图片加载"><br><img src="/images/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%85%AD)/%E6%96%B9%E6%B3%95%E5%B7%A5%E5%8E%82UML2.png" alt="图片加载"></p><h1 id="源码-methodFactory分支"><a href="#源码-methodFactory分支" class="headerlink" title="源码 - methodFactory分支"></a>源码 - methodFactory分支</h1><blockquote><p>不同分支对应不同设计模式源码<br><a href="https://github.com/nullaman/JavaDesignMode">https://github.com/nullaman/JavaDesignMode</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java设计模式</tag>
      
      <tag>工厂模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MybatisPlus删除对于Long序列号的坑</title>
    <link href="/2019/12/09/MybatisPlus%E5%88%A0%E9%99%A4%E5%AF%B9%E4%BA%8ELong%E5%BA%8F%E5%88%97%E5%8F%B7%E7%9A%84%E5%9D%91/"/>
    <url>/2019/12/09/MybatisPlus%E5%88%A0%E9%99%A4%E5%AF%B9%E4%BA%8ELong%E5%BA%8F%E5%88%97%E5%8F%B7%E7%9A%84%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<p>今天得到反馈bug：班级excel批量导入之后，删除一个班级会导致班级批量删除…</p><span id="more"></span><h1 id="有问题的代码"><a href="#有问题的代码" class="headerlink" title="有问题的代码"></a>有问题的代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(value = &quot;删除单个班级数据&quot;)</span><br><span class="hljs-meta">@LyraLog(&quot;删除班级&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">deleteClassById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>    <span class="hljs-keyword">if</span> (schoolClassService.removeById(id)) &#123;<br>        <span class="hljs-keyword">return</span> R.ok(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> R.failed(<span class="hljs-string">&quot;删除失败&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>看到这段代码发现问题不止批量删除一个 emmmmm ，连数据判断都没…<br>然后我前后端都加了日志输出，加了个判断。排查问题。</p><h2 id="2-0"><a href="#2-0" class="headerlink" title="2.0"></a>2.0</h2><p>写的时候发现一点问题：Long？行吧，那就Long把<br><img src="/images/MybatisPlus%E5%88%A0%E9%99%A4%E5%AF%B9%E4%BA%8ELong%E5%BA%8F%E5%88%97%E5%8F%B7%E7%9A%84%E5%9D%91/Str%E5%88%A4%E6%96%ADLong.png" alt="图片加载失败"><br>最后写成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(value = &quot;删除单个班级数据&quot;)</span><br><span class="hljs-meta">@LyraLog(&quot;删除班级&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">deleteClassById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 删除id : &#123;&#125; &quot;</span>, id);<br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(id.toString())) &#123;<br>        <span class="hljs-keyword">return</span> R.ok(<span class="hljs-string">&quot;删除失败，数据异常。&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (schoolClassService.removeById(id)) &#123;<br>        <span class="hljs-keyword">return</span> R.ok(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> R.failed(<span class="hljs-string">&quot;删除失败&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h1><blockquote><p>1.导入数据！主键唯一，没有问题</p></blockquote><blockquote><p>2.前后端接收到的id对应上了，没有问题！<br>查看sql，吓一跳，删除了三条？？？</p></blockquote><p><img src="/images/MybatisPlus%E5%88%A0%E9%99%A4%E5%AF%B9%E4%BA%8ELong%E5%BA%8F%E5%88%97%E5%8F%B7%E7%9A%84%E5%9D%91/sql.png" alt="图片加载"></p><blockquote><p>3.数据库查询该id<br><img src="/images/MybatisPlus%E5%88%A0%E9%99%A4%E5%AF%B9%E4%BA%8ELong%E5%BA%8F%E5%88%97%E5%8F%B7%E7%9A%84%E5%9D%91/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%A0%E9%99%A4%E5%89%8D.png" alt="图片加载"></p></blockquote><p>我发现导入数据中的id确实只有一个啊，但是我看到导入数据的id有三条比较近。<br><img src="/images/MybatisPlus%E5%88%A0%E9%99%A4%E5%AF%B9%E4%BA%8ELong%E5%BA%8F%E5%88%97%E5%8F%B7%E7%9A%84%E5%9D%91/%E5%88%A0%E9%99%A4%E7%9A%84%E4%B8%89%E6%9D%A1.png" alt="图片加载"><br>该不会就是这三条被删了把？我刷新数据库。</p><p><img src="/images/MybatisPlus%E5%88%A0%E9%99%A4%E5%AF%B9%E4%BA%8ELong%E5%BA%8F%E5%88%97%E5%8F%B7%E7%9A%84%E5%9D%91/%E5%88%A0%E9%99%A4%E5%90%8E%E7%9A%84.png" alt="图片加载"><br><img src="/images/MybatisPlus%E5%88%A0%E9%99%A4%E5%AF%B9%E4%BA%8ELong%E5%BA%8F%E5%88%97%E5%8F%B7%E7%9A%84%E5%9D%91/%E6%88%91%E5%A4%AA%E9%9A%BE%E4%BA%86.jpg" alt="图片加载"></p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><blockquote><p>把Long改为String即可。这应该算是MybatisPlus的bug？？？</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发中的坑</tag>
      
      <tag>Long序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代理模式-Java设计模式(五)</title>
    <link href="/2019/12/05/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BA%94)/"/>
    <url>/2019/12/05/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BA%94)/</url>
    
    <content type="html"><![CDATA[<p>代理模式-Java设计模式(五)</p><span id="more"></span><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><blockquote><p>为其他对象提供一种代理以控制对这个对象的访问</p></blockquote><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><blockquote><p>想在访问一个类时做一些控制。</p></blockquote><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><blockquote><p>增加中间层。</p></blockquote><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><blockquote><p>实现与被代理类组合。</p></blockquote><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><blockquote><p>优点：1、职责清晰。 2、高扩展性。 3、智能化。<br>缺点：1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外</p></blockquote><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><blockquote><p>按职责来划分，通常有以下使用场景： 1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protect or Access）代理。 5、Cache代理。 6、防火墙（Firewall）代理。 7、同步化（Synchronization）代理。 8、智能引用（Smart Reference）代理。</p></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote><p>1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。<br>2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</p></blockquote><h1 id="代码-amp-结构图"><a href="#代码-amp-结构图" class="headerlink" title="代码 &amp; 结构图"></a>代码 &amp; 结构图</h1><p>小明想托我帮他送礼物给女神。</p><h2 id="【送礼物】接口"><a href="#【送礼物】接口" class="headerlink" title="【送礼物】接口"></a>【送礼物】接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 送礼物接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Gifts</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 送花</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">flower</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 送巧克力</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">chocolate</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="【女神类】"><a href="#【女神类】" class="headerlink" title="【女神类】"></a>【女神类】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 女神</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Girl</span> &#123;<br>    <span class="hljs-comment">// 名称</span><br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="【小明类】"><a href="#【小明类】" class="headerlink" title="【小明类】"></a>【小明类】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 小明想送礼物给 女神</span><br><span class="hljs-comment"> * 实现了送礼物接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XiaoMing</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Gifts</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Girl girl;<br><br>    XiaoMing(Girl girl) &#123;<br>        <span class="hljs-built_in">this</span>.girl = girl;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flower</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(girl.getName() + <span class="hljs-string">&quot;，送你花花~&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">chocolate</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(girl.getName() + <span class="hljs-string">&quot;，送你巧克力~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="【代理类】相当于我"><a href="#【代理类】相当于我" class="headerlink" title="【代理类】相当于我"></a>【代理类】相当于我</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 代理类，相当于我，帮小明送</span><br><span class="hljs-comment"> * 实现了送礼物接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Gifts</span> &#123;<br><br>    <span class="hljs-keyword">private</span> XiaoMing xiaoMing;<br><br>    <span class="hljs-comment">// ！！！注意！！！new小明，带入女神</span><br>    Proxy(Girl girl) &#123;<br>        <span class="hljs-built_in">this</span>.xiaoMing = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XiaoMing</span>(girl);<br>    &#125;<br><br>    <span class="hljs-comment">// 调用小明送礼物方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flower</span><span class="hljs-params">()</span> &#123;<br>        xiaoMing.flower();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">chocolate</span><span class="hljs-params">()</span> &#123;<br>        xiaoMing.chocolate();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Girl</span> <span class="hljs-variable">girl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Girl</span>();<br>        girl.setName(<span class="hljs-string">&quot;红红&quot;</span>);<br><br>        <span class="hljs-type">Proxy</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(girl);<br><br>        proxy.flower(); <span class="hljs-comment">// 红红，送你花花~</span><br>        <br>        proxy.chocolate(); <span class="hljs-comment">// 红红，送你巧克力~</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h2><p><img src="/images/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BA%94)/UML1.png" alt="图片加载"><br><img src="/images/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BA%94)/UML2.png" alt="图片加载"></p><h1 id="源码-proxy分支"><a href="#源码-proxy分支" class="headerlink" title="源码 - proxy分支"></a>源码 - proxy分支</h1><blockquote><p>不同分支对应不同设计模式源码<br><a href="https://github.com/nullaman/JavaDesignMode">https://github.com/nullaman/JavaDesignMode</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java设计模式</tag>
      
      <tag>代理模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zxing下载二维码</title>
    <link href="/2019/12/05/zxing%E4%B8%8B%E8%BD%BD%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    <url>/2019/12/05/zxing%E4%B8%8B%E8%BD%BD%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>今天改需求看到之前写的zxing二维码，记录一下。</p><span id="more"></span><h1 id="Maven仓库"><a href="#Maven仓库" class="headerlink" title="Maven仓库"></a>Maven仓库</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.zxing<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.zxing<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javase<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="简单下载单张"><a href="#简单下载单张" class="headerlink" title="简单下载单张"></a>简单下载单张</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 下载二维码</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> roomId 二维码中存放的的数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/code/download/&#123;roomId&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;二维码下载&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">downloadCode</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String roomId, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">if</span> (roomId == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// ---------加密内容------------</span><br>    <span class="hljs-comment">// log.info(&quot;------------&gt;要加密的数据roomId:&#123;&#125;&quot;, roomId);</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(roomId.toString().getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>    <span class="hljs-keyword">if</span> (content != <span class="hljs-literal">null</span> &amp;&amp; !<span class="hljs-string">&quot;&quot;</span>.equals(content)) &#123;<br>        <span class="hljs-comment">// ----------二维码设置----------</span><br>        <span class="hljs-comment">// 图像宽度</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">width</span> <span class="hljs-operator">=</span> <span class="hljs-number">300</span>;<br>        <span class="hljs-comment">// 图像高度</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> <span class="hljs-number">300</span>;<br>        <span class="hljs-comment">// 图像类型</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;png&quot;</span>;<br>        Map&lt;EncodeHintType, Object&gt; hints = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;EncodeHintType, Object&gt;(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">// 编码格式</span><br>        hints.put(EncodeHintType.CHARACTER_SET, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        <span class="hljs-comment">// 设置容错等级</span><br>        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.M);<br>        <span class="hljs-comment">// 设置边距默认是5</span><br>        hints.put(EncodeHintType.MARGIN, <span class="hljs-number">2</span>);<br>        <span class="hljs-type">BitMatrix</span> <span class="hljs-variable">bitMatrix</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            bitMatrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QRCodeWriter</span>().encode(content, BarcodeFormat.QR_CODE, width, height, hints);<br>            <span class="hljs-type">BufferedImage</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> MatrixToImageWriter.toBufferedImage(bitMatrix);<br>            <span class="hljs-comment">// 二维码图片转化成字节数组</span><br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">write</span> <span class="hljs-operator">=</span> ImageIO.write(image, format, out);<br>            inputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(out.toByteArray());<br>            outputStream = response.getOutputStream();<br>            response.reset();<br>            <span class="hljs-comment">// 设置文件头编码方式和文件名</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> LocalDate.now().toString();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;二维码&quot;</span> + date + <span class="hljs-string">&quot;.png&quot;</span>;<br>            response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            <span class="hljs-comment">// 如果是IE,通过URLEncoder对filename进行UTF8编码。而其他的浏览器（firefox、chrome、safari、opera），则要通过字节转换成ISO8859-1。</span><br>            <span class="hljs-keyword">if</span> (request.getHeader(<span class="hljs-string">&quot;User-Agent&quot;</span>).toUpperCase().indexOf(<span class="hljs-string">&quot;MSIE&quot;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>                fileName = URLEncoder.encode(fileName, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                fileName = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(fileName.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>), <span class="hljs-string">&quot;ISO8859-1&quot;</span>);<br>            &#125;<br>            response.setContentType(<span class="hljs-string">&quot;application/octet-stream&quot;</span>);<br>            response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + fileName);<br>            <span class="hljs-type">byte</span>[] bf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> ((len = inputStream.read(bf)) &gt; <span class="hljs-number">0</span>) &#123;<br>                outputStream.write(bf, <span class="hljs-number">0</span>, len);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (WriterException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (outputStream != <span class="hljs-literal">null</span>) &#123;<br>                outputStream.flush();<br>                outputStream.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (inputStream != <span class="hljs-literal">null</span>) &#123;<br>                inputStream.close();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><blockquote><p>一般项目中请求接口需要带token的，下载时如果是直接请求下载接口，需要暴露接口。在配置文件中暴露</p></blockquote><h1 id="下载多个二维码，打包-zip包"><a href="#下载多个二维码，打包-zip包" class="headerlink" title="下载多个二维码，打包.zip包"></a>下载多个二维码，打包.zip包</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取到宿舍dormId --下载二维码zip包</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> dormId 业务查询的楼栋id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/download/&#123;dormId&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;二维码下载&quot;)</span><br><span class="hljs-keyword">public</span> R <span class="hljs-title function_">downloadCode</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String dormId, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    Dormitory dormitory=dormitoryService.getById(dormId);<br>    <span class="hljs-comment">//按宿舍楼id查询所有宿舍</span><br>    List&lt;Room&gt; roomIdList = roomService.getbyDormIdRoomAll(dormId);<br>    <span class="hljs-comment">//按宿舍楼id查询所有床位</span><br>    List&lt;Bunk&gt; bunkList = bunkService.getByDormIdBunkAll(dormId);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> request.getSession().getServletContext().getRealPath(<span class="hljs-string">&quot;/&quot;</span>);<br>    <span class="hljs-comment">//1 生成二维码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> realPath + dormitory.getTowerName();<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br>    <span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>        file.mkdirs();<br>    &#125;<br>    <span class="hljs-comment">///////////////每条线程的数据数量</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">threadSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>    <span class="hljs-comment">// 总数据条数</span><br>    <span class="hljs-type">int</span> dataSize2=bunkList.size();<br>    <span class="hljs-comment">// 线程数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">threadNum</span> <span class="hljs-operator">=</span> dataSize2 / threadSize + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 定义标记,过滤threadNum为整数</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">special</span> <span class="hljs-operator">=</span> dataSize2 % threadSize == <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 创建一个线程池</span><br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(threadNum);<br>    <span class="hljs-comment">// 定义一个任务集合</span><br>    List&lt;Callable&lt;Integer&gt;&gt; tasks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Callable&lt;Integer&gt;&gt;();<br>    Callable&lt;Integer&gt; task = <span class="hljs-literal">null</span>;<br>    List&lt;Bunk&gt; bunkCall = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">///////////////////////</span><br>    <span class="hljs-comment">// 确定每条线程的数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; threadNum; i++) &#123;<br>        <span class="hljs-keyword">if</span> (i == threadNum - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (special) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            bunkCall = bunkList.subList(threadSize * i, dataSize2);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            bunkCall = bunkList.subList(threadSize * i, threadSize * (i + <span class="hljs-number">1</span>));<br>        &#125;<br>        <span class="hljs-keyword">final</span> List&lt;Bunk&gt; bunkListStr = bunkCall;<br>        task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Callable</span>&lt;Integer&gt;() &#123;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                    <span class="hljs-keyword">for</span> (Bunk bunk : bunkListStr) &#123;<br>                        QRCodeUtil.generateQRImage(<br>                                InspectionConstant.inspectionType.DORM_BED.toString() + <span class="hljs-string">&quot;|&quot;</span> + bunk.getId(),<br>                                path + <span class="hljs-string">&quot;/&quot;</span> + bunk.getRoomId() + <span class="hljs-string">&quot;号宿舍&quot;</span> + bunk.getNumber() + <span class="hljs-string">&quot;床位&quot;</span> + <span class="hljs-string">&quot;.jpg&quot;</span>,<br>                                <span class="hljs-literal">null</span>,bunk.getNumber()<br>                        );<span class="hljs-comment">//生成二维码的方法</span><br>                    &#125;<br>                    count++;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">// 这里提交的任务容器列表和返回的Future列表存在顺序对应的关系</span><br>        tasks.add(task);<br>    &#125;<br>        <span class="hljs-comment">//生成二维码</span><br>        QRCodeUtil.generateQRImage(<br>                InspectionConstant.inspectionType.DORM_TOWER.toString() + <span class="hljs-string">&quot;|&quot;</span> + dormId,<br>                path + <span class="hljs-string">&quot;/宿舍楼&quot;</span> + dormitory.getTowerName() + <span class="hljs-string">&quot;.jpg&quot;</span>,<br>                <span class="hljs-literal">null</span>,dormitory.getTowerName());<br>        <span class="hljs-keyword">for</span> (Room x : roomIdList) &#123;<br>            <span class="hljs-comment">//生成二维码的方法</span><br>            QRCodeUtil.generateQRImage(<br>                    InspectionConstant.inspectionType.DORM_ROOM.toString() + <span class="hljs-string">&quot;|&quot;</span> + x.getId(),<br>                    path + <span class="hljs-string">&quot;/宿舍&quot;</span> + x.getNumber() + <span class="hljs-string">&quot;.jpg&quot;</span>,<br>                    <span class="hljs-literal">null</span>,x.getNumber()<br>            );<br>        &#125;<br>        <span class="hljs-comment">//开始执行线程任务</span><br>        List&lt;Future&lt;Integer&gt;&gt; results = exec.invokeAll(tasks);<br><br>    <span class="hljs-comment">// 关闭线程池</span><br>    exec.shutdown();<br>    <span class="hljs-comment">//2 生成zip文件</span><br>    ZipHelper.zipCompress(path, path + <span class="hljs-string">&quot;.zip&quot;</span>);<br>    <span class="hljs-comment">//3 下载</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">zipFileName</span> <span class="hljs-operator">=</span> path + <span class="hljs-string">&quot;.zip&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span>  dormitory.getTowerName()+ <span class="hljs-string">&quot;.zip&quot;</span>;<br>    <span class="hljs-comment">//设置文件MIME类型</span><br>    response.setContentType(<span class="hljs-string">&quot;application/octet-stream&quot;</span>);<br><br>    response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    <span class="hljs-comment">//设置Content-Disposition</span><br>    response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(filename, <span class="hljs-string">&quot;utf-8&quot;</span>));<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(zipFileName);<br>    <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getOutputStream();<br><br>    <span class="hljs-comment">//写文件</span><br>    <span class="hljs-type">int</span> b;<br>    <span class="hljs-keyword">while</span> ((b = in.read()) != -<span class="hljs-number">1</span>) &#123;<br>        out.write(b);<br>    &#125;<br>    out.flush();<br>    <span class="hljs-comment">//4 删除多余文件</span><br>    ZipHelper.deleteDir(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path));<br>    in.close();<span class="hljs-comment">//先关闭输入流才能删除</span><br>    ZipHelper.deleteDir(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(zipFileName));<br>    out.close();<br><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        R.failed(<span class="hljs-string">&quot;下载二维码错误&quot;</span>+e);<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二维码</tag>
      
      <tag>ZXing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>装饰器模式-Java设计模式(四)</title>
    <link href="/2019/12/04/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)/"/>
    <url>/2019/12/04/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)/</url>
    
    <content type="html"><![CDATA[<p>装饰器模式-Java设计模式(四)</p><span id="more"></span><h1 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h1><blockquote><p>为已有的功能，动态地添加更多功能的一种方式。<br>动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。</p></blockquote><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><blockquote><p>当系统中需要新加功能时，是向旧的类中添加新的代码。这些新的代码通常装饰了原有的核心职责或主要行为，在主类中加入新的字段，新的方法和逻辑，从而增加了主类的复杂度，而新的东西仅仅只是为了满足一些特定情况下才会执行的特殊行为需要。<br>ps:例如【LOL英雄&#x2F;技能】【Pubg中枪&#x2F;配件】</p></blockquote><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><blockquote><p>优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。<br>缺点：多层装饰比较复杂。</p></blockquote><hr><hr><h1 id="代码-amp-结构图-LOL"><a href="#代码-amp-结构图-LOL" class="headerlink" title="代码 &amp; 结构图(LOL)"></a>代码 &amp; 结构图(LOL)</h1><h2 id="【英雄】接口"><a href="#【英雄】接口" class="headerlink" title="【英雄】接口"></a>【英雄】接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 英雄接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Hero</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 学习技能</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">learnSkills</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="【具体英雄】类，实现英雄接口"><a href="#【具体英雄】类，实现英雄接口" class="headerlink" title="【具体英雄】类，实现英雄接口"></a>【具体英雄】类，实现英雄接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 具体英雄类，实现英雄接口</span><br><span class="hljs-comment"> * - 亚索</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Yasso</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Hero</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 英雄名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Yasso</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">learnSkills</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot;学习了以上技能。&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="【技能栏】类，实现英雄接口"><a href="#【技能栏】类，实现英雄接口" class="headerlink" title="【技能栏】类，实现英雄接口"></a>【技能栏】类，实现英雄接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 技能栏类，实现英雄接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Skills</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Hero</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Hero hero;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Skills</span><span class="hljs-params">(Hero hero)</span> &#123;<br>        <span class="hljs-built_in">this</span>.hero = hero;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">learnSkills</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (hero != <span class="hljs-literal">null</span>) &#123;<br>            hero.learnSkills();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="【技能】QWER类，继承技能栏类"><a href="#【技能】QWER类，继承技能栏类" class="headerlink" title="【技能】QWER类，继承技能栏类"></a>【技能】QWER类，继承技能栏类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 技能Q ，继承技能栏类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Q</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Skills</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String skillName;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Q</span><span class="hljs-params">(Hero hero, String skillName)</span> &#123;<br>        <span class="hljs-built_in">super</span>(hero);<br>        <span class="hljs-built_in">this</span>.skillName = skillName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">learnSkills</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;学习了技能Q:&quot;</span> + skillName);<br>        <span class="hljs-built_in">super</span>.learnSkills();<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 技能W ，继承技能栏类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">W</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Skills</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String skillName;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">W</span><span class="hljs-params">(Hero hero, String skillName)</span> &#123;<br>        <span class="hljs-built_in">super</span>(hero);<br>        <span class="hljs-built_in">this</span>.skillName = skillName;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">learnSkills</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;学习了技能W:&quot;</span> + skillName);<br>        <span class="hljs-built_in">super</span>.learnSkills();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 技能E ，继承技能栏类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">E</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Skills</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String skillName;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">E</span><span class="hljs-params">(Hero hero, String skillName)</span> &#123;<br>        <span class="hljs-built_in">super</span>(hero);<br>        <span class="hljs-built_in">this</span>.skillName = skillName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">learnSkills</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;学习了技能E:&quot;</span> + skillName);<br>        <span class="hljs-built_in">super</span>.learnSkills();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 技能R ，继承技能栏类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">R</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Skills</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String skillName;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">R</span><span class="hljs-params">(Hero hero, String skillName)</span> &#123;<br>        <span class="hljs-built_in">super</span>(hero);<br>        <span class="hljs-built_in">this</span>.skillName = skillName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">learnSkills</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;学习了技能R:&quot;</span> + skillName);<br>        <span class="hljs-built_in">super</span>.learnSkills();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="【技能】测试"><a href="#【技能】测试" class="headerlink" title="【技能】测试"></a>【技能】测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建叫亚索的英雄</span><br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">yasso</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yasso</span>(<span class="hljs-string">&quot;亚索&quot;</span>);<br><br>        <span class="hljs-type">Skills</span> <span class="hljs-variable">skills</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Skills</span>(yasso);<br>        <br>        <span class="hljs-type">Skills</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Q</span>(skills, <span class="hljs-string">&quot;斩钢闪&quot;</span>);<br>        q.learnSkills();<br>        System.out.println(<span class="hljs-string">&quot;-----1------分割线----------&quot;</span>);<br>        <span class="hljs-type">Skills</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">E</span>(q, <span class="hljs-string">&quot;风盾&quot;</span>);<br>        e.learnSkills();<br>        System.out.println(<span class="hljs-string">&quot;-----2------分割线----------&quot;</span>);<br>        <span class="hljs-type">Skills</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">W</span>(e, <span class="hljs-string">&quot;踏前斩&quot;</span>);<br>        w.learnSkills();<br>        System.out.println(<span class="hljs-string">&quot;-----3------分割线----------&quot;</span>);<br>        <span class="hljs-type">Skills</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>(w, <span class="hljs-string">&quot;狂风绝熄斩&quot;</span>);<br>        r.learnSkills();<br>        System.out.println(<span class="hljs-string">&quot;-----4------分割线----------&quot;</span>);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h2><p><img src="/images/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)/%E4%BA%9A%E7%B4%A2%E8%BE%93%E5%87%BA.png" alt="图片加载"></p><h2 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h2><p><img src="/images/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)/LOL-UML1.png" alt="图片加载"><br><img src="/images/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)/LOL-UML2.png" alt="图片加载"></p><hr><hr><h1 id="代码-amp-结构图-Pubg"><a href="#代码-amp-结构图-Pubg" class="headerlink" title="代码 &amp; 结构图(Pubg)"></a>代码 &amp; 结构图(Pubg)</h1><h2 id="【枪】"><a href="#【枪】" class="headerlink" title="【枪】"></a>【枪】</h2><h3 id="【枪】接口"><a href="#【枪】接口" class="headerlink" title="【枪】接口"></a>【枪】接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 枪接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Gun</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 开火</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">fire</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【具体枪】类，继承枪接口"><a href="#【具体枪】类，继承枪接口" class="headerlink" title="【具体枪】类，继承枪接口"></a>【具体枪】类，继承枪接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * M416类，实现枪接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">M416</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Gun</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fire</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;突突突···开火*30&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="【扩容弹夹】"><a href="#【扩容弹夹】" class="headerlink" title="【扩容弹夹】"></a>【扩容弹夹】</h2><h3 id="【扩容弹夹】抽象类，继承枪接口"><a href="#【扩容弹夹】抽象类，继承枪接口" class="headerlink" title="【扩容弹夹】抽象类，继承枪接口"></a>【扩容弹夹】抽象类，继承枪接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 扩容弹夹抽象类，实现枪接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractMagazine</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Gun</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Gun gun;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AbstractMagazine</span><span class="hljs-params">(Gun gun)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gun = gun;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fire</span><span class="hljs-params">()</span> &#123;<br>        gun.fire();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【扩容弹夹】实现类，继承扩容弹夹抽象类"><a href="#【扩容弹夹】实现类，继承扩容弹夹抽象类" class="headerlink" title="【扩容弹夹】实现类，继承扩容弹夹抽象类"></a>【扩容弹夹】实现类，继承扩容弹夹抽象类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 扩容弹夹实现类，继承扩容弹夹抽象类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Magazine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMagazine</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Magazine</span><span class="hljs-params">(Gun gun)</span> &#123;<br>        <span class="hljs-built_in">super</span>(gun);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fire</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;突突突···开火*40&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【扩容弹夹】测试"><a href="#【扩容弹夹】测试" class="headerlink" title="【扩容弹夹】测试"></a>【扩容弹夹】测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;【获取：M416】&quot;</span>);<br>        <span class="hljs-type">Gun</span> <span class="hljs-variable">m416</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">M416</span>();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;【上弹开火！】&quot;</span>);<br>        m416.fire();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;【获取：扩容弹夹】&quot;</span>);<br>        m416 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Magazine</span>(m416);<br>        m416.fire();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试输出-1"><a href="#测试输出-1" class="headerlink" title="测试输出"></a>测试输出</h3><p><img src="/images/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)/%E6%89%A9%E5%AE%B9%E8%BE%93%E5%87%BA.png" alt="图片加载"></p><hr><h2 id="新增【4倍镜】"><a href="#新增【4倍镜】" class="headerlink" title="新增【4倍镜】"></a>新增【4倍镜】</h2><h3 id="增加需求：【4倍镜】"><a href="#增加需求：【4倍镜】" class="headerlink" title="增加需求：【4倍镜】"></a>增加需求：【4倍镜】</h3><blockquote><p>这是之前没有的功能，新增接口Aim4X</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 4倍镜接口，实现枪接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Aim4X</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Gun</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">aim4X</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 4倍镜抽象类，实现4倍镜接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Abstract4X</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Aim4X</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Gun gun;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Abstract4X</span><span class="hljs-params">(Gun gun)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gun = gun;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fire</span><span class="hljs-params">()</span> &#123;<br>        gun.fire();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 虚假的4倍镜类，继承4倍镜抽象类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ostensible4X</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Abstract4X</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Ostensible4X</span><span class="hljs-params">(Gun gun)</span> &#123;<br>        <span class="hljs-built_in">super</span>(gun);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">aim4X</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;装上了虚假的4倍，描边枪法。&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 真实的4倍镜类，继承4倍镜抽象类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Real4X</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Abstract4X</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Real4X</span><span class="hljs-params">(Gun gun)</span> &#123;<br>        <span class="hljs-built_in">super</span>(gun);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">aim4X</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;装上了真实的4倍，突突突百发百中。&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【4倍镜】测试"><a href="#【4倍镜】测试" class="headerlink" title="【4倍镜】测试"></a>【4倍镜】测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;【获取：M416】&quot;</span>);<br>        <span class="hljs-type">Gun</span> <span class="hljs-variable">m416</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">M416</span>();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;【上弹开火！】&quot;</span>);<br>        m416.fire();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;【获取：扩容弹夹】&quot;</span>);<br>        m416 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Magazine</span>(m416);<br>        m416.fire();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;【获取：虚假的4倍】&quot;</span>);<br>        <span class="hljs-comment">// !!!注意!!!</span><br>        <span class="hljs-type">Aim4X</span> <span class="hljs-variable">aim4X</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ostensible4X</span>(m416);<br>        <br>        aim4X.aim4X();<br>        aim4X.fire();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;【获取：虚假的4倍】&quot;</span>);<br>        aim4X = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Real4X</span>(m416);<br>        aim4X.aim4X();<br>        aim4X.fire();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试输出-2"><a href="#测试输出-2" class="headerlink" title="测试输出"></a>测试输出</h3><p><img src="/images/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)/4X%E8%BE%93%E5%87%BA.png" alt="图片加载"></p><hr><h2 id="新增【8倍镜】"><a href="#新增【8倍镜】" class="headerlink" title="新增【8倍镜】"></a>新增【8倍镜】</h2><h3 id="增加需求：【8倍镜】，它具有4倍瞄准功能，也具有8倍瞄准功能。"><a href="#增加需求：【8倍镜】，它具有4倍瞄准功能，也具有8倍瞄准功能。" class="headerlink" title="增加需求：【8倍镜】，它具有4倍瞄准功能，也具有8倍瞄准功能。"></a>增加需求：【8倍镜】，它具有4倍瞄准功能，也具有8倍瞄准功能。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 8倍接口，继承4倍接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Aim8X</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Aim4X</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">aim8X</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 8倍抽象类，实现8倍接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Abstract8X</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Aim8X</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Gun gun;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Abstract8X</span><span class="hljs-params">(Gun gun)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gun = gun;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fire</span><span class="hljs-params">()</span> &#123;<br>        gun.fire();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 8倍类，继承8倍抽象类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">End8X</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Abstract8X</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">End8X</span><span class="hljs-params">(Gun gun)</span> &#123;<br>        <span class="hljs-built_in">super</span>(gun);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">aim4X</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;8X---&gt;4X&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">aim8X</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;最终的8X&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【8倍镜】测试"><a href="#【8倍镜】测试" class="headerlink" title="【8倍镜】测试"></a>【8倍镜】测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;【获取：M416】&quot;</span>);<br>        <span class="hljs-type">Gun</span> <span class="hljs-variable">m416</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">M416</span>();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;【上弹开火！】&quot;</span>);<br>        m416.fire();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;【获取：扩容弹夹】&quot;</span>);<br>        m416 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Magazine</span>(m416);<br>        m416.fire();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;【获取：虚假的4倍】&quot;</span>);<br>        <span class="hljs-comment">// !!!注意!!!</span><br>        <span class="hljs-type">Aim4X</span> <span class="hljs-variable">aim4X</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ostensible4X</span>(m416);<br>        <br>        aim4X.aim4X();<br>        aim4X.fire();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;【获取：虚假的4倍】&quot;</span>);<br>        aim4X = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Real4X</span>(m416);<br>        aim4X.aim4X();<br>        aim4X.fire();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;【获取：8X】&quot;</span>);<br>        <span class="hljs-comment">// !!!注意!!!</span><br>        <span class="hljs-type">Aim8X</span> <span class="hljs-variable">aim8X</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">End8X</span>(aim4X);<br>        <br>        aim8X.aim8X();<br>        aim8X.aim4X();<br>        aim8X.fire();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试输出-3"><a href="#测试输出-3" class="headerlink" title="测试输出"></a>测试输出</h3><p><img src="/images/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)/8X%E8%BE%93%E5%87%BA.png" alt="图片加载"></p><hr><h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><p><img src="/images/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)/PUBG-UML1.png" alt="图片加载"><br><img src="/images/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)/PUBG-UML2.png" alt="图片加载"></p><hr><hr><h1 id="源码-decorator分支"><a href="#源码-decorator分支" class="headerlink" title="源码 - decorator分支"></a>源码 - decorator分支</h1><blockquote><p>不同分支对应不同设计模式源码<br><a href="https://github.com/nullaman/JavaDesignMode">https://github.com/nullaman/JavaDesignMode</a></p></blockquote><h1 id="JDK中的例子"><a href="#JDK中的例子" class="headerlink" title="JDK中的例子"></a>JDK中的例子</h1><p>InputStream<br><img src="/images/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)/JDK%E4%B8%ADInputStream.png" alt="图片加载"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java设计模式</tag>
      
      <tag>装饰器模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JRebel热部署</title>
    <link href="/2019/12/03/JRebel%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
    <url>/2019/12/03/JRebel%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p>好用的插件。</p><span id="more"></span><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><p>File &gt; settings &gt; plugins &gt; Marketplace &gt; 搜索下载JRebel</p></blockquote><p><img src="/images/JRebel%E7%83%AD%E9%83%A8%E7%BD%B2/%E4%B8%8B%E8%BD%BD%E6%8F%92%E4%BB%B6.png" alt="图片加载"></p><h1 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h1><blockquote><p>help&gt;JRebel&gt;Activaction</p></blockquote><p><img src="/images/JRebel%E7%83%AD%E9%83%A8%E7%BD%B2/%E6%BF%80%E6%B4%BB.png" alt="图片加载"></p><blockquote><p>TeamUrl：<a href="http://jrebel.autoseasy.cn/jrebelServer/db293adf-2076-4917-bdd6-e32271419591">http://jrebel.autoseasy.cn/jrebelServer/db293adf-2076-4917-bdd6-e32271419591</a><br>邮箱：瞎填就行<br>2019-12-03测试有效：</p></blockquote><p><img src="/JRebel%E7%83%AD%E9%83%A8%E7%BD%B2/%E6%BF%80%E6%B4%BB%E7%A0%81.png" alt="图片加载"></p><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><blockquote><p>File &gt; settings &gt; JRebel &gt; Work offline</p></blockquote><p><img src="/images/JRebel%E7%83%AD%E9%83%A8%E7%BD%B2/%E5%90%AF%E5%8A%A8.png" alt="图片加载"></p><h1 id="相关配置使用"><a href="#相关配置使用" class="headerlink" title="相关配置使用"></a>相关配置使用</h1><h2 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h2><p><img src="/images/JRebel%E7%83%AD%E9%83%A8%E7%BD%B2/%E7%9B%B8%E5%85%B31.png" alt="图片加载"></p><h2 id="Ctrl-Alt-Shift-x2F-弹出"><a href="#Ctrl-Alt-Shift-x2F-弹出" class="headerlink" title="Ctrl+Alt+Shift+&#x2F; 弹出"></a>Ctrl+Alt+Shift+&#x2F; 弹出</h2><p><img src="/images/JRebel%E7%83%AD%E9%83%A8%E7%BD%B2/%E7%9B%B8%E5%85%B32.0.png" alt="图片加载"><br><img src="/images/JRebel%E7%83%AD%E9%83%A8%E7%BD%B2/%E7%9B%B8%E5%85%B32.1.png" alt="图片加载"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>左下交<br><img src="/images/JRebel%E7%83%AD%E9%83%A8%E7%BD%B2/%E4%BD%BF%E7%94%A81.png" alt="图片加载"><br>右上角<br><img src="/images/JRebel%E7%83%AD%E9%83%A8%E7%BD%B2/%E4%BD%BF%E7%94%A82.png" alt="图片加载"></p>]]></content>
    
    
    <categories>
      
      <category>Idea</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JRebel热部署</tag>
      
      <tag>插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>六大原则-Java设计模式(三)</title>
    <link href="/2019/12/03/%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%B8%89)/"/>
    <url>/2019/12/03/%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%B8%89)/</url>
    
    <content type="html"><![CDATA[<p>单一职责原则<br>开放封闭原则<br>依赖倒转原则<br>里氏代换原则<br>…待补充</p><span id="more"></span><h1 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h1><blockquote><p>就一个类而言，应该仅有一个引起它变化的原因。</p></blockquote><p>例如：俄罗斯方块。<br>每一个键位，下降、左移、右移、旋转都只对应了一个动作(职责)。</p><blockquote><p>如果一个类承担的职责过多，就等于把这些耦合在了一起，一个职责的变化可能会削弱或抑制这个类完成其他职责的能力。<br>这种耦合会导致脆弱的设计，当变化发生时，设计会遭受意想不到的破坏。</p></blockquote><blockquote><p>软件设计真正要做的许多内容，就是发现职责并把那些职责相互分离。<br>如果你能想到多余一个动机去改变一个类，那么这个类就具有多余一个职责。</p></blockquote><hr><hr><h1 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h1><blockquote><p>软件实体(类，模块，函数…等等)应该是可以扩展，但是不可修改。<br>对于扩展是开放的，对于修改是封闭的。</p></blockquote><p>例如：弹性上班工作制度。<br>有的公司员工离公司很远，上班还要送小孩子上学，经常迟到。身为老板，直接按照迟到制度扣钱？还是网开一面允许迟到？</p><ul><li>直接扣钱：员工对工资不满意，离职想法。</li><li>允许迟到：其他员工对此也非常不爽，我也天天迟到。</li></ul><hr><p>其实，老板想要的只是每天8个小时的上班时间，甚至时间都不重要，想要的只是业绩目标能完成或者超额完成。<br>于是就有了弹性上班制度：</p><ul><li>早上班早下班</li><li>允许迟到次数，迟到了当天下班后补时间</li><li>甚至对销售人员以业绩为准 … 等等</li></ul><hr><blockquote><p>开放封闭原则：对时间制度的扩展开放，对工作时间或业绩成绩的关闭。</p></blockquote><blockquote><p>绝对封闭是不可能的，无论模块多么‘封闭’，都会存在一些无法对之封闭的变化。<br>所以，设计人员必须对于他设计的模块应该对哪种变化做出选择。他必须猜测出最有可能发生的变化总类，然后构造抽象来隔离变化。</p></blockquote><blockquote><p>面对需求，对程序的改动是通过增加新代码进行的，而不是改现有代码。<br>开放封闭原则是面向对象设计的核心所在，遵循这个原则可以带来面向对象技术所声称的巨大好处，也就是可维护、可扩展、可复用、灵活性好。<br>开发人员应该仅对程序中呈现出频繁变化的那些部分做出抽象，然而，对于应用程序中的每个部分都刻意地进行抽象同样不是一个好主意。<br>拒绝不成熟的抽象和抽象本身一样重要。</p></blockquote><hr><hr><h1 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h1><blockquote><p>高层模块不应该依赖低层模块。两个都应该依赖抽象<br>抽象不应该依赖细节，细节应该依赖于抽象<br>要针对接口编程，不要对实现编程</p></blockquote><p>例如：电脑零件。<br>无论主板、CPU、内存、硬盘都是针对接口设计的，<br>如果针对实现来设计，内存对应到某品牌的主板，那么换内存的时候就会有要换主板的尴尬。</p><blockquote><p>依赖倒转可以说是面向对象设计的标志，用哪种语言来编写程序不重要，如果编写时考虑的都是如何针对抽象编程而不是针对细节编程，<br>即程序的所有的依赖关系都终止于抽象类或者接口，那就是面向对象的设计，反之就是过程化的设计了。</p></blockquote><hr><hr><h1 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h1><blockquote><p>子类必须能够替代掉他们的父类型<br>解释：一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且它察觉不出父类对象和子类对象的区别。<br>也就是说，在软件里面，把父类替换成子类，程序的行为没有变化。<br>简单的说，子类型必须能够替换掉他们的父类型。</p></blockquote><p>例如：</p><ul><li>错误的：父类-鸟-飞的方法，子类-企鹅。</li><li>正确的：父类-动物-吃喝拉撒的方法，子类-猫狗等。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>六大原则</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>策略模式-Java设计模式(二)</title>
    <link href="/2019/12/02/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BA%8C)/"/>
    <url>/2019/12/02/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<p>策略模式-Java设计模式(二)</p><span id="more"></span><h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><blockquote><p>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。(超市打折…)</p></blockquote><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><blockquote><p>1.在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。<br>2.一个系统有许多许多类，而区分它们的只是他们直接的行为。</p></blockquote><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><blockquote><p>优点：<br>1.算法可以自由切换。<br>2.避免使用多重条件判断。<br>3.扩展性良好。</p></blockquote><blockquote><p>缺点：<br>1.策略类会增多。<br>2.所有策略类都需要对外暴露。</p></blockquote><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><blockquote><p>实现同一个接口。</p></blockquote><hr><hr><h1 id="代码-amp-结构图"><a href="#代码-amp-结构图" class="headerlink" title="代码 &amp; 结构图"></a>代码 &amp; 结构图</h1><h2 id="【商场商品打折、涨价、降价】例子"><a href="#【商场商品打折、涨价、降价】例子" class="headerlink" title="【商场商品打折、涨价、降价】例子"></a>【商场商品打折、涨价、降价】例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 公共算法接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Strategy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">doOperation</span><span class="hljs-params">(<span class="hljs-type">double</span> num1, <span class="hljs-type">double</span> num2)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 涨价</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperationAdd</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Strategy</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> price 价钱</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> add   涨价</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">doOperation</span><span class="hljs-params">(<span class="hljs-type">double</span> price, <span class="hljs-type">double</span> add)</span> &#123;<br>        <span class="hljs-keyword">return</span> price + add;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 打折</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperationDiscount</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Strategy</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> price    价钱</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> discount 折扣</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">doOperation</span><span class="hljs-params">(<span class="hljs-type">double</span> price, <span class="hljs-type">double</span> discount)</span> &#123;<br>        <span class="hljs-keyword">return</span> price * discount;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 降价</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperationSubstract</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Strategy</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> price     价钱</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> substract 减价</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">doOperation</span><span class="hljs-params">(<span class="hljs-type">double</span> price, <span class="hljs-type">double</span> substract)</span> &#123;<br>        <span class="hljs-keyword">return</span> price - substract;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="执行的策略类"><a href="#执行的策略类" class="headerlink" title="执行的策略类"></a>执行的策略类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 执行的策略类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CashContext</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Strategy strategy;<br><br>    CashContext() &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStrategy</span><span class="hljs-params">(Strategy strategy)</span> &#123;<br>        <span class="hljs-built_in">this</span>.strategy = strategy;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">executeStrategy</span><span class="hljs-params">(<span class="hljs-type">double</span> num1, <span class="hljs-type">double</span> num2)</span> &#123;<br>        <span class="hljs-keyword">return</span> strategy.doOperation(num1, num2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建对象</span><br>        <span class="hljs-type">CashContext</span> <span class="hljs-variable">cashContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CashContext</span>();<br><br>        <span class="hljs-comment">// 根据不同的情况，调用不同的算法</span><br>        cashContext.setStrategy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OperationAdd</span>());<br>        <span class="hljs-comment">// 涨价：110.0</span><br>        System.out.println(<span class="hljs-string">&quot;涨价：&quot;</span> + cashContext.executeStrategy(<span class="hljs-number">100</span>, <span class="hljs-number">10</span>));<br><br>        cashContext.setStrategy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OperationDiscount</span>());<br>        <span class="hljs-comment">// 打折：80.0</span><br>        System.out.println(<span class="hljs-string">&quot;打折：&quot;</span> + cashContext.executeStrategy(<span class="hljs-number">100</span>, <span class="hljs-number">0.8</span>));<br><br>        cashContext.setStrategy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OperationSubstract</span>());<br>        <span class="hljs-comment">// 降价：90.0</span><br>        System.out.println(<span class="hljs-string">&quot;降价：&quot;</span> + cashContext.executeStrategy(<span class="hljs-number">100</span>, <span class="hljs-number">10</span>));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="策略模式UML结构图"><a href="#策略模式UML结构图" class="headerlink" title="策略模式UML结构图"></a>策略模式UML结构图</h2><p><img src="/images/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BA%8C)/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F-%E5%95%86%E5%9C%BA%E6%89%93%E6%8A%98.png" alt="图片加载"></p><h1 id="源码-strategy分支"><a href="#源码-strategy分支" class="headerlink" title="源码 - strategy分支"></a>源码 - strategy分支</h1><blockquote><p>不同分支对应不同设计模式源码<br><a href="https://github.com/nullaman/JavaDesignMode">https://github.com/nullaman/JavaDesignMode</a></p></blockquote><hr><hr><h1 id="JDK中的例子"><a href="#JDK中的例子" class="headerlink" title="JDK中的例子"></a>JDK中的例子</h1><p>Comparator接口</p><blockquote><p>java.util.Comparator</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.util;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><span class="hljs-keyword">import</span> java.util.function.ToIntFunction;<br><span class="hljs-keyword">import</span> java.util.function.ToLongFunction;<br><span class="hljs-keyword">import</span> java.util.function.ToDoubleFunction;<br><span class="hljs-keyword">import</span> java.util.Comparators;<br><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Comparator</span>&lt;T&gt; &#123;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(T o1, T o2)</span>;<br>    <br>    <span class="hljs-comment">// ...</span><br>    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java设计模式</tag>
      
      <tag>策略模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单的工厂模式-Java设计模式(一)</title>
    <link href="/2019/11/28/%E7%AE%80%E5%8D%95%E7%9A%84%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%B8%80)/"/>
    <url>/2019/11/28/%E7%AE%80%E5%8D%95%E7%9A%84%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<p>简单的工厂模式-Java设计模式(一)</p><span id="more"></span><h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><blockquote><p>简单工厂模式不是 23 种里的一种，简而言之，就是有一个专门生产某个产品的类。 更像是一种编码的风格和习惯。</p></blockquote><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><blockquote><p>1.工厂类负责创建的对象比较少。<br>2.客户端（应用层）只知道传入工厂类的参数，对于如何创建对象（逻辑）不关心。</p></blockquote><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><blockquote><p>优点：只需要传入一个正确的参数，就可以获取你所需要的对象，无需知道其创建细节。<br>缺点：工厂类的职责相对过重，增加新的产品需要修改工厂类的判断逻辑，无法满足开闭原则，对多个产品的扩展不利。</p></blockquote><hr><hr><h1 id="代码-amp-结构图"><a href="#代码-amp-结构图" class="headerlink" title="代码 &amp; 结构图"></a>代码 &amp; 结构图</h1><h2 id="动物例子"><a href="#动物例子" class="headerlink" title="动物例子"></a>动物例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 动物接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;鸟在天上飞&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fish</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;鱼在水中游泳&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;人在地上走&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="工厂类"><a href="#工厂类" class="headerlink" title="工厂类"></a>工厂类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 工厂类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnimalFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Animal <span class="hljs-title function_">createAnimal</span><span class="hljs-params">(String animal)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (animal) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;fish&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fish</span>();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;bird&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bird</span>();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;people&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>();<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">fish</span> <span class="hljs-operator">=</span> AnimalFactory.createAnimal(<span class="hljs-string">&quot;fish&quot;</span>);<br>        <span class="hljs-comment">// 调用方法</span><br>        fish.run(); <span class="hljs-comment">//输出结果: 鱼在水中游泳</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h2><p><img src="/images/%E7%AE%80%E5%8D%95%E7%9A%84%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%B8%80)/%E5%8A%A8%E7%89%A9UML%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="图片加载"></p><h1 id="源码-simpleFactory分支"><a href="#源码-simpleFactory分支" class="headerlink" title="源码 - simpleFactory分支"></a>源码 - simpleFactory分支</h1><blockquote><p>不同分支对应不同设计模式源码<br><a href="https://github.com/nullaman/JavaDesignMode">https://github.com/nullaman/JavaDesignMode</a></p></blockquote><hr><hr><h1 id="JDK中的例子"><a href="#JDK中的例子" class="headerlink" title="JDK中的例子"></a>JDK中的例子</h1><p>Calendar类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Calendar.getInstance();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Gets a calendar using the default time zone and locale. The</span><br><span class="hljs-comment"> * &lt;code&gt;Calendar&lt;/code&gt; returned is based on the current time</span><br><span class="hljs-comment"> * in the default time zone with the default</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> Locale.Category#FORMAT FORMAT&#125; locale.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> a Calendar.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Calendar <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> createCalendar(TimeZone.getDefault(), Locale.getDefault(Locale.Category.FORMAT));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Calendar <span class="hljs-title function_">createCalendar</span><span class="hljs-params">(TimeZone zone,</span><br><span class="hljs-params">                                       Locale aLocale)</span><br>&#123;<br>    <span class="hljs-type">CalendarProvider</span> <span class="hljs-variable">provider</span> <span class="hljs-operator">=</span><br>        LocaleProviderAdapter.getAdapter(CalendarProvider.class, aLocale)<br>                             .getCalendarProvider();<br>    <span class="hljs-keyword">if</span> (provider != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> provider.getInstance(zone, aLocale);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException iae) &#123;<br>            <span class="hljs-comment">// fall back to the default instantiation</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">Calendar</span> <span class="hljs-variable">cal</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">if</span> (aLocale.hasExtensions()) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">caltype</span> <span class="hljs-operator">=</span> aLocale.getUnicodeLocaleType(<span class="hljs-string">&quot;ca&quot;</span>);<br>        <span class="hljs-keyword">if</span> (caltype != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">switch</span> (caltype) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;buddhist&quot;</span>:<br>            cal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuddhistCalendar</span>(zone, aLocale);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;japanese&quot;</span>:<br>                cal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JapaneseImperialCalendar</span>(zone, aLocale);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;gregory&quot;</span>:<br>                cal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GregorianCalendar</span>(zone, aLocale);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (cal == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// If no known calendar type is explicitly specified,</span><br>        <span class="hljs-comment">// perform the traditional way to create a Calendar:</span><br>        <span class="hljs-comment">// create a BuddhistCalendar for th_TH locale,</span><br>        <span class="hljs-comment">// a JapaneseImperialCalendar for ja_JP_JP locale, or</span><br>        <span class="hljs-comment">// a GregorianCalendar for any other locales.</span><br>        <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> The language, country and variant strings are interned.</span><br>        <span class="hljs-keyword">if</span> (aLocale.getLanguage() == <span class="hljs-string">&quot;th&quot;</span> &amp;&amp; aLocale.getCountry() == <span class="hljs-string">&quot;TH&quot;</span>) &#123;<br>            cal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuddhistCalendar</span>(zone, aLocale);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (aLocale.getVariant() == <span class="hljs-string">&quot;JP&quot;</span> &amp;&amp; aLocale.getLanguage() == <span class="hljs-string">&quot;ja&quot;</span><br>                   &amp;&amp; aLocale.getCountry() == <span class="hljs-string">&quot;JP&quot;</span>) &#123;<br>            cal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JapaneseImperialCalendar</span>(zone, aLocale);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GregorianCalendar</span>(zone, aLocale);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cal;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java设计模式</tag>
      
      <tag>工厂模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GET请求400</title>
    <link href="/2019/11/27/GET%E8%AF%B7%E6%B1%82400/"/>
    <url>/2019/11/27/GET%E8%AF%B7%E6%B1%82400/</url>
    
    <content type="html"><![CDATA[<p>今天项目部署测试正式服，<br>发现在开发环境下没有问题的GET请求接口，到了正式环境居然报了400。</p><span id="more"></span><h1 id="GET请求的长度"><a href="#GET请求的长度" class="headerlink" title="GET请求的长度"></a>GET请求的长度</h1><p>曾经就百度过关于GET请求的长度问题，已经被他人实际测试验证过</p><p>GET最大长度不是【256】个字节.</p><p>经过实际测试：</p><p>在IE8下的URL地址总长度为：4076，超过该长度会自动忽略后面的内容；</p><p>在firefox 25下的URL地址总长度可以达到:7530，超过该长度会访问错误；</p><p>在chrome 29.0.1547.62 的最大总长度达到:7675，超过该长度会访问错误；</p><p>参考博文<a href="https://blog.csdn.net/salonzhou/article/details/15338473">Get方法可传递的字符串的最大长度是多少？</a></p><p>评论：【据我所知，url是可以很长的，一般达到几千的长度，但是url的参数最长只能256，如果你带10个255长度的参数，那么你的url长度就达到了 2550左右，一样是没问题的，重点值单个参数长度不能超过256】</p><h1 id="我的报错代码排错"><a href="#我的报错代码排错" class="headerlink" title="我的报错代码排错"></a>我的报错代码排错</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/list/&#123;tableId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R <span class="hljs-title function_">getRegionLogging</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;tableId&quot;)</span> String tableId)</span> &#123;<br>    <span class="hljs-keyword">return</span> R.ok();<br>&#125;<br></code></pre></td></tr></table></figure><p>其中我的【tableId】为组合字符串，以”|”分割的四个关键字段，</p><p>一个日期为”2019-11-27”，三个长度为11的String字符串。</p><p>得出：70字节<br><img src="/images/GET%E8%AF%B7%E6%B1%82400/TableId%E5%86%85%E5%AE%B9.png" alt="图片加载"><br><img src="/images/GET%E8%AF%B7%E6%B1%82400/TableId%E9%95%BF%E5%BA%A6.png" alt="图片加载"></p><p>应该不可能超出长度限制。</p><p>但是在正式服一直400.</p><p>原因未知。。。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>修改为POST请求了。【无奈…】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/list&quot;)</span><br><span class="hljs-keyword">public</span> R <span class="hljs-title function_">getRegionLogging</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Map&lt;String, String&gt; map)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">tableId</span> <span class="hljs-operator">=</span> map.get(<span class="hljs-string">&quot;tableId&quot;</span>);<br>    <span class="hljs-keyword">return</span> R.ok();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GET请求</tag>
      
      <tag>开发中的坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java富文本框标签过滤</title>
    <link href="/2019/11/25/Java%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A1%86%E6%A0%87%E7%AD%BE%E8%BF%87%E6%BB%A4/"/>
    <url>/2019/11/25/Java%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A1%86%E6%A0%87%E7%AD%BE%E8%BF%87%E6%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>今天改【通知】模块的需求，记录一下之前改的需求，<br>前端说小程序一页面无法对富文本框的标签进行识别转义，后台需要进行一些标签过滤。</p><span id="more"></span><h1 id="一些代码"><a href="#一些代码" class="headerlink" title="一些代码"></a>一些代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * html标签的过滤和清洗</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> caoxiang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019/10/30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HtmlUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">mySanitizeHtml</span><span class="hljs-params">(String htmlContent)</span> &#123;<br>        <span class="hljs-comment">// 过滤文章内容中的html</span><br>        htmlContent = htmlContent.replaceAll(<span class="hljs-string">&quot;&lt;/?[^&lt;]+&gt;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">// 去除字符串中的空格 回车 换行符 制表符 等</span><br>        htmlContent = htmlContent.replaceAll(<span class="hljs-string">&quot;\\s*|\t|\r|\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">// 去除空格</span><br>        htmlContent = htmlContent.replaceAll(<span class="hljs-string">&quot;&amp;nbsp;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">// 去掉其他一些字符</span><br>        htmlContent = htmlContent.replaceAll(<span class="hljs-string">&quot;\\\\&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        htmlContent = htmlContent.replaceAll(<span class="hljs-string">&quot;\\\\\\\\&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">// 后面的如果有特殊字符，根据自己需要进行过滤。</span><br>        <br>        <span class="hljs-comment">// 打印结果</span><br>        System.out.println(htmlContent);<br>        <span class="hljs-keyword">return</span> htmlContent;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2019/11/25/hello-world/"/>
    <url>/2019/11/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>花了几天时间终于弄完了~ 之后就是坚持记录啦~</p><span id="more"></span><p>从买服务器，到搭建部署Typecho，然后是WordPress，最后到了github-hexo，</p><p>哈哈哈~路途曲折，但是挺好玩的。</p><p>空闲时间到处翻翻找找~</p><p>终于全部配置完成了，加油鸭！！冲冲冲</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合Kafka使用</title>
    <link href="/2019/11/21/SpringBoot%E6%95%B4%E5%90%88Kafka%E4%BD%BF%E7%94%A8/"/>
    <url>/2019/11/21/SpringBoot%E6%95%B4%E5%90%88Kafka%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>终于想起了我有博客…最近好不容易忙完巡检模块，想写点什么。<br>之前公司订餐系列模块用到了kafka，整理一些配置和使用把。</p><span id="more"></span><h1 id="一-整理的一些bootstrap-yml配置"><a href="#一-整理的一些bootstrap-yml配置" class="headerlink" title="一.整理的一些bootstrap.yml配置"></a>一.整理的一些bootstrap.yml配置</h1><p>都是网上啊啥找的一些配置信息，可以参考使用。<br>具体的优化啊，高级配置的话还是参照官网<a href="http://kafka.apache.org/">kafka</a>去琢磨加深把。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kafka:</span><br>  <span class="hljs-attr">bootstrap-servers:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span> <span class="hljs-comment">#你kafka服务器地址</span><br>  <span class="hljs-comment">#生产者的配置，大部分我们可以使用默认的，这里列出几个比较重要的属性</span><br>  <span class="hljs-attr">producer:</span><br>    <span class="hljs-comment">#每批次发送消息的数量</span><br>    <span class="hljs-attr">batch-size:</span> <span class="hljs-number">16</span><br>    <span class="hljs-comment">#设置大于0的值将使客户端重新发送任何数据，一旦这些数据发送失败。</span><br>    <span class="hljs-comment">#注意，这些重试与客户端接收到发送错误时的重试没有什么不同。允许重试将潜在的改变数据的顺序，</span><br>    <span class="hljs-comment">#如果这两个消息记录都是发送到同一个partition，则第一个消息失败第二个发送成功，则第二条消息会比第一条消息出现要早。</span><br>    <span class="hljs-attr">retries:</span> <span class="hljs-number">0</span><br>    <span class="hljs-comment">#producer可以用来缓存数据的内存大小。如果数据产生速度大于向broker发送的速度，</span><br>    <span class="hljs-comment">#producer会阻塞或者抛出异常，以“block.on.buffer.full”来表明。</span><br>    <span class="hljs-comment">#这项设置将和producer能够使用的总内存相关，但并不是一个硬性的限制，</span><br>    <span class="hljs-comment">#因为不是producer使用的所有内存都是用于缓存。一些额外的内存会用于压缩（如果引入压缩机制），同样还有一些用于维护请求。</span><br>    <span class="hljs-attr">buffer-memory:</span> <span class="hljs-number">33554432</span><br>    <span class="hljs-attr">acks:</span> <span class="hljs-string">all</span><br>    <span class="hljs-comment">#key序列化方式</span><br>    <span class="hljs-attr">key-serializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringSerializer</span><br>    <span class="hljs-attr">value-serializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringSerializer</span><br>  <span class="hljs-comment">#消费者的配置</span><br>  <span class="hljs-attr">consumer:</span><br>    <span class="hljs-comment">#Kafka中没有初始偏移或如果当前偏移在服务器上不再存在时,默认区最新 ，有三个选项 【latest, earliest, none】</span><br>    <span class="hljs-attr">auto-offset-reset:</span> <span class="hljs-string">latest</span><br>    <span class="hljs-comment">#是否开启自动提交</span><br>    <span class="hljs-attr">enable-auto-commit:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment">#自动提交的时间间隔</span><br>    <span class="hljs-attr">auto-commit-interval:</span> <span class="hljs-number">100</span><br>    <span class="hljs-comment">#key的解码方式</span><br>    <span class="hljs-attr">key-deserializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringDeserializer</span><br>    <span class="hljs-comment">#value的解码方式</span><br>    <span class="hljs-attr">value-deserializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringDeserializer</span><br>    <span class="hljs-comment">#在/usr/local/etc/kafka/consumer.properties中有配置</span><br>    <span class="hljs-attr">group-id:</span> <span class="hljs-string">consumerGroup</span> <span class="hljs-comment">#【你自己配置的】</span><br></code></pre></td></tr></table></figure><h1 id="二-Kafka生产者"><a href="#二-Kafka生产者" class="headerlink" title="二.Kafka生产者"></a>二.Kafka生产者</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.RecordMetadata;<br><span class="hljs-keyword">import</span> org.springframework.kafka.core.KafkaTemplate;<br><span class="hljs-keyword">import</span> org.springframework.kafka.support.ProducerListener;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.Scheduled;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生产者</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> aman</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019/10/26</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderSendMsgByKafka</span> &#123;<br><br>    <span class="hljs-keyword">private</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RepastOrderService repastOrderService;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TOPIC_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;CloudSchoolRepast&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定时任务每天一点发送每天的订餐信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Scheduled(cron = &quot;0 0 1 * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendOrderMessageByKafka</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 发送数据到消息队列</span><br><span class="hljs-comment">         * send有多个重载方法</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            kafkaTemplate.send(TOPIC_NAME, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;data&quot;</span>, JSON.toJSONString(order));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;发送异常try : 主题名称topic = &#123;&#125;, 异常exception = &#123;&#125;&quot;</span>, TOPIC_NAME);<br>        &#125;<br>        <span class="hljs-comment">//消息发送的监听器，用于回调返回信息</span><br>        kafkaTemplate.setProducerListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerListener</span>&lt;String, String&gt;() &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 成功后调用</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> topic 主题</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> partition 目标分区</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> recordMetadata 发送成功的结果</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSuccess</span><span class="hljs-params">(String topic, Integer partition, String key, String value, RecordMetadata recordMetadata)</span> &#123;<br>                log.info(<span class="hljs-string">&quot;发送成功 : 主题名称topic = &#123;&#125;, 分区partition = &#123;&#125;, 键key = &#123;&#125;, 值value = &#123;&#125;, recordMetadata = &#123;&#125;&quot;</span>, topic, partition, key, value, recordMetadata);<br>            &#125;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 失败后调用, ProducerRecord被覆盖后不调用</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> topic 主题</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> partition 目标分区</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> exception 异常</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(String topic, Integer partition, String key, String value, Exception exception)</span> &#123;<br>                log.error(<span class="hljs-string">&quot;发送异常onError : 主题名称topic = &#123;&#125;, 分区partition = &#123;&#125;, 键key = &#123;&#125;, 值value = &#123;&#125;, 异常exception = &#123;&#125;&quot;</span>, topic, partition, key, value, exception);<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="三-Kafka消费者"><a href="#三-Kafka消费者" class="headerlink" title="三.Kafka消费者"></a>三.Kafka消费者</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;<br><span class="hljs-keyword">import</span> org.springframework.kafka.annotation.KafkaListener;<br><span class="hljs-keyword">import</span> org.springframework.kafka.annotation.TopicPartition;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Optional;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Kafka消费者</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> caoxiang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 20119/10/26</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RepastConsumer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TOPIC_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;CloudSchoolRepast&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RepastOrderService repastOrderService;<br><br>    <span class="hljs-meta">@KafkaListener(id = &quot;RepastConsumerAfter&quot;, topicPartitions = &#123;@TopicPartition(topic = TOPIC_NAME, partitions = &#123;&quot;1&quot;&#125;)&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listen</span><span class="hljs-params">(ConsumerRecord&lt;?, ?&gt; record)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         *  如果record.value()为空,返回空的Optional,</span><br><span class="hljs-comment">         *  否则返回一个value值为record.value()的Optional</span><br><span class="hljs-comment">         */</span><br>        Optional&lt;?&gt; kafkaMessage = Optional.ofNullable(record.value());<br>        log.info(<span class="hljs-string">&quot;Receiver record = &#123;&#125;&quot;</span>, record);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 判断Optional的value值是否为空</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span> (kafkaMessage.isPresent()) &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 获取Optional的value值  List&lt;OrderBySendKafka&gt;</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> kafkaMessage.get();<br>            log.info(<span class="hljs-string">&quot;Receiver message = &#123;&#125;&quot;</span>, message);<br>        &#125;<br>    &#125;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一次玩服务器，搭建vpn、博客记录</title>
    <link href="/2019/10/30/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%90%AD%E5%BB%BAvpn%E3%80%81%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/"/>
    <url>/2019/10/30/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%90%AD%E5%BB%BAvpn%E3%80%81%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>自己购买搭建服务器<br>搭建vpn<br>搭建博客：Typecho【部署在自己服务器】、WordPress【部署在自己服务器】、github【无需购买服务器】<br>以及关于宝塔的一些记录总结…吧…</p><span id="more"></span><h1 id="一-购买服务器"><a href="#一-购买服务器" class="headerlink" title="一.购买服务器"></a>一.购买服务器</h1><p>我是在<a href="https://www.vultr.com/">Vultr</a>购买的【海外】服务器。</p><p>这里是计时收费,删除所有服务器的话就不扣钱了，暂停的话还是会扣费的。</p><h1 id="二-搭建vpn"><a href="#二-搭建vpn" class="headerlink" title="二.搭建vpn"></a>二.搭建vpn</h1><p>（个人需求，嘻嘻嘻xixixi）</p><h2 id="我用的是win10的-PowerShell-操作，输入以下连接你的服务器"><a href="#我用的是win10的-PowerShell-操作，输入以下连接你的服务器" class="headerlink" title="我用的是win10的 PowerShell 操作，输入以下连接你的服务器"></a>我用的是win10的 PowerShell 操作，输入以下连接你的服务器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh root@你的服务器ip地址<br></code></pre></td></tr></table></figure><h2 id="输入服务器密码，然后执行以下三行"><a href="#输入服务器密码，然后执行以下三行" class="headerlink" title="输入服务器密码，然后执行以下三行"></a>输入服务器密码，然后执行以下三行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh   <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x shadowsocks-all.sh <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./shadowsocks-all.sh 2&gt;&amp;1 | <span class="hljs-built_in">tee</span> shadowsocks-all.log <br></code></pre></td></tr></table></figure><h2 id="开始配置参数：第一个选择-2-shadowsocksR-后-输入设置ssr密码"><a href="#开始配置参数：第一个选择-2-shadowsocksR-后-输入设置ssr密码" class="headerlink" title="开始配置参数：第一个选择 2.shadowsocksR 后,输入设置ssr密码"></a>开始配置参数：第一个选择 2.shadowsocksR 后,输入设置ssr密码</h2><p>之后就按照需求配置，贴出我的是：</p><p>端口：大点好点把，不容易被墙。(据说是</p><p>加密：aes-256-cfb</p><p>协议：auth_sha1_v4</p><p>混淆：http_simple</p><h2 id="完成之后-下载ssr工具（Windows-、Android）配置一下以上的参数，连接就可以翻墙了。"><a href="#完成之后-下载ssr工具（Windows-、Android）配置一下以上的参数，连接就可以翻墙了。" class="headerlink" title="完成之后.下载ssr工具（Windows 、Android）配置一下以上的参数，连接就可以翻墙了。"></a>完成之后.下载ssr工具（<a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases/download/4.9.0/ShadowsocksR-win-4.9.0.zip">Windows</a> 、<a href="https://github.com/shadowsocksrr/shadowsocksr-android/releases/download/3.5.4/shadowsocksr-android-3.5.4.apk">Android</a>）配置一下以上的参数，连接就可以翻墙了。</h2><h1 id="三-宝塔一键安装。我的服务器是CentOs7"><a href="#三-宝塔一键安装。我的服务器是CentOs7" class="headerlink" title="三.宝塔一键安装。我的服务器是CentOs7"></a>三.宝塔一键安装。我的服务器是CentOs7</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">yum install -<span class="hljs-keyword">y</span> wget &amp;&amp; wget -O install.<span class="hljs-keyword">sh</span> http://download.bt.<span class="hljs-keyword">cn</span>/install/install_6.<span class="hljs-number">0</span>.<span class="hljs-keyword">sh</span> &amp;&amp; <span class="hljs-keyword">sh</span> install.<span class="hljs-keyword">sh</span>  <br></code></pre></td></tr></table></figure><p>安装完成，按照默认提示地址、用户名、密码 登陆宝塔。</p><p>宝塔的面板配置：以下可以理解为：</p><p>宝塔访问路径为： [域名] : [端口] &#x2F; [安全入口]</p><p>面板端口：可以自己更改</p><p>域名：自己购买的，配置了解析服务器地址的域名</p><p>ip：同域名</p><p>面板用户：宝塔登陆账号</p><p>面板密码：登陆密码 </p><h1 id="四-搭建博客（Typecho、WordPress、github无需购买服务器）"><a href="#四-搭建博客（Typecho、WordPress、github无需购买服务器）" class="headerlink" title="四.搭建博客（Typecho、WordPress、github无需购买服务器）"></a>四.搭建博客（Typecho、WordPress、github无需购买服务器）</h1><h2 id="Typecho【部署在自己服务器】"><a href="#Typecho【部署在自己服务器】" class="headerlink" title="Typecho【部署在自己服务器】"></a>Typecho【部署在自己服务器】</h2><h2 id="WordPress【部署在自己服务器】"><a href="#WordPress【部署在自己服务器】" class="headerlink" title="WordPress【部署在自己服务器】"></a>WordPress【部署在自己服务器】</h2><h2 id="github-hexo【无需购买服务器】"><a href="#github-hexo【无需购买服务器】" class="headerlink" title="github-hexo【无需购买服务器】"></a>github-hexo【无需购买服务器】</h2><h3 id="关于hexo写博文的图片显示，使用和一些坑。"><a href="#关于hexo写博文的图片显示，使用和一些坑。" class="headerlink" title="关于hexo写博文的图片显示，使用和一些坑。"></a>关于hexo写博文的图片显示，使用和一些坑。</h3><p>使用：将hexo根目录下配置文件_config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>执行，安装插件</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">npm install hexo-asset-<span class="hljs-built_in">image</span> –<span class="hljs-built_in">save</span><br></code></pre></td></tr></table></figure><p>之后写博文的时候，</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;demo&quot;</span> <br></code></pre></td></tr></table></figure><p>新建demo会在source目录下创建一个和你的博文demo相同名称的文件夹，将图片放入该文件夹，使用下面来调用</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[图片失败的文字]</span>(demo/图片.jpg)<br></code></pre></td></tr></table></figure><p>！！！然后重新hexo g，查看一下生成的index运气好，有用。看到的是</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;/2019/10/30/demo/&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;archive-article-date&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>运气不好,遇到坑了。看到的就是大概下面这种类型，图片没有用</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;/.com//demo.png&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;archive-article-date&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>解决：打开根目录下的package.json<br>修改以下的为0.0.1（”hexo-asset-image”: “0.0.1”,）<br><img src="/images/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%90%AD%E5%BB%BAvpn%E3%80%81%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/img_package_001.png" alt="图片加载"><br>然后，在博客根目录下执行</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>查看一下，应该就没得问题了。试试~<br><img src="/images/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%90%AD%E5%BB%BAvpn%E3%80%81%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/bg1.png" alt="图片加载"><br><img src="/images/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%90%AD%E5%BB%BAvpn%E3%80%81%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/bg2.png" alt="图片加载"></p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>服务器</tag>
      
      <tag>vpn</tag>
      
      <tag>博客</tag>
      
      <tag>宝塔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
