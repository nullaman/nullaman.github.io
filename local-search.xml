<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Redis(三)-9大类型</title>
    <link href="/2022/06/30/Redis(%E4%B8%89)-9%E5%A4%A7%E7%B1%BB%E5%9E%8B/"/>
    <url>/2022/06/30/Redis(%E4%B8%89)-9%E5%A4%A7%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>Redis经典<strong>5种</strong>数据(<strong>String、List、Hash、Set、ZSet</strong>)以及<strong>3种</strong> <code>新?</code>类型(<strong>BitMap、HyperLogLog、Geo</strong>)的类型介绍及落地运用。简单了解<strong>Stream</strong>类型。</p><span id="more"></span><ul><li><p>基本介绍</p><ul><li>String(字符类型)</li><li>Hash(散列类型)</li><li>List(列表类型)</li><li>Set(集合类型)</li><li>SortedSet(有序集合类型，简称ZSet)</li><li>Bitmap(位图)</li><li>HyperLogLog(统计)</li><li>GEO(地理)</li><li>Stream(Redis Stream 主要用于消息队列（MQ，Message Queue）)</li></ul></li><li><p><strong>3种新类型底层实质还是基础类型：</strong></p><ul><li><strong><code>BitMap ---&gt; String</code></strong></li><li><strong><code>HyperLogLog ---&gt; String</code></strong></li><li><strong><code>Geo ---&gt; ZSet</code></strong></li></ul></li></ul><h1 id="5种经典类型"><a href="#5种经典类型" class="headerlink" title="5种经典类型"></a>5种经典类型</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul><li>常用命令<ul><li>Ⅰ.单个和多个值的设置&#x2F;获取</li><li>Ⅱ.递增递减，指定增减数值</li><li>Ⅲ.获取字符串长度</li><li>Ⅳ.分布式锁</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">Ⅰ.<br><span class="hljs-comment"># 单个值的设置/获取</span><br><span class="hljs-built_in">set</span> 【key】 【value】<br>get 【key】<br><span class="hljs-comment"># 同时设置/获取多个键值</span><br>mset key value [key value ...]<br>mget key [key ...]<br><br>Ⅱ.<br><span class="hljs-comment"># 递增数字</span><br>inCr 【key】<br><span class="hljs-comment"># 增加指定的整数</span><br>inCrby 【key】 【increment】<br><span class="hljs-comment"># 递减数值</span><br>deCr 【key】<br><span class="hljs-comment"># 减少指定的整数</span><br>deCrby 【key】 【decrement】<br><br>Ⅲ.<br><span class="hljs-comment"># 获取字符串长度</span><br>strLen 【key】<br><br>Ⅳ.<br><span class="hljs-comment"># 分布式锁。例:set lock pay ex 10 nx =&gt; 设置key为lock，value为pay，10s后过期</span><br><span class="hljs-comment"># EX:key在多少秒之后过期</span><br><span class="hljs-comment"># PX:key在多少毫秒之后过期</span><br><span class="hljs-comment"># NX:当key不存在的时候，才创建key，效果等同于setnx</span><br><span class="hljs-comment"># XX:当key存在的时候，覆盖key</span><br>setNx 【key】 【value】<br><span class="hljs-built_in">set</span> 【key】 【value】 [EX seconds] [PX milliseconds] [NX|XX]<br></code></pre></td></tr></table></figure><ul><li>应用场景<ul><li>比如视频的浏览数量(incr)</li><li>文章的阅读量…</li></ul></li></ul><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><ul><li>常用命令<ul><li>Ⅰ.一次[设置&#x2F;获取][一个&#x2F;多个]字段值</li><li>Ⅱ.获取所有字段值</li><li>Ⅲ.获取某个key内的全部数量</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">Ⅰ.<br><span class="hljs-comment"># 一次设置/获取一个字段值</span><br>hset 【key】 【field value】<br>hget 【key】 【field】<br><span class="hljs-comment"># 一次设置/获取多个字段值</span><br>hmset 【key】 【field value】 [field value ...]<br>hmget 【key】 【field】 [field ...]<br><br>Ⅱ.<br><span class="hljs-comment"># 获取所有字段值</span><br>hgetall 【key】<br><br>Ⅲ.<br><span class="hljs-comment"># 获取某个key内的全部数量</span><br>hlen 【key】<br></code></pre></td></tr></table></figure><ul><li>应用场景<br>JD购物车早期 设计目前不再采用，当前小中厂可用。</li></ul><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul><li><p>简单介绍：<br>一个<strong>双端链表</strong>的结构，容量是2的32次方减1个元素，大概40多亿，主要功能有push&#x2F;pop等，<br>一般用在栈、队列、消息队列等场景。</p></li><li><p>常用命令</p><ul><li>Ⅰ.向列表左&#x2F;右边添加元素</li><li>Ⅱ.查看列表</li><li>Ⅲ.获取列表中元素的个数</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">Ⅰ.<br><span class="hljs-comment"># 向列表左边添加元素</span><br>lpush 【key】 【value】 [value ...]<br><span class="hljs-comment"># 向列表右边添加元素</span><br>rpush 【key】 【value】 [value ...]<br><br>Ⅱ.<br><span class="hljs-comment"># 查看列表</span><br>lrange key start stop<br><br>Ⅲ.<br><span class="hljs-comment"># 获取列表中元素的个数</span><br>llen key<br></code></pre></td></tr></table></figure><ul><li>应用场景<ul><li>微信公众号订阅的消息<blockquote><p>1 公众号1 和 公众号2，发布了文章分别是 11 和 22<br>2 我关注了这两个，只要他们发布了新文章，就会安装进我的List，【lpush likekey:我id 11 22】<br>3 查看自己的号订阅的全部文章，类似分页，下面0~10就是一次显示10条【lrange likekey:我id 0 9】</p></blockquote></li><li>商品评论列表<blockquote><p>需求1：用户针对某一商品发布评论，一个商品会被不同的用户进行评论，保存商品评论时，要按时间顺序排序<br>需要2：用户在前端页面查询该商品的评论，需要按照时间顺序降序排序。</p><blockquote><p>使用list存储商品评论信息，key是该商品的id，value是商品评论信息，<br>【lpush items:comment:1001 {“id”:1001,”name”:”hw”,”date”:”信息”,”content”:”content”} 】</p></blockquote></blockquote></li></ul></li></ul><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ul><li>常用命令<ul><li>Ⅰ.添加、删除、遍历、判断是否存在、获取集合大小</li><li>Ⅱ.<strong>随机</strong>取出n个元素</li><li>Ⅲ.<strong>集合运算</strong></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">Ⅰ.<br><span class="hljs-comment"># 添加元素</span><br>sAdd 【key】 【member】 [member ...]<br><span class="hljs-comment"># 删除元素</span><br>sRem 【key】 【member】 [member ...]<br><span class="hljs-comment"># 遍历集合中的所有元素</span><br>sMembers 【key】<br><span class="hljs-comment"># 判断元素是否在集合中</span><br>sIsMember 【key】 【member】<br><span class="hljs-comment"># 获取集合中的元素总数</span><br>sCard 【key】<br><br>Ⅱ.<br><span class="hljs-comment"># 从集合中随机弹出一个元素，元素不删除</span><br>sRandMember 【key】 [数字]<br><span class="hljs-comment"># 从集合中随机弹出一个元素，出一个删一个</span><br>spop 【key】 [数字]<br><br>Ⅲ.<br><span class="hljs-comment"># 集合的差集运算A-B[-c]，属于A但不属于B[和c]的元素构成的集合</span><br>sDiff keyA [keyB keyc...]<br><br><span class="hljs-comment"># 集合的交集运算 A∩B，属于A同时也属于B的共同拥有的元素构成的集合</span><br>sInter keyA [keyB ...]<br><br><span class="hljs-comment"># 集合的并集运算 AUB，属于A或者属于B的元素合并后的集合</span><br>sUnion keyA [keyB ...]<br></code></pre></td></tr></table></figure><ul><li>应用场景<ul><li>微信抽奖小程序</li><li>微信朋友圈点赞</li><li>微博好友关注社交关系，共同关注的人，我关注的人也关注他(大家爱好相同)</li><li>QQ内推可能认识的人</li></ul></li></ul><h2 id="ZSet（SortedSet）"><a href="#ZSet（SortedSet）" class="headerlink" title="ZSet（SortedSet）"></a>ZSet（SortedSet）</h2><p><strong>向有序集合中加入一个元素和该元素的分数</strong></p><ul><li>常用命令<ul><li>Ⅰ.增删改查元素</li><li>Ⅱ.获取指定分数范围的元素</li><li>Ⅲ.增加某个元素的分数</li><li>Ⅳ.按照排名范围删除元素</li><li>Ⅴ.获取元素的排名</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">Ⅰ.<br><span class="hljs-comment"># 添加元素</span><br>zAdd 【key】 【score】 【member】 [score member ...]<br><span class="hljs-comment"># 按照元素分数从小到大的顺序，返回索引从start到stop之间的所有元素</span><br>zRange  【start】 【stop】 [WITHSCORES]<br><span class="hljs-comment"># 获取元素的分数</span><br>zScore 【key】 【member】<br><span class="hljs-comment"># 删除元素</span><br>zRem 【key】 【member】 [member ...]<br><span class="hljs-comment"># 获取集合中元素的数量</span><br>zCard key<br><br>Ⅱ.<br><span class="hljs-comment"># 获取指定分数范围的元素</span><br>zRangeByScore 【key】 【min】 【max】 [WITHSCORES] [LIMIT offset count]<br><br>Ⅲ.<br><span class="hljs-comment"># 增加某个元素的分数</span><br>zIncrBy 【key】 【increment】 【member】<br><br>Ⅳ.<br><span class="hljs-comment"># 按照排名范围删除元素</span><br>zRemRangeByRank 【key】 【start】 【stop】<br><br>Ⅴ.<br><span class="hljs-comment"># 获取元素的排名 - 从小到大</span><br>zRank 【key】 【member】<br><span class="hljs-comment"># 获取元素的排名 - 从大到小</span><br>zRevRank 【key】 【member】<br></code></pre></td></tr></table></figure><ul><li>应用场景<ul><li>根据商品销售对商品进行排序显示<blockquote><p>思路：定义商品销售排行榜(sorted set集合)，key为goods:sellsort，分数为商品销售数量。<br>商品编号1001的销量是9，商品编号1002的销量是15。【zadd goods:sellsort 9 1001 15 1002】<br>有一个客户又买了2件商品1001，商品编号1001销量加2。【zincrby goods:sellsort 2 1001】<br>求商品销量前10名。【zRange goods:sellsort 0 10 withscores】</p></blockquote></li><li>热搜</li></ul></li></ul><h1 id="3种-新-类型"><a href="#3种-新-类型" class="headerlink" title="3种 新? 类型"></a>3种 新? 类型</h1><ul><li><p>为什么出来这3个类型？</p><blockquote><p>亿级数据的收集+统计</p></blockquote></li><li><p>统计的类型有哪些？</p><ul><li>聚合统计，统计多个集合元素的聚合结果，就是前面讲解过的交差并等集合统计，交并差集和聚合函数的应用。</li><li>排序统计，在⾯对需要展示最新列表、排行榜等场景时，如果数据更新频繁或者需要分页显示，建议使⽤ZSet。</li><li>二值统计，集合元素的取值就只有0和1两种，如签到打卡的场景中。见<strong>BitMap</strong></li><li>基数统计，指统计⼀个集合中不重复的元素个数，见<strong>HyperLogLog</strong></li></ul></li></ul><h2 id="BitMap"><a href="#BitMap" class="headerlink" title="BitMap"></a>BitMap</h2><h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><p><img src="/images/Redis(%E4%B8%89)-9%E5%A4%A7%E7%B1%BB%E5%9E%8B/BitMap.png" alt="BitMap"></p><p><strong>是用String类型作为底层数据结构实现的一种统计二值状态的数据类型</strong></p><p>位图本质是数组，它是<strong>基于String数据类型</strong>的按位的操作。<br>该数组由多个二进制位组成，每个二进制位都对应一个偏移量(我们可以称之为一个索引或者位格)。<br>Bitmap支持的最大位数是2^32位，它可以极大的节约存储空间，使用512M内存就可以存储多大42.9亿的字节信息(2^32 &#x3D; 4294967296)</p><blockquote><p>按年去存储一个用户的签到情况，365天只需要365&#x2F;8≈46Byte<br>1000W用户量一年也只需要44MB就足够了。<br>假如是亿级的系统，每天使用1个1亿位的Bitmap约占12MB的内存（10^8&#x2F;8&#x2F;1024&#x2F;1024），<br>10天的Bitmap的内存开销约为120MB，内存压力不算太高。<br>在实际使用时，最好对Bitmap设置过期时间，让Redis自动删除不再需要的签到记录以节省内存开销。</p></blockquote><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><p><img src="/images/Redis(%E4%B8%89)-9%E5%A4%A7%E7%B1%BB%E5%9E%8B/%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4.png" alt="基本命令.png"></p><p><strong>Bitmap的偏移量是从零开始算的</strong></p><ul><li><p><strong>set和get</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># setbit 键 偏移位 只能零或者1 </span><br>setbit 【key】 【offset】 【value】<br><span class="hljs-comment"># 获取指定位的值</span><br>getbit 【key】 【offset】<br></code></pre></td></tr></table></figure><p><img src="/images/Redis(%E4%B8%89)-9%E5%A4%A7%E7%B1%BB%E5%9E%8B/setbit.png" alt="setbit"></p></li><li><p><strong>count</strong>统计有多少个<strong>1</strong></p></li><li><p><strong>bitop</strong><br>获取连续2天都签到的用户？<br>加入某个网站或者系统，它的用户有1000W，做个用户id和位置的映射。<br>比如0号位对应用户id：uid-092iok-lkj<br>比如1号位对应用户id：uid-7388c-xxx<br><img src="/images/Redis(%E4%B8%89)-9%E5%A4%A7%E7%B1%BB%E5%9E%8B/bitop.png" alt="bitop"></p></li></ul><h2 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h2><h3 id="是什么？-1"><a href="#是什么？-1" class="headerlink" title="是什么？"></a>是什么？</h3><p><strong>去重复统计功能的<code>基数估计算法</code>-就是HyperLogLog <code>(String)</code></strong></p><p>基数：是一种数据集，去重复后的真实个数<br>基数统计：用于统计一个集合中不重复的元素个数，就是对集合去重复后剩余元素的计算<br>基数统计就是HyperLogLog<br><img src="/images/Redis(%E4%B8%89)-9%E5%A4%A7%E7%B1%BB%E5%9E%8B/HyperLogLog.png" alt="HyperLogLog"></p><h3 id="基本命令-1"><a href="#基本命令-1" class="headerlink" title="基本命令"></a>基本命令</h3><p><img src="/images/Redis(%E4%B8%89)-9%E5%A4%A7%E7%B1%BB%E5%9E%8B/hll%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4.png" alt="hll基本命令"></p><h3 id="原理说明？"><a href="#原理说明？" class="headerlink" title="原理说明？"></a>原理说明？</h3><ul><li>只是进行不重复的基数统计，不是集合也不保存数据，只记录数量而不是具体内容。</li><li>有误差，非精确统计，牺牲准确率来换取空间，误差仅仅只是<strong>0.81%左右</strong><blockquote><p>这个误差如何来的?论文地址和出处??<br><a href="http://antirez.com/news/75">http://antirez.com/news/75</a><br><img src="/images/Redis(%E4%B8%89)-9%E5%A4%A7%E7%B1%BB%E5%9E%8B/Redis%E4%B9%8B%E7%88%B6%E5%AE%89%E8%92%82%E9%9B%B7%E6%96%AF%E5%9B%9E%E7%AD%94.png" alt="Redis之父安蒂雷斯回答"></p></blockquote></li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>网站首页亿级UV的Redis统计方案</li></ul><h2 id="GEO"><a href="#GEO" class="headerlink" title="GEO"></a>GEO</h2><p><strong>底层type类型为ZSet</strong></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote><p>GeoHash核心原理解析：<a href="https://www.cnblogs.com/LBSer/p/3310455.html">https://www.cnblogs.com/LBSer/p/3310455.html</a></p></blockquote><p><img src="/images/Redis(%E4%B8%89)-9%E5%A4%A7%E7%B1%BB%E5%9E%8B/%E5%9C%B0%E5%9B%BE%E4%B8%89%E6%AD%A5.png" alt="地图三步"><br>主要分为三步：<br>1.将三维的地球变为二维的坐标<br>2.在将二维的坐标转换为一维的点块<br>3.最后将一维的点块转换为二进制再通过base32编码</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="geoAdd"><a href="#geoAdd" class="headerlink" title="geoAdd"></a>geoAdd</h4><ul><li><strong>geoAdd</strong> 多个经度(longitude)、纬度(latitude)、位置名称(member)添加到指定的 key 中<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">geoAdd city 116.403963 39.915119 <span class="hljs-string">&quot;天安门&quot;</span> 116.403414 39.924091 <span class="hljs-string">&quot;故宫&quot;</span> 116.024067 40.362639 <span class="hljs-string">&quot;长城&quot;</span><br></code></pre></td></tr></table></figure><img src="/images/Redis(%E4%B8%89)-9%E5%A4%A7%E7%B1%BB%E5%9E%8B/geoAdd.png" alt="geoAdd"></li></ul><h4 id="geoHash"><a href="#geoHash" class="headerlink" title="geoHash"></a>geoHash</h4><ul><li><strong>geoHash</strong> 返回一个或多个位置元素的 Geohash 表示<br><img src="/images/Redis(%E4%B8%89)-9%E5%A4%A7%E7%B1%BB%E5%9E%8B/geoHash.png" alt="geoHash"></li></ul><h4 id="geoPos"><a href="#geoPos" class="headerlink" title="geoPos"></a>geoPos</h4><ul><li><strong>geoPos</strong> 从键里面返回所有给定位置元素的位置（经度和纬度）<br><img src="/images/Redis(%E4%B8%89)-9%E5%A4%A7%E7%B1%BB%E5%9E%8B/geoPos.png" alt="geoPos"></li></ul><h4 id="geoDist"><a href="#geoDist" class="headerlink" title="geoDist"></a>geoDist</h4><ul><li><strong>geoDist</strong> 返回两个给定位置之间的距离。<br><img src="/images/Redis(%E4%B8%89)-9%E5%A4%A7%E7%B1%BB%E5%9E%8B/geoDist.png" alt="geoDist"></li></ul><h4 id="geoRadius"><a href="#geoRadius" class="headerlink" title="geoRadius"></a>geoRadius</h4><ul><li><strong>geoRadius</strong> 以给定的经纬度为中心， 返回与中心的距离不超过给定最大距离的所有位置元素。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># WITHDIST: 在返回位置元素的同时，将位置元素与中心之间的距离也一并返回。距离的单位和用户给定的范围单位保持一致。</span><br><span class="hljs-comment"># WITHCOORD: 将位置元素的经度和维度也一并返回。</span><br><span class="hljs-comment"># WITHHASH: 以 52 位有符号整数的形式，返回位置元素经过原始geohash编码的有序集合分值。这个选项主要用于底层应用或者调试，实际中的作用并不大</span><br><span class="hljs-comment"># COUNT 限定返回的记录数。</span><br>geoRadius city 116.418017 39.914402 10 km withdist withcoord count 10 withhash des<br></code></pre></td></tr></table></figure><img src="/images/Redis(%E4%B8%89)-9%E5%A4%A7%E7%B1%BB%E5%9E%8B/geoRadius.png" alt="geoRadius"></li></ul><h4 id="geoRadiusByMember"><a href="#geoRadiusByMember" class="headerlink" title="geoRadiusByMember"></a>geoRadiusByMember</h4><ul><li><strong>geoRadiusByMember</strong> 跟geoRadius类似<br><img src="/images/Redis(%E4%B8%89)-9%E5%A4%A7%E7%B1%BB%E5%9E%8B/geoRadiusByMember.png" alt="geoRadiusByMember"></li></ul><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li><p>地图位置附近的酒店推送</p></li><li><p>上方命令Java示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.geo.Distance;<br><span class="hljs-keyword">import</span> org.springframework.data.geo.GeoResults;<br><span class="hljs-keyword">import</span> org.springframework.data.geo.Metrics;<br><span class="hljs-keyword">import</span> org.springframework.data.geo.Point;<br><span class="hljs-keyword">import</span> org.springframework.data.geo.Circle;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisGeoCommands;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GeoController</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CITY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;city&quot;</span>;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@ApiOperation(&quot;新增天安门故宫长城经纬度&quot;)</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/geoadd&quot;, method = RequestMethod.POST)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">geoAdd</span><span class="hljs-params">()</span> &#123;<br>        Map&lt;String, Point&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;天安门&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">116.403963</span>, <span class="hljs-number">39.915119</span>));<br>        map.put(<span class="hljs-string">&quot;故宫&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">116.403414</span>, <span class="hljs-number">39.924091</span>));<br>        map.put(<span class="hljs-string">&quot;长城&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">116.024067</span>, <span class="hljs-number">40.362639</span>));<br><br>        redisTemplate.opsForGeo().add(CITY, map);<br><br>        <span class="hljs-keyword">return</span> map.toString();<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(&quot;获取地理位置的坐标&quot;)</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/geopos&quot;, method = RequestMethod.GET)</span><br>    <span class="hljs-keyword">public</span> Point <span class="hljs-title function_">position</span><span class="hljs-params">(String member)</span> &#123;<br>        <span class="hljs-comment">//获取经纬度坐标</span><br>        List&lt;Point&gt; list = <span class="hljs-built_in">this</span>.redisTemplate.opsForGeo().position(CITY, member);<br>        <span class="hljs-keyword">return</span> list.get(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(&quot;geohash算法生成的base32编码值&quot;)</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/geohash&quot;, method = RequestMethod.GET)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hash</span><span class="hljs-params">(String member)</span> &#123;<br>        <span class="hljs-comment">//geohash算法生成的base32编码值</span><br>        List&lt;String&gt; list = <span class="hljs-built_in">this</span>.redisTemplate.opsForGeo().hash(CITY, member);<br>        <span class="hljs-keyword">return</span> list.get(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(&quot;计算两个位置之间的距离&quot;)</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/geodist&quot;, method = RequestMethod.GET)</span><br>    <span class="hljs-keyword">public</span> Distance <span class="hljs-title function_">distance</span><span class="hljs-params">(String member1, String member2)</span> &#123;<br>        <span class="hljs-type">Distance</span> <span class="hljs-variable">distance</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.redisTemplate.opsForGeo().distance(CITY, member1, member2, RedisGeoCommands.DistanceUnit.KILOMETERS);<br>        <span class="hljs-keyword">return</span> distance;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过经度，纬度查找附近的</span><br><span class="hljs-comment">     * 北京王府井位置116.418017,39.914402,这里为了方便讲课，故意写死</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ApiOperation(&quot;通过经度，纬度查找附近的&quot;)</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/georadius&quot;, method = RequestMethod.GET)</span><br>    <span class="hljs-keyword">public</span> GeoResults <span class="hljs-title function_">radiusByxy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//这个坐标是北京王府井位置</span><br>        <span class="hljs-type">Circle</span> <span class="hljs-variable">circle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-number">116.418017</span>, <span class="hljs-number">39.914402</span>, Metrics.MILES.getMultiplier());<br>        <span class="hljs-comment">//返回50条</span><br>        RedisGeoCommands.<span class="hljs-type">GeoRadiusCommandArgs</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> RedisGeoCommands.GeoRadiusCommandArgs.newGeoRadiusArgs().includeDistance().includeCoordinates().sortAscending().limit(<span class="hljs-number">10</span>);<br>        GeoResults&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt; geoResults = <span class="hljs-built_in">this</span>.redisTemplate.opsForGeo().radius(CITY, circle, args);<br>        <span class="hljs-keyword">return</span> geoResults;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过地方查找附近</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ApiOperation(&quot;通过地方查找附近&quot;)</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/georadiusByMember&quot;, method = RequestMethod.GET)</span><br>    <span class="hljs-keyword">public</span> GeoResults <span class="hljs-title function_">radiusByMember</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">member</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;天安门&quot;</span>;<br>        <span class="hljs-comment">//返回50条</span><br>        RedisGeoCommands.<span class="hljs-type">GeoRadiusCommandArgs</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> RedisGeoCommands.GeoRadiusCommandArgs.newGeoRadiusArgs().includeDistance().includeCoordinates().sortAscending().limit(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">//半径10公里内</span><br>        <span class="hljs-type">Distance</span> <span class="hljs-variable">distance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Distance</span>(<span class="hljs-number">10</span>, Metrics.KILOMETERS);<br>        GeoResults&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt; geoResults = <span class="hljs-built_in">this</span>.redisTemplate.opsForGeo().radius(CITY, member, distance, args);<br>        <span class="hljs-keyword">return</span> geoResults;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis(二)-SpringBoot基本使用</title>
    <link href="/2022/06/28/Redis(%E4%BA%8C)-SpringBoot%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/06/28/Redis(%E4%BA%8C)-SpringBoot%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>SpringBoot整合Redis、Mysql、Swagger… 的基本增删改查使用示例。</p><span id="more"></span><hr><hr><h2 id="主要关注：-Java代码-基本CRUD逻辑-增和查"><a href="#主要关注：-Java代码-基本CRUD逻辑-增和查" class="headerlink" title="主要关注： Java代码 - 基本CRUD逻辑 - 增和查"></a>主要关注： Java代码 - 基本CRUD逻辑 - 增和查</h2><h1 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h1><h2 id="Ⅰ-基本CRUD逻辑"><a href="#Ⅰ-基本CRUD逻辑" class="headerlink" title="Ⅰ.基本CRUD逻辑"></a>Ⅰ.基本CRUD逻辑</h2><ul><li>基于UserService的实现逻辑<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.atguigu.redis.entities.User;<br><span class="hljs-keyword">import</span> com.atguigu.redis.mapper.UserMapper;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CACHE_KEY_USER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user:&quot;</span>;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-增-重要"><a href="#1-增-重要" class="headerlink" title="1.增 - 重要"></a>1.增 - 重要</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span> &#123;<br>    <span class="hljs-comment">//1 先插入mysql并成功</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> userMapper.insertSelective(user);<br><br>    <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//2 需要再次查询一下mysql将数据捞回来并ok</span><br>        user = userMapper.selectByPrimaryKey(user.getId());<br>        <span class="hljs-comment">//3 将捞出来的user存进redis，完成新增功能的数据一致性。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> CACHE_KEY_USER + user.getId();<br>        redisTemplate.opsForValue().set(key, user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-删"><a href="#2-删" class="headerlink" title="2.删"></a>2.删</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(Integer id)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> userMapper.deleteByPrimaryKey(id);<br><br>    <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> CACHE_KEY_USER + id;<br>        redisTemplate.delete(key);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-改"><a href="#3-改" class="headerlink" title="3.改"></a>3.改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> userMapper.updateByPrimaryKeySelective(user);<br>    <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//2 需要再次查询一下mysql将数据捞回来并ok</span><br>        user = userMapper.selectByPrimaryKey(user.getId());<br>        <span class="hljs-comment">//3 将捞出来的user存进redis，完成修改</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> CACHE_KEY_USER + user.getId();<br>        redisTemplate.opsForValue().set(key, user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-查-重要"><a href="#4-查-重要" class="headerlink" title="4.查 - 重要"></a>4.查 - 重要</h3><ul><li>方式一，业务逻辑并没有写错，对于小厂中厂(QPS《&#x3D;1000)可以使用，但是大厂不行<br>可能出现热点key失效，导致缓存击穿。</li></ul><p>方式一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> User <span class="hljs-title function_">findUserById</span><span class="hljs-params">(Integer id)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> CACHE_KEY_USER + id;<br><br>    <span class="hljs-comment">//1 先从redis里面查询，如果有直接返回结果，如果没有再去查询mysql</span><br>    user = (User) redisTemplate.opsForValue().get(key);<br><br>    <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">//2 redis里面无，继续查询mysql</span><br>        user = userMapper.selectByPrimaryKey(id);<br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//3.1 redis+mysql 都无数据</span><br>            <span class="hljs-comment">//你具体细化，防止多次穿透，我们规定，记录下导致穿透的这个key回写redis</span><br>            <span class="hljs-keyword">return</span> user;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//3.2 mysql有，需要将数据写回redis，保证下一次的缓存命中率</span><br>            redisTemplate.opsForValue().set(key, user);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>方式二，加强补充，避免突然key失效了，打爆mysql，做一下预防，尽量不出现击穿的情况。</li></ul><p>方式二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> User <span class="hljs-title function_">findUserById2</span><span class="hljs-params">(Integer id)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> CACHE_KEY_USER + id;<br><br>    <span class="hljs-comment">//1 先从redis里面查询，如果有直接返回结果，如果没有再去查询mysql</span><br>    user = (User) redisTemplate.opsForValue().get(key);<br><br>    <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">//2 大厂用，对于高QPS的优化，进来就先加锁，保证一个请求操作，让外面的redis等待一下，避免击穿mysql</span><br>        <span class="hljs-keyword">synchronized</span> (UserService.class) &#123;<br>            user = (User) redisTemplate.opsForValue().get(key);<br>            <span class="hljs-comment">//3 二次查redis还是null，可以去查mysql了(mysql默认有数据)</span><br>            <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//4 查询mysql拿数据</span><br>                user = userMapper.selectByPrimaryKey(id);<span class="hljs-comment">//mysql有数据默认</span><br>                <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//5 mysql里面有数据的，需要回写redis，完成数据一致性的同步工作</span><br>                    redisTemplate.opsForValue().setIfAbsent(key, user, <span class="hljs-number">7L</span>, TimeUnit.DAYS);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Ⅱ-配置类"><a href="#Ⅱ-配置类" class="headerlink" title="Ⅱ.配置类"></a>Ⅱ.配置类</h2><h3 id="RedisConfig"><a href="#RedisConfig" class="headerlink" title="RedisConfig"></a>RedisConfig</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lettuceConnectionFactory</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> redis序列化的工具配置类，下面这个请一定开启配置</span><br><span class="hljs-comment">     * 127.0.0.1:6379&gt; keys *</span><br><span class="hljs-comment">     * 1) &quot;ord:102&quot;  序列化过</span><br><span class="hljs-comment">     * 2) &quot;\xac\xed\x00\x05t\x00\aord:102&quot;   野生，没有序列化过</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Serializable&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(LettuceConnectionFactory lettuceConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;String, Serializable&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br><br>        redisTemplate.setConnectionFactory(lettuceConnectionFactory);<br>        <span class="hljs-comment">//设置key序列化方式string</span><br>        redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        <span class="hljs-comment">//设置value的序列化方式json</span><br>        redisTemplate.setValueSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>());<br><br>        redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.setHashValueSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>());<br><br>        redisTemplate.afterPropertiesSet();<br><br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="SwaggerConfig"><a href="#SwaggerConfig" class="headerlink" title="SwaggerConfig"></a>SwaggerConfig</h3><ul><li>后续访问通过 <strong>localhost:5023&#x2F;swagger-ui.html</strong> 来访问</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.swagger2.enabled&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean enabled;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">createRestApi</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .apiInfo(apiInfo())<br>                .enable(enabled)<br>                .select()<br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.aman.redis&quot;</span>)) <span class="hljs-comment">//你自己的package</span><br>                .paths(PathSelectors.any())<br>                .build();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;aman-redis-标题测试&quot;</span> + <span class="hljs-string">&quot;\t&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>).format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()))<br>                .description(<span class="hljs-string">&quot;介绍-aman-redis-测试&quot;</span>)<br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .termsOfServiceUrl(<span class="hljs-string">&quot;https://nullaman.com/&quot;</span>)<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="项目配置文件"><a href="#项目配置文件" class="headerlink" title="项目配置文件"></a>项目配置文件</h1><h2 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1.pom.xml"></a>1.pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aman.redis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redis_20210511<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">junit.version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">junit.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">log4j.version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">log4j.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">lombok.version</span>&gt;</span>1.16.18<span class="hljs-tag">&lt;/<span class="hljs-name">lombok.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mysql.version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">druid.version</span>&gt;</span>1.1.16<span class="hljs-tag">&lt;/<span class="hljs-name">druid.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper.version</span>&gt;</span>4.1.5<span class="hljs-tag">&lt;/<span class="hljs-name">mapper.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mybatis.spring.boot.version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis.spring.boot.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--guava Google 开源的 Guava 中自带的布隆过滤器--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.guava<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>guava<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>23.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- redisson --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.redisson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redisson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.13.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--SpringBoot通用依赖模块--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--swagger2--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--SpringBoot与Redis整合依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--springCache--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--springCache连接池依赖包--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- jedis --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Mysql数据库驱动--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--SpringBoot集成druid连接池--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mybatis和springboot整合--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 添加springboot对amqp的支持 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-codec<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-codec<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--通用基础配置junit/devtools/test/log4j/lombok/hutool--&gt;</span><br>        <span class="hljs-comment">&lt;!--hutool--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--persistence--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.persistence<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>persistence-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--通用Mapper--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tk.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mapper.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-application-properties"><a href="#2-application-properties" class="headerlink" title="2.application.properties"></a>2.application.properties</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">5023</span><br><br><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">redis_aman</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># ========================logging 日志相关的配置=====================</span><br><span class="hljs-comment">#系统默认，全局root配置的日志形式，可以注释掉</span><br><span class="hljs-attr">logging.level.root</span>=<span class="hljs-string">warn</span><br><span class="hljs-comment">#开发人员自己设置的包结构，对那个package进行什么级别的日志监控</span><br><span class="hljs-attr">logging.level.com.aman.redis</span>=<span class="hljs-string">info</span><br><span class="hljs-comment">#开发人员自定义日志路径和日志名称</span><br><span class="hljs-attr">logging.file.name</span>=<span class="hljs-string">D:/logs/redis_logs.log</span><br><span class="hljs-comment">#%d&#123;HH:mm:ss.SSS&#125;――日志输出时间</span><br><span class="hljs-comment">#%thread――输出日志的进程名字，这在Web应用以及异步任务处理中很有用</span><br><span class="hljs-comment">#%-5level――日志级别，并且使用5个字符靠左对齐</span><br><span class="hljs-comment">#%logger- ――日志输出者的名字</span><br><span class="hljs-comment">#%msg――日志消息</span><br><span class="hljs-comment">#%n――平台的换行符</span><br><span class="hljs-comment">#logging.pattern.console=%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger- %msg%n</span><br><span class="hljs-attr">logging.pattern.console</span>=<span class="hljs-string">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger- %msg%n </span><br><span class="hljs-attr">logging.pattern.file</span>=<span class="hljs-string">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger- %msg%n</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># ========================alibaba.druid相关配置=====================</span><br><span class="hljs-attr">spring.datasource.type</span>=<span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/db_test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string"></span><br><span class="hljs-attr">spring.datasource.druid.test-while-idle</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># ========================redis相关配置=====================</span><br><span class="hljs-comment"># Redis数据库索引（默认为0）</span><br><span class="hljs-attr">spring.redis.database</span>=<span class="hljs-string">0</span><br><span class="hljs-comment"># Redis服务器地址</span><br><span class="hljs-attr">spring.redis.host</span>=<span class="hljs-string">127.0.0.1</span><br><span class="hljs-comment"># Redis服务器连接端口</span><br><span class="hljs-attr">spring.redis.port</span>=<span class="hljs-string">6379</span><br><span class="hljs-comment"># Redis服务器连接密码（默认为空）</span><br><span class="hljs-attr">spring.redis.password</span>=<span class="hljs-string"></span><br><span class="hljs-comment"># 连接池最大连接数（使用负值表示没有限制） 默认 8</span><br><span class="hljs-attr">spring.redis.lettuce.pool.max-active</span>=<span class="hljs-string">8</span><br><span class="hljs-comment"># 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1，记得加入单位ms，不然idea报红色</span><br><span class="hljs-attr">spring.redis.lettuce.pool.max-wait</span>=<span class="hljs-string">-1ms</span><br><span class="hljs-comment"># 连接池中的最大空闲连接 默认 8</span><br><span class="hljs-attr">spring.redis.lettuce.pool.max-idle</span>=<span class="hljs-string">8</span><br><span class="hljs-comment"># 连接池中的最小空闲连接 默认 0</span><br><span class="hljs-attr">spring.redis.lettuce.pool.min-idle</span>=<span class="hljs-string">0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># ========================mybatis相关配置===================</span><br><span class="hljs-attr">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:mapper/*.xml</span><br><span class="hljs-attr">mybatis.type-aliases-package</span>=<span class="hljs-string">com.aman.redis.entities</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># ========================swagger=====================</span><br><span class="hljs-attr">spring.swagger2.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># ========================rabbitmq相关配置===================</span><br><span class="hljs-comment">#spring.rabbitmq.host=127.0.0.1</span><br><span class="hljs-comment">#spring.rabbitmq.port=5672</span><br><span class="hljs-comment">#spring.rabbitmq.username=guest</span><br><span class="hljs-comment">#spring.rabbitmq.password=guest</span><br><span class="hljs-comment">#spring.rabbitmq.virtual-host=/</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># ========================redis 布隆过滤器相关配置=====================</span><br><span class="hljs-comment">#redis.bloom.url= 127.0.0.1</span><br><span class="hljs-comment">#redis.bloom.port= 6379</span><br><span class="hljs-comment">#redis.bloom.init-capacity= 10000</span><br><span class="hljs-comment">#redis.bloom.error-rate= 0.01</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Spring</tag>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis(一)-基础安装使用</title>
    <link href="/2022/06/27/Redis(%E4%B8%80)-%E5%9F%BA%E7%A1%80%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/06/27/Redis(%E4%B8%80)-%E5%9F%BA%E7%A1%80%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>重温Redis。基础、安装、使用、</p><span id="more"></span><h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><blockquote><p>官网：<a href="https://redis.io/">https://redis.io/</a><br>下载：<a href="https://redis.io/download/">https://redis.io/download/</a><br>旧版：<a href="https://download.redis.io/releases/">https://download.redis.io/releases/</a></p></blockquote><ul><li>我这里选择的是redis-6.2.1.tar.gz</li></ul><h2 id="2-上传、解压、安装"><a href="#2-上传、解压、安装" class="headerlink" title="2.上传、解压、安装"></a>2.上传、解压、安装</h2><p>上传文件到服务器路径 <code>/usr/local/</code> </p><ul><li><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -xzvf redis-6.2.1.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>安装 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># gcc --version 查看gcc版本</span><br><span class="hljs-comment"># 如果没有安装gcc，需要安装gcc</span><br>yun install gcc<br><br><span class="hljs-built_in">cd</span> /usr/local/redis-6.2.1/<br><span class="hljs-comment"># 编译</span><br>make<br><span class="hljs-comment"># 安装</span><br>make install<br></code></pre></td></tr></table></figure><p>安装完成后文件生成，默认路径为 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</p></li></ul><h2 id="3-修改配置"><a href="#3-修改配置" class="headerlink" title="3.修改配置"></a>3.修改配置</h2><ul><li>修改配置文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入redis目录</span><br><span class="hljs-built_in">cd</span> /usr/local/redis-6.2.1/<br><span class="hljs-comment"># 备份配置文件</span><br><span class="hljs-built_in">cp</span> redis.conf redis.conf.bak<br><span class="hljs-comment"># 将文件复制一份到启动目录</span><br><span class="hljs-built_in">cp</span> redis.conf ../bin/redis-conf<br><span class="hljs-comment"># 修改启动目录的配置</span><br><span class="hljs-built_in">cd</span> /usr/locl/bin<br>vim redis-conf<br></code></pre></td></tr></table></figure></li></ul><p>修改三个配置:（默认配置）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 后台启动</span><br><span class="hljs-attr">daemonize</span> <span class="hljs-string">no</span><br><span class="hljs-comment">#外网访问</span><br><span class="hljs-attr">bind</span> <span class="hljs-string">127.0.0.1 -::1</span><br><span class="hljs-comment"># 安全模式</span><br><span class="hljs-attr">protected-mode</span> <span class="hljs-string">yes</span><br><span class="hljs-comment"># 设置密码</span><br><span class="hljs-comment"># requirepass foobared </span><br></code></pre></td></tr></table></figure><p><strong>修改后</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 后台启动</span><br><span class="hljs-attr">daemonize</span> <span class="hljs-string">yes</span><br><span class="hljs-comment">#外网访问，或者 直接注释掉</span><br><span class="hljs-attr">bind</span> <span class="hljs-string">0.0.0.0</span><br><span class="hljs-comment"># 安全模式</span><br><span class="hljs-attr">protected-mode</span> <span class="hljs-string">no</span><br><span class="hljs-comment"># 设置密码</span><br><span class="hljs-attr">requirepass</span>  <span class="hljs-string">【密码】</span><br></code></pre></td></tr></table></figure><h2 id="4-启动"><a href="#4-启动" class="headerlink" title="4.启动"></a>4.启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-server redis-conf<br></code></pre></td></tr></table></figure><h2 id="5-可视化工具"><a href="#5-可视化工具" class="headerlink" title="5.可视化工具"></a>5.可视化工具</h2><ul><li>使用工具AnotherRedisDesktopManager<blockquote><p><a href="https://github.com/qishibo/AnotherRedisDesktopManager">https://github.com/qishibo/AnotherRedisDesktopManager</a></p></blockquote></li></ul><h2 id="6-使用命令教程"><a href="#6-使用命令教程" class="headerlink" title="6.使用命令教程"></a>6.使用命令教程</h2><blockquote><p><a href="http://www.redis.cn/commands.html">http://www.redis.cn/commands.html</a><br><a href="http://doc.redisfans.com/">http://doc.redisfans.com/</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka-eagle监控平台</title>
    <link href="/2022/06/24/Kafka-eagle%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/"/>
    <url>/2022/06/24/Kafka-eagle%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/</url>
    
    <content type="html"><![CDATA[<p>简易搭建版。Kafka-eagle监控平台。</p><span id="more"></span><h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><p>官网下载地址</p><blockquote><p><a href="http://download.kafka-eagle.org/">http://download.kafka-eagle.org/</a></p></blockquote><h2 id="2-上传服务器、解压"><a href="#2-上传服务器、解压" class="headerlink" title="2.上传服务器、解压"></a>2.上传服务器、解压</h2><ul><li>将文件上穿到目录 &#x2F;usr&#x2F;local&#x2F;kafka-eagle&#x2F; 下</li><li>解压得到efak-web-2.1.0-bin.tar.gz，再解压得到含有bin、conf、db….的<br>（不知道为啥，我解压了两次，官网下载的是kafka-eagle-bin-2.1.0.tar.gz，然后解压得到上面的）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf efak-web-2.1.0-bin.tar.gz<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-配置环境"><a href="#3-配置环境" class="headerlink" title="3.配置环境"></a>3.配置环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 得到解压目录</span><br><span class="hljs-built_in">pwd</span><br><span class="hljs-comment"># 新增环境变量</span><br>vim /etc/profile<br><span class="hljs-comment"># 生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><ul><li>vim &#x2F;etc&#x2F;profile 新增这两行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> KE_HOME=/usr/local/kafka-eagle<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$KE_HOME</span>/bin<br></code></pre></td></tr></table></figure><img src="/images/Kafka-eagle%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE.png" alt="环境变量配置.png"></li></ul><h2 id="4-修改kafka-eagle的配置⽂件"><a href="#4-修改kafka-eagle的配置⽂件" class="headerlink" title="4.修改kafka-eagle的配置⽂件"></a>4.修改kafka-eagle的配置⽂件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> config<br>vim system-config.properties<br></code></pre></td></tr></table></figure><ul><li><strong>修改前：</strong><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 修改前</span><br><span class="hljs-comment">######################################</span><br><span class="hljs-comment"># multi zookeeper &amp; kafka cluster list</span><br><span class="hljs-comment"># Settings prefixed with &#x27;kafka.eagle.&#x27; will be deprecated, use &#x27;efak.&#x27; instead</span><br><span class="hljs-comment">######################################</span><br><span class="hljs-attr">efak.zk.cluster.alias</span>=<span class="hljs-string">cluster1,cluster2</span><br><span class="hljs-attr">cluster1.zk.list</span>=<span class="hljs-string">tdn1:2181,tdn2:2181,tdn3:2181</span><br><span class="hljs-attr">cluster2.zk.list</span>=<span class="hljs-string">xdn10:2181,xdn11:2181,xdn12:2181</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">######################################</span><br><span class="hljs-comment"># kafka mysql jdbc driver address</span><br><span class="hljs-comment">######################################</span><br><span class="hljs-attr">efak.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">efak.url</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/ke?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull</span><br><span class="hljs-attr">efak.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">efak.password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure></li><li><strong>修改后：</strong><br><img src="/images/Kafka-eagle%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/%E4%BF%AE%E6%94%B9%E5%90%8E%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B61.png" alt="修改后配置文件1.png"><br><img src="/images/Kafka-eagle%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/%E4%BF%AE%E6%94%B9%E5%90%8E%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B62.png" alt="修改后的配置文件2.png"></li></ul><h2 id="5-启动"><a href="#5-启动" class="headerlink" title="5.启动"></a>5.启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh ke.sh start<br></code></pre></td></tr></table></figure><p><img src="/images/Kafka-eagle%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.png" alt="启动成功.png"></p><hr><h2 id="6-访问"><a href="#6-访问" class="headerlink" title="6.访问"></a>6.访问</h2><blockquote><p><a href="http://127.0.0.1:8048/">http://127.0.0.1:8048</a><br>帐号：admin<br>密码：123456</p></blockquote><hr><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/images/Kafka-eagle%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/%E8%AE%BF%E9%97%AEadmin123456.png" alt="访问admin123456"></h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="/images/Kafka-eagle%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/%E8%BF%9B%E5%85%A51.png" alt="进入1.png"></h2><p><img src="/images/Kafka-eagle%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/%E8%BF%9B%E5%85%A52.png" alt="进入2.png"></p>]]></content>
    
    
    <categories>
      
      <category>Kafka</category>
      
      <category>Kafka-eagle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kafka</tag>
      
      <tag>Kafka-eagle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka(五)-集群、优化</title>
    <link href="/2022/06/24/Kafka(%E4%BA%94)-%E9%9B%86%E7%BE%A4%E3%80%81%E4%BC%98%E5%8C%96/"/>
    <url>/2022/06/24/Kafka(%E4%BA%94)-%E9%9B%86%E7%BE%A4%E3%80%81%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>kafka集群中的controller、rebalance、HW、LEO…<br>kafka优化：防消息丢失、防重复消费、顺序消费、消息积压…</p><span id="more"></span><h1 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h1><blockquote><p>了解kafka集群中的controller、rebalance、HW、LEO。详解。</p></blockquote><p><img src="/images/Kafka(%E4%BA%94)-%E9%9B%86%E7%BE%A4%E3%80%81%E4%BC%98%E5%8C%96/%E9%9B%86%E7%BE%A4%E5%9B%BE%E8%A7%A3.png" alt="集群图解"></p><h2 id="1-controller"><a href="#1-controller" class="headerlink" title="1.controller"></a>1.controller</h2><blockquote><p>之前集群部署，创建主题、副本、分区后，查看<br><img src="/images/Kafka(%E4%BA%94)-%E9%9B%86%E7%BE%A4%E3%80%81%E4%BC%98%E5%8C%96/%E9%9B%86%E7%BE%A4%E5%88%9B%E5%BB%BAtopic%E5%90%8E%E6%9F%A5%E7%9C%8B%E8%AF%A6%E6%83%85.png" alt="集群创建topic后查看详情"></p></blockquote><p><strong>集群中谁来充当controller？</strong></p><blockquote><p>每个broker启动时会向zk创建⼀个临时序号节点，获得的序号最⼩的那个broker将会作为集群中的controller，</p></blockquote><p><strong>controller负责这么⼏件事：</strong></p><ul><li>当集群中有⼀个副本的leader挂掉，需要在集群中选举出⼀个新的leader，选举的规则是从 <strong>“<code>isr</code>”</strong> 集合中最左边获得。</li><li>当集群中有broker新增或减少，controller会同步信息给其他broker</li><li>当集群中有分区新增或减少，controller会同步信息给其他broker</li></ul><h2 id="2-rebalance机制"><a href="#2-rebalance机制" class="headerlink" title="2.rebalance机制"></a>2.rebalance机制</h2><p>rebalance中文含义为再平衡。它本质上是一组协议，它规定了一个consumer group是如何达成一致来分配订阅topic的所有分区的。</p><ul><li><p><strong>前提：消费组中的消费者没有指明分区来消费</strong></p></li><li><p><strong>触发的条件</strong> ：当消费组中的消费者和分区的关系发⽣变化的时候</p></li><li><p><strong>分区分配的策略</strong> ：在 <strong>“<code>rebalance之前</code>”</strong> 分区怎么分配会有这么三种策略：</p><ul><li><strong>range</strong> ：根据公示计算得到每个消费消费哪⼏个分区：<br>  前⾯的消费者分配到的分区个数是：<code>(分区总数/消费者数量)+1</code><br>  之后的消费者分配到的分区个数是：<code>分区总数/消费者数量</code></li><li><strong>round-robin</strong> ：轮询：⼤家轮着来</li><li><strong>sticky</strong> ：粘合策略，如果需要rebalance，会在之前已分配的基础上调整，不会改变之前的分配情况。<br>  如果这个策略没有开，那么就要进⾏全部的重新分配。建议开启。</li></ul></li></ul><blockquote><p>举例：假如有1个主题(topic)，这个主题有7个分区(partition)，groupA消费组中有3个消费者(consumer)。这些消费者是怎么分配订阅这个主题中的分区的？<br>不同策略对应不同的结果。<br>range：计算得出第一个消费者消费分区为(7&#x2F;3)+1&#x3D;3个，那么c1分配到分区p1p2p3，c2分配到p4p5，c3分配到p6p7<br>round-robin：轮询：c1分配到分区p1p4p7，c2分配到分区p2p5，c3分配到分区p3p6<br>sticky：粘合策略，如果在基于range和round-robin分配完后，如果挂掉了一个消费者，是否重新分配全部的分区。<br>比如开启round-robin后，c3消费者挂了，那么p3p6分区是轮询分派给c1c2，还是将分区c1-7全部重新分配。<br>开启sticky的话，c1变为p1p4p7p3，c2变为p2p5p6，未开启则c1为p1p3p5p7，c2为p2p4p6</p></blockquote><h2 id="3-HW和LEO"><a href="#3-HW和LEO" class="headerlink" title="3.HW和LEO"></a>3.HW和LEO</h2><ul><li><p>LEO是某个副本最后消息的消息位置（log-end-offset）</p></li><li><p>HW是已完成同步的位置。<br>消息在写⼊broker时，且每个broker完成这条消息的同步后，HW才会变化。在这之前消费者是消费不到这条消息的。<br>在同步完成之后，HW更新之后，消费者才能消费到这条消息，这样的⽬的是防⽌消息的丢失。</p></li></ul><p><img src="/images/Kafka(%E4%BA%94)-%E9%9B%86%E7%BE%A4%E3%80%81%E4%BC%98%E5%8C%96/HW%E5%92%8CLEO.png" alt="HW和LEO"></p><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><h2 id="1-如何防⽌消息丢失"><a href="#1-如何防⽌消息丢失" class="headerlink" title="1.如何防⽌消息丢失"></a>1.如何防⽌消息丢失</h2><ul><li>⽣产者：<ul><li>使⽤同步发送 </li><li>把ack设成1或者all，并且设置同步的分区数&gt;&#x3D;2</li></ul></li><li>消费者：<ul><li>把⾃动提交改成⼿动提交</li></ul></li></ul><h2 id="2-如何防⽌重复消费"><a href="#2-如何防⽌重复消费" class="headerlink" title="2.如何防⽌重复消费"></a>2.如何防⽌重复消费</h2><p>在防⽌消息丢失的⽅案中，如果⽣产者发送完消息后，因为⽹络抖动，没有收到ack，但实际上broker已经收到了。<br>此时⽣产者会进⾏重试，于是broker就会收到多条相同的消息，⽽造成消费者的重复消费。</p><p><strong>怎么解决：</strong></p><ul><li>⽣产者关闭重试：会造成丢消息（不建议）</li><li>消费者解决<strong>⾮幂等性</strong>消费问题：所谓的幂等性：<strong>多次访问的结果是⼀样的。</strong><br>  对于rest的请求（get（幂等）、post（⾮幂等）、put（幂等）、delete（幂等））<br>  解决⽅案：<ul><li>在数据库中创建联合主键，防⽌相同的主键创建出多条记录</li><li>使⽤分布式锁，以业务id为锁。保证只有⼀条记录能够创建成功</li></ul></li></ul><h2 id="3-如何做到消息的顺序消费"><a href="#3-如何做到消息的顺序消费" class="headerlink" title="3.如何做到消息的顺序消费"></a>3.如何做到消息的顺序消费</h2><blockquote><p>kafka的顺序消费使⽤场景不多，因为牺牲掉了性能，<br>但是⽐如<strong>rocketMQ</strong>在这⼀块有专⻔的功能已设计好。</p></blockquote><ul><li><strong>⽣产者</strong> ：保证消息按顺序消费，且消息不丢失——使⽤同步的发送，ack设置成⾮0的值。</li><li><strong>消费者</strong> ：主题只能设置⼀个分区，消费组中只能有⼀个消费者</li></ul><h2 id="4-如何解决消息积压问题"><a href="#4-如何解决消息积压问题" class="headerlink" title="4.如何解决消息积压问题"></a>4.如何解决消息积压问题</h2><ul><li><p><strong>消息积压问题的出现</strong></p><p>  消息的消费者的<strong>消费速度远赶不上生产者的生产消息的速度</strong>，导致kafka中有⼤量的数据没有被消费。<br>  随着没有被消费的数据堆积越多，消费者寻址的性能会越来越差，最后导致整个kafka对外提供的服务的性能很差，<br>  从而造成其他服务也访问速度变慢，造成服务雪崩。</p></li><li><p><strong>消息积压的解决⽅案</strong>    </p><ul><li>在这个消费者中，使用<strong>多线程</strong>，充分利用机器的性能进⾏消费消息。</li><li>通过业务的架构设计，提升业务层面消费的性能。</li><li><strong>创建</strong>多个消费组，多个消费者，部署到<strong>其他机器</strong>上，⼀起消费，提高消费者的消费速度。</li><li><code>创建⼀个消费者，该消费者在kafka另建⼀个主题，配上多个分区，多个分区再配上多个消费者。   该消费者将poll下来的消息，不进⾏消费，直接转发到新建的主题上。   此时，新的主题的多个分区的多个消费者就开始⼀起消费了。</code> <strong>【——不常用】</strong></li></ul></li></ul><p>【——不常用——实现方案图片】<br><img src="/images/Kafka(%E4%BA%94)-%E9%9B%86%E7%BE%A4%E3%80%81%E4%BC%98%E5%8C%96/%E6%B6%88%E6%81%AF%E7%A7%AF%E5%8E%8B-%E6%B6%88%E8%B4%B9%E8%80%85%E8%BD%AC%E5%8F%91%E5%88%B0topic-%E4%B8%8D%E5%B8%B8%E7%94%A8.png" alt="消息积压-消费者转发到topic-不常用"></p><h2 id="5-实现延时队列的效果"><a href="#5-实现延时队列的效果" class="headerlink" title="5.实现延时队列的效果"></a>5.实现延时队列的效果</h2><ul><li><p><strong>应用场景</strong><br>  订单创建后，超过30分钟没有⽀付，则需要取消订单，这种场景可以通过延时队列来实现</p></li><li><p><strong>具体⽅案</strong></p><ul><li>Ⅰ. kafka中创建创建相应的主题</li><li>Ⅱ. 消费者消费该主题的消息（轮询）</li><li>Ⅲ. 消费者消费消息时判断消息的创建时间和当前时间是否超过30分钟（前提是订单没⽀付）<ul><li>如果是：去数据库中修改订单状态为已取消</li><li>如果否：记录当前消息的offset，并不再继续消费之后的消息。<br>  等待1分钟后，再次向kafka拉取该offset及之后的消息，继续进⾏判断，以此反复。</li></ul></li></ul></li></ul><p><img src="/images/Kafka(%E4%BA%94)-%E9%9B%86%E7%BE%A4%E3%80%81%E4%BC%98%E5%8C%96/%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97%E6%96%B9%E6%A1%88.png" alt="实现延时队列方案"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka(四)-SpringBoot整合</title>
    <link href="/2022/06/24/Kafka(%E5%9B%9B)-SpringBoot%E6%95%B4%E5%90%88/"/>
    <url>/2022/06/24/Kafka(%E5%9B%9B)-SpringBoot%E6%95%B4%E5%90%88/</url>
    
    <content type="html"><![CDATA[<p>SpringBoot整合Kafka的使用。</p><span id="more"></span><h1 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-kafka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="2-配置文件application-yml"><a href="#2-配置文件application-yml" class="headerlink" title="2.配置文件application.yml"></a>2.配置文件application.yml</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">5080</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">bootstrap-servers:</span> <span class="hljs-string">localhost:9092</span><br>    <span class="hljs-comment"># ⽣产者</span><br>    <span class="hljs-attr">producer:</span><br>      <span class="hljs-comment"># 设置⼤于0的值，则客户端会将发送失败的记录重新发送</span><br>      <span class="hljs-attr">retries:</span> <span class="hljs-number">3</span><br>      <span class="hljs-attr">batch-size:</span> <span class="hljs-number">16384</span><br>      <span class="hljs-attr">buffer-memory:</span> <span class="hljs-number">33554432</span><br>      <span class="hljs-attr">acks:</span> <span class="hljs-number">1</span><br>      <span class="hljs-comment"># 指定消息key和消息体的编解码⽅式</span><br>      <span class="hljs-attr">key-serializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringSerializer</span><br>      <span class="hljs-attr">value-serializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringSerializer</span><br>    <span class="hljs-comment"># 消费者</span><br>    <span class="hljs-attr">consumer:</span><br>      <span class="hljs-attr">group-id:</span> <span class="hljs-string">default-group</span><br>      <span class="hljs-attr">enable-auto-commit:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">auto-offset-reset:</span> <span class="hljs-string">earliest</span><br>      <span class="hljs-attr">key-deserializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringDeserializer</span><br>      <span class="hljs-attr">value-deserializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringDeserializer</span><br>      <span class="hljs-attr">max-poll-records:</span> <span class="hljs-number">500</span><br><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-comment"># RECORD:当每⼀条记录被消费者监听器（ListenerConsumer）处理之后提交</span><br>      <span class="hljs-comment"># BATCH:当每⼀批poll()的数据被消费者监听器（ListenerConsumer）处理之后提交</span><br>      <span class="hljs-comment"># TIME:当每⼀批poll()的数据被消费者监听器（ListenerConsumer）处理之后，距离上次提交时间⼤于TIME时提交</span><br>      <span class="hljs-comment"># COUNT:当每⼀批poll()的数据被消费者监听器（ListenerConsumer）处理之后，被处理record数量⼤于等于COUNT时提交</span><br>      <span class="hljs-comment"># COUNT_TIME: TIME | COUNT 有⼀个条件满⾜时提交</span><br>      <span class="hljs-comment"># MANUAL:当每⼀批poll()的数据被消费者监听器（ListenerConsumer）处理之后,⼿动调⽤Acknowledgment.acknowledge()后提交</span><br>      <span class="hljs-comment"># MANUAL_IMMEDIATE:⼿动调⽤Acknowledgment.acknowledge()后⽴即提交，⼀般使⽤这种</span><br>      <span class="hljs-attr">ack-mode:</span> <span class="hljs-string">MANUAL_IMMEDIATE</span><br></code></pre></td></tr></table></figure><h1 id="3-消息生产者接口"><a href="#3-消息生产者接口" class="headerlink" title="3.消息生产者接口"></a>3.消息生产者接口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.kafka.core.KafkaTemplate;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/msg&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyKafkaController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">TOPIC_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic-11112&quot;</span>;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/send&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendMessage</span><span class="hljs-params">()</span> &#123;<br><br>        kafkaTemplate.send(TOPIC_NAME, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;this is a message!&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;send success!&quot;</span>;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-消费者"><a href="#4-消费者" class="headerlink" title="4.消费者"></a>4.消费者</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;<br><span class="hljs-keyword">import</span> org.springframework.kafka.annotation.KafkaListener;<br><span class="hljs-keyword">import</span> org.springframework.kafka.annotation.PartitionOffset;<br><span class="hljs-keyword">import</span> org.springframework.kafka.annotation.TopicPartition;<br><span class="hljs-keyword">import</span> org.springframework.kafka.support.Acknowledgment;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConsumer</span> &#123;<br><br>    <span class="hljs-comment">// 一条一条消息处理</span><br>    <span class="hljs-meta">@KafkaListener(topics = &quot;topic-11112&quot;, groupId = &quot;MyGroup1&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenGroup</span><span class="hljs-params">(ConsumerRecord&lt;String, String&gt; record, Acknowledgment ack)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> record.value();<br>        System.out.println(value);<br>        System.out.println(record);<br>        <span class="hljs-comment">//手动提交offset，需要在application.yml中配置enable-auto-commit: false</span><br>        ack.acknowledge();<br>    &#125;<br>    <br>    <span class="hljs-comment">// 批量处理：ConsumerRecords&lt;String, String&gt; records</span><br>    <span class="hljs-meta">@KafkaListener(topics = &quot;topic-11112&quot;, groupId = &quot;MyGroup2&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listensGroup</span><span class="hljs-params">(ConsumerRecords&lt;String, String&gt; records, Acknowledgment ack)</span> &#123;<br>        <span class="hljs-comment">// records一组消息</span><br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5-消费者中配置消费主题、分区和偏移量"><a href="#5-消费者中配置消费主题、分区和偏移量" class="headerlink" title="5.消费者中配置消费主题、分区和偏移量"></a>5.消费者中配置消费主题、分区和偏移量</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;<br><span class="hljs-keyword">import</span> org.springframework.kafka.annotation.KafkaListener;<br><span class="hljs-keyword">import</span> org.springframework.kafka.annotation.PartitionOffset;<br><span class="hljs-keyword">import</span> org.springframework.kafka.annotation.TopicPartition;<br><span class="hljs-keyword">import</span> org.springframework.kafka.support.Acknowledgment;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConsumer</span> &#123;<br><br>    <span class="hljs-meta">@KafkaListener(</span><br><span class="hljs-meta">            groupId = &quot;testGroup&quot;,</span><br><span class="hljs-meta">            topicPartitions = &#123;</span><br><span class="hljs-meta">                    @TopicPartition(topic = &quot;topic1&quot;, partitions = &#123;&quot;0&quot;, &quot;1&quot;&#125;),</span><br><span class="hljs-meta">                    @TopicPartition(topic = &quot;topic2&quot;, partitions = &quot;0&quot;,</span><br><span class="hljs-meta">                            partitionOffsets = @PartitionOffset(partition = &quot;1&quot;, initialOffset = &quot;100&quot;))&#125;,</span><br><span class="hljs-meta">            //concurrency就是同组下的消费者个数，就是并发消费数，建议小于等于分区总数</span><br><span class="hljs-meta">            concurrency = &quot;3&quot;</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenGroupPro</span><span class="hljs-params">(ConsumerRecord&lt;String, String&gt; record, Acknowledgment ack)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> record.value();<br>        System.out.println(value);<br>        System.out.println(record);<br>        <span class="hljs-comment">//手动提交offset</span><br>        ack.acknowledge();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="完整包-pom-xml"><a href="#完整包-pom-xml" class="headerlink" title="完整包 - pom.xml"></a>完整包 - pom.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">spring-boot.version</span>&gt;</span>2.3.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-boot.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">lombok.version</span>&gt;</span>1.18.22<span class="hljs-tag">&lt;/<span class="hljs-name">lombok.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fastjson.version</span>&gt;</span>2.0.7<span class="hljs-tag">&lt;/<span class="hljs-name">fastjson.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kafka-clients<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-kafka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--        &lt;dependency&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;artifactId&gt;lombok&lt;/artifactId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;scope&gt;provided&lt;/scope&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;version&gt;$&#123;lombok.version&#125;&lt;/version&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;/dependency&gt;--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kafka</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka(三)-生产者和消费者配置详解-Java</title>
    <link href="/2022/06/24/Kafka(%E4%B8%89)-%E7%94%9F%E4%BA%A7%E8%80%85%E5%92%8C%E6%B6%88%E8%B4%B9%E8%80%85%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3-Java/"/>
    <url>/2022/06/24/Kafka(%E4%B8%89)-%E7%94%9F%E4%BA%A7%E8%80%85%E5%92%8C%E6%B6%88%E8%B4%B9%E8%80%85%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3-Java/</url>
    
    <content type="html"><![CDATA[<p>Java使用生产者和消费者配置详解。<br>Java基本实现、ack配置详解、手动自动offset、同步异步提交；长轮询poll、健康状态检查、指定分区偏移量时间消费、新消费组offset规则…</p><span id="more"></span><h1 id="一、生产者-Producer"><a href="#一、生产者-Producer" class="headerlink" title="一、生产者 - Producer"></a>一、生产者 - Producer</h1><h2 id="1-生产者基本实现"><a href="#1-生产者基本实现" class="headerlink" title="1.生产者基本实现"></a>1.生产者基本实现</h2><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kafka-clients<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>具体Java实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.Callback;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.Producer;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.ProducerConfig;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.RecordMetadata;<br><span class="hljs-keyword">import</span> org.apache.kafka.common.serialization.StringSerializer;<br><br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySimpleProducer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">TOPIC_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic-11112&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br><br>        <span class="hljs-comment">//1.设置参数</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="hljs-string">&quot;localhost:9092&quot;</span>);<br>        <span class="hljs-comment">//把发送的key从字符串序列化为字节数组</span><br>        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());<br>        <span class="hljs-comment">//把发送消息value从字符串序列化为字节数组</span><br>        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());<br>        <span class="hljs-comment">//2.创建⽣产消息的客户端，传⼊参数</span><br>        Producer&lt;String, String&gt; producer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaProducer</span>&lt;String, String&gt;(props);<br><br>        <span class="hljs-comment">//3.创建消息</span><br>        <span class="hljs-comment">//key：作⽤是决定了往哪个分区上发，value：具体要发送的消息内容</span><br>        ProducerRecord&lt;String, String&gt; producerRecord = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerRecord</span>&lt;&gt;(TOPIC_NAME, <span class="hljs-string">&quot;mykeyvalue1&quot;</span>, <span class="hljs-string">&quot;hellokafka1&quot;</span>);<br><br>        <span class="hljs-comment">// ------------发送消息-------------</span><br>        <span class="hljs-comment">// 方式一：同步发送消息，得到消息发送的元数据并输出</span><br>        <span class="hljs-type">RecordMetadata</span> <span class="hljs-variable">metadata</span> <span class="hljs-operator">=</span> producer.send(producerRecord).get();<br>        System.out.println(<span class="hljs-string">&quot;同步⽅式发送消息结果：&quot;</span> + <span class="hljs-string">&quot;topic-&quot;</span> + metadata.topic() + <span class="hljs-string">&quot;|partition-&quot;</span> + metadata.partition() + <span class="hljs-string">&quot;|offset-&quot;</span> + metadata.offset());<br><br>        <span class="hljs-comment">// 方式二：步⽅式发送消息</span><br>        ProducerRecord&lt;String, String&gt; producerRecord2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerRecord</span>&lt;&gt;(TOPIC_NAME, <span class="hljs-string">&quot;mykeyvalue2&quot;</span>, <span class="hljs-string">&quot;hellokafka2&quot;</span>);<br>        producer.send(producerRecord2, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Callback</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCompletion</span><span class="hljs-params">(RecordMetadata recordMetadata, Exception e)</span> &#123;<br>                <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;发送失败：&quot;</span> + e.getStackTrace());<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (recordMetadata != <span class="hljs-literal">null</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;异步⽅式发送消息结果：&quot;</span> + <span class="hljs-string">&quot;topic-&quot;</span> + recordMetadata.topic() + <span class="hljs-string">&quot;|partition-&quot;</span> + recordMetadata.partition() + <span class="hljs-string">&quot;|offset-&quot;</span> + recordMetadata.offset());<br>                &#125;<br><br>            &#125;<br>        &#125;);<br><br>        Thread.sleep(<span class="hljs-number">10000L</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="2-同步发送消息"><a href="#2-同步发送消息" class="headerlink" title="2.同步发送消息"></a>2.同步发送消息</h2><p><img src="/images/Kafka(%E4%B8%89)-%E7%94%9F%E4%BA%A7%E8%80%85%E5%92%8C%E6%B6%88%E8%B4%B9%E8%80%85%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3-Java/%E5%90%8C%E6%AD%A5%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF.png" alt="同步发送消息"><br>如果⽣产者发送消息没有收到ack，⽣产者会阻塞，阻塞到3s的时间，如果还没有收到消息，会进⾏重试。重试的次数3次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 同步发送消息，得到消息发送的元数据并输出</span><br><span class="hljs-type">RecordMetadata</span> <span class="hljs-variable">metadata</span> <span class="hljs-operator">=</span> producer.send(producerRecord).get();<br>System.out.println(<span class="hljs-string">&quot;同步⽅式发送消息结果：&quot;</span> + <span class="hljs-string">&quot;topic-&quot;</span> + metadata.topic() + <span class="hljs-string">&quot;|partition-&quot;</span> + metadata.partition() + <span class="hljs-string">&quot;|offset-&quot;</span> + metadata.offset());<br></code></pre></td></tr></table></figure><h2 id="3-异步发送消息"><a href="#3-异步发送消息" class="headerlink" title="3.异步发送消息"></a>3.异步发送消息</h2><p><img src="/images/Kafka(%E4%B8%89)-%E7%94%9F%E4%BA%A7%E8%80%85%E5%92%8C%E6%B6%88%E8%B4%B9%E8%80%85%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3-Java/%E5%BC%82%E6%AD%A5%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF.png" alt="异步发送消息"><br>异步发送，⽣产者发送完消息后就可以执⾏之后的业务，broker在收到消息后异步调⽤⽣产者提供的callback回调⽅法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">producer.send(producerRecord2, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Callback</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCompletion</span><span class="hljs-params">(RecordMetadata recordMetadata, Exception e)</span> &#123;<br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;发送失败：&quot;</span> + e.getStackTrace());<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (recordMetadata != <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;异步⽅式发送消息结果：&quot;</span> + <span class="hljs-string">&quot;topic-&quot;</span> + recordMetadata.topic() + <span class="hljs-string">&quot;|partition-&quot;</span> + recordMetadata.partition() + <span class="hljs-string">&quot;|offset-&quot;</span> + recordMetadata.offset());<br>        &#125;<br><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="4-生产者的ack的配置"><a href="#4-生产者的ack的配置" class="headerlink" title="4.生产者的ack的配置"></a>4.生产者的ack的配置</h2><p>在同步发送的前提下，⽣产者在获得集群返回的ack之前会⼀直阻塞。<br>那么集群什么时候返回ack呢？此时ack有3个配置：</p><ul><li><strong>ack &#x3D; 0</strong> ， kafka-cluster不需要任何的broker收到消息，就⽴即返回ack给⽣产者，最容易丢消息的，效率是最⾼的。</li><li><strong>ack &#x3D; 1</strong> ，多副本之间的leader已经收到消息，并把消息写⼊到本地的log中，才会返回ack给⽣产者，性能和安全性是最均衡的。</li><li><strong>ack &#x3D; &#x3D;-1&#x2F;all</strong> ，⾥⾯有默认的配置：<code>min.insync.replicas=2</code> (默认为1，推荐配置⼤于等于2)，<br>此时就需要leader和⼀个follower同步完后，才会返回ack给⽣产者（此时集群中有2个broker已完成数据的接收），这种⽅式最安全，但性能最差。</li></ul><p><img src="/images/Kafka(%E4%B8%89)-%E7%94%9F%E4%BA%A7%E8%80%85%E5%92%8C%E6%B6%88%E8%B4%B9%E8%80%85%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3-Java/ack%E9%85%8D%E7%BD%AE.png" alt="ack配置"></p><p>下⾯是关于ack和重试（如果没有收到ack，就开启重试）的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><br>props.put(ProducerConfig.ACKS_CONFIG, <span class="hljs-string">&quot;1&quot;</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">发送失败会重试，默认重试间隔100ms，重试能保证消息发送的可靠性，</span><br><span class="hljs-comment">但是也可能造成消息重复发送，⽐如⽹络抖动，所以需要在接收者那边做好消息接收的幂等性处理</span><br><span class="hljs-comment">*/</span><br>props.put(ProducerConfig.RETRIES_CONFIG, <span class="hljs-number">3</span>);<br><span class="hljs-comment">//重试间隔设置</span><br>props.put(ProducerConfig.RETRY_BACKOFF_MS_CONFIG, <span class="hljs-number">300</span>);<br></code></pre></td></tr></table></figure><h2 id="5-关于消息发送的缓冲区"><a href="#5-关于消息发送的缓冲区" class="headerlink" title="5.关于消息发送的缓冲区"></a>5.关于消息发送的缓冲区</h2><p><img src="/images/Kafka(%E4%B8%89)-%E7%94%9F%E4%BA%A7%E8%80%85%E5%92%8C%E6%B6%88%E8%B4%B9%E8%80%85%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3-Java/%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E7%BC%93%E5%86%B2%E5%8C%BA.png" alt="发送消息缓冲区"></p><ul><li>kafka默认会创建⼀个消息缓冲区，⽤来存放要发送的消息，缓冲区是32m<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, <span class="hljs-number">33554432</span>);<br></code></pre></td></tr></table></figure></li><li>kafka本地线程会去缓冲区中⼀次拉16k的数据，发送到broker<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">props.put(ProducerConfig.BATCH_SIZE_CONFIG, <span class="hljs-number">16384</span>);<br></code></pre></td></tr></table></figure></li><li>如果线程拉不到16k的数据，间隔10ms也会将已拉到的数据发到broker<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">props.put(ProducerConfig.LINGER_MS_CONFIG, <span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure></li></ul><h1 id="二、消费者-Consumer"><a href="#二、消费者-Consumer" class="headerlink" title="二、消费者 - Consumer"></a>二、消费者 - Consumer</h1><h2 id="1-消费者基本实现"><a href="#1-消费者基本实现" class="headerlink" title="1.消费者基本实现"></a>1.消费者基本实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;<br><span class="hljs-keyword">import</span> org.apache.kafka.common.serialization.StringDeserializer;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySimpleConsumer</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">TOPIC_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic-11112&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">CONSUMER_GROUP_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;testGroup&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="hljs-string">&quot;114.132.234.85:9092&quot;</span>);<br>        <span class="hljs-comment">// 消费分组名</span><br>        props.put(ConsumerConfig.GROUP_ID_CONFIG, CONSUMER_GROUP_NAME);<br>        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());<br>        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());<br>        <span class="hljs-comment">//1.创建⼀个消费者的客户端</span><br>        KafkaConsumer&lt;String, String&gt; consumer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaConsumer</span>&lt;String, String&gt;(props);<br>        <span class="hljs-comment">//2. 消费者订阅主题列表</span><br>        consumer.subscribe(Arrays.asList(TOPIC_NAME));<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * 3.poll() API 是拉取消息的⻓轮询</span><br><span class="hljs-comment">             */</span><br>            ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(<span class="hljs-number">1000</span>));<br>            <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;<br>                <span class="hljs-comment">//4.打印消息</span><br>                System.out.printf(<span class="hljs-string">&quot;收到消息：partition = %d,offset = %d, key =%s, value = %s %n &quot;</span>,<br>                        record.partition(), record.offset(), record.key(), record.value());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-自动提交和手动提交offset"><a href="#2-自动提交和手动提交offset" class="headerlink" title="2.自动提交和手动提交offset"></a>2.自动提交和手动提交offset</h2><h3 id="Ⅰ-提交的内容"><a href="#Ⅰ-提交的内容" class="headerlink" title="Ⅰ.提交的内容"></a>Ⅰ.提交的内容</h3><p>消费者⽆论是⾃动提交还是⼿动提交，都需要把所属的 <strong><code>消费组+消费的某个主题+消费的某个分区及消费的偏移量</code></strong> ，<br>这样的信息提交到集群的_consumer_offsets主题⾥⾯。</p><h3 id="Ⅱ-自动提交"><a href="#Ⅱ-自动提交" class="headerlink" title="Ⅱ.自动提交"></a>Ⅱ.自动提交</h3><p>消费者poll消息下来以后就会⾃动提交offset</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 是否⾃动提交offset，默认就是true</span><br>props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="hljs-string">&quot;true&quot;</span>);<br><span class="hljs-comment">// ⾃动提交offset的间隔时间</span><br>props.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, <span class="hljs-string">&quot;1000&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="Ⅲ-手动提交-同步和异步两种"><a href="#Ⅲ-手动提交-同步和异步两种" class="headerlink" title="Ⅲ.手动提交-同步和异步两种"></a>Ⅲ.手动提交-同步和异步两种</h3><p>需要把⾃动提交的配置改成false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="hljs-string">&quot;false&quot;</span>);<br></code></pre></td></tr></table></figure><p>分为同步和异步两种：</p><ul><li><p><strong>手动同步提交</strong><br>在消费完消息后调⽤同步提交的⽅法，当集群返回ack前⼀直阻塞，返回ack后表示提交<br>成功，执⾏之后的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * poll() API 是拉取消息的⻓轮询</span><br><span class="hljs-comment">     */</span><br>    ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(<span class="hljs-number">1000</span>));<br>    <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;<br>        System.out.printf(<span class="hljs-string">&quot;收到消息：partition = %d,offset = %d, key =%s, value = %s %n &quot;</span>,<br>                record.partition(), record.offset(), record.key(), record.value());<br>    &#125;<br>    <span class="hljs-comment">//所有的消息已消费完</span><br>    <span class="hljs-keyword">if</span> (records.count() &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//有消息</span><br>        <span class="hljs-comment">// ⼿动同步提交offset，当前线程会阻塞直到offset提交成功</span><br>        <span class="hljs-comment">// ⼀般使⽤同步提交，因为提交之后⼀般也没有什么逻辑代码了</span><br>        consumer.commitSync();<span class="hljs-comment">//=======阻塞=== 提交成功</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>⼿动异步提交</strong><br>在消息消费完后提交，不需要等到集群ack，直接执⾏之后的逻辑，可以设置⼀个回调⽅法，供集群调⽤。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * poll() API 是拉取消息的⻓轮询</span><br><span class="hljs-comment">     */</span><br>    ConsumerRecords&lt;String, String&gt; records =<br>            consumer.poll(Duration.ofMillis(<span class="hljs-number">1000</span>));<br>    <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;<br>        System.out.printf(<span class="hljs-string">&quot;收到消息：partition = %d,offset = %d, key =%s, value = %s %n &quot;</span>,<br>                record.partition(), record.offset(), record.key(), record.value());<br>    &#125;<br>    <span class="hljs-comment">//所有的消息已消费完</span><br>    <span class="hljs-keyword">if</span> (records.count() &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// ⼿动异步提交offset，当前线程提交offset不会阻塞，可以继续处理后⾯的程序逻辑</span><br>        consumer.commitAsync(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OffsetCommitCallback</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onComplete</span><span class="hljs-params">(Map&lt;TopicPartition, OffsetAndMetadata&gt; offsets, Exception exception)</span> &#123;<br>                <span class="hljs-keyword">if</span> (exception != <span class="hljs-literal">null</span>) &#123;<br>                    System.err.println(<span class="hljs-string">&quot;Commit failed for &quot;</span> + offsets);<br>                    System.err.println(<span class="hljs-string">&quot;Commit failed exception: &quot;</span> +<br>                            exception.getStackTrace());<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-长轮询poll消息"><a href="#3-长轮询poll消息" class="headerlink" title="3.长轮询poll消息"></a>3.长轮询poll消息</h2><ul><li><p>默认情况下，消费者⼀次会poll500条消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//⼀次poll最⼤拉取消息的条数，可以根据消费速度的快慢来设置</span><br>props.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, <span class="hljs-number">500</span>);<br></code></pre></td></tr></table></figure></li><li><p>代码中设置了⻓轮询的时间是1000毫秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 3.poll() API 是拉取消息的⻓轮询</span><br><span class="hljs-comment">     */</span><br>    ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(<span class="hljs-number">1000</span>));<br>    <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;<br>        <span class="hljs-comment">//4.打印消息</span><br>        System.out.printf(<span class="hljs-string">&quot;收到消息：partition = %d,offset = %d, key =%s, value = %s %n &quot;</span>,<br>                record.partition(), record.offset(), record.key(), record.value());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>意味着：</strong></p><ul><li>1.如果⼀次poll到500条，就直接执⾏for循环。<br>2.如果这⼀次没有poll到500条。且时间在1秒内，那么⻓轮询继续poll，要么到500条，要么到1s<br>3.如果多次poll都没达到500条，且1秒时间到了，那么直接执⾏for循环</li><li>如果两次poll的间隔超过30s，集群会认为该消费者的消费能⼒过弱，该消费者被踢出消费组，<br>  触发<strong>rebalance机制</strong>，rebalance机制会造成性能开销。可以通过设置这个参数，让⼀次poll的消息条数少⼀点</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//⼀次poll最⼤拉取消息的条数，可以根据消费速度的快慢来设置</span><br>props.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, <span class="hljs-number">500</span>);<br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * 如果两次poll的时间如果超出了30s的时间间隔，kafka会认为其消费能⼒过弱，将其踢出消费组。</span><br><span class="hljs-comment"> * 将分区分配给其他消费者。-rebalance</span><br><span class="hljs-comment"> */</span> <br>props.put(ConsumerConfig.MAX_POLL_INTERVAL_MS_CONFIG, <span class="hljs-number">30</span> * <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><h2 id="4-消费者的健康状态检查"><a href="#4-消费者的健康状态检查" class="headerlink" title="4.消费者的健康状态检查"></a>4.消费者的健康状态检查</h2><p>消费者每隔1s向kafka集群<strong>发送⼼跳</strong>，集群发现如果有超过10s<strong>没有续约</strong>的消费者，将被<strong>踢出消费组</strong>，<br>触发该消费组的<strong>rebalance机制</strong>，将该分区交给<strong>消费组里的其他消费者</strong>进⾏消费。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//consumer给broker发送⼼跳的间隔时间</span><br>props.put(ConsumerConfig.HEARTBEAT_INTERVAL_MS_CONFIG, <span class="hljs-number">1000</span>);<br><span class="hljs-comment">//kafka如果超过10秒没有收到消费者的⼼跳，则会把消费者踢出消费组，进⾏rebalance，把分区分配给其他消费者。</span><br>props.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, <span class="hljs-number">10</span> * <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><h2 id="5-指定分区和偏移量、时间消费"><a href="#5-指定分区和偏移量、时间消费" class="headerlink" title="5.指定分区和偏移量、时间消费"></a>5.指定分区和偏移量、时间消费</h2><ul><li><p>指定分区消费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">consumer.assign(Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TopicPartition</span>(TOPIC_NAME, <span class="hljs-number">0</span>)));<br></code></pre></td></tr></table></figure></li><li><p>从头消费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">consumer.assign(Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TopicPartition</span>(TOPIC_NAME, <span class="hljs-number">0</span>)));<br>consumer.seekToBeginning(Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TopicPartition</span>(TOPIC_NAME,<span class="hljs-number">0</span>)));<br></code></pre></td></tr></table></figure></li><li><p>指定offset消费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">consumer.assign(Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TopicPartition</span>(TOPIC_NAME, <span class="hljs-number">0</span>)));<br>consumer.seek(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TopicPartition</span>(TOPIC_NAME, <span class="hljs-number">0</span>), <span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure></li><li><p>指定时间消费<br>根据时间，去所有的partition中确定该时间对应的offset，然后去所有的partition中找到该offset之后的消息开始消费。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;PartitionInfo&gt; topicPartitions = consumer.partitionsFor(TOPIC_NAME);<br><span class="hljs-comment">//从1⼩时前开始消费</span><br><span class="hljs-type">long</span> <span class="hljs-variable">fetchDataTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis() - <span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>;<br>Map&lt;TopicPartition, Long&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (PartitionInfo par : topicPartitions) &#123;<br>    map.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TopicPartition</span>(TOPIC_NAME, par.partition()), fetchDataTime);<br>&#125;<br>Map&lt;TopicPartition, OffsetAndTimestamp&gt; parMap = consumer.offsetsForTimes(map);<br><span class="hljs-keyword">for</span> (Map.Entry&lt;TopicPartition, OffsetAndTimestamp&gt; entry : parMap.entrySet()) &#123;<br>    <span class="hljs-type">TopicPartition</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> entry.getKey();<br>    <span class="hljs-type">OffsetAndTimestamp</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> entry.getValue();<br>    <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span> || value == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> value.offset();<br>    System.out.println(<span class="hljs-string">&quot;partition-&quot;</span> + key.partition() + <span class="hljs-string">&quot;|offset-&quot;</span> + offset);<br>    System.out.println();<br>    <span class="hljs-comment">//根据消费⾥的timestamp确定offset</span><br>    <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>        consumer.assign(Arrays.asList(key));<br>        consumer.seek(key, offset);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="6-新消费组的消费offset规则"><a href="#6-新消费组的消费offset规则" class="headerlink" title="6.新消费组的消费offset规则"></a>6.新消费组的消费offset规则</h2><p>新消费组中的消费者在启动以后，默认会从当前分区的最后⼀条消息的offset+1开始消费（消费新消息）。<br>可以通过以下的设置，让新的消费者第⼀次从头开始消费。<br>之后开始消费新消息（最后消费的位置的偏移量+1）</p><ul><li>Latest:默认的，消费新消息</li><li>earliest：第⼀次从头开始消费。之后开始消费新消息（最后消费的位置的偏移量+1）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, <span class="hljs-string">&quot;earliest&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka(二)-踩坑配置文件</title>
    <link href="/2022/06/23/Kafka(%E4%BA%8C)-%E8%B8%A9%E5%9D%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <url>/2022/06/23/Kafka(%E4%BA%8C)-%E8%B8%A9%E5%9D%91%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>在Kafka(一)中，配置了服务器端的kafka，但是发现Java代码中不论怎么都被拒绝访问。</p><span id="more"></span><p>在(一)服务器安装kafka，修改配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#kafka部署的机器ip和提供服务的端⼝号</span><br><span class="hljs-attr">listeners</span>=<span class="hljs-string">PLAINTEXT://localhost:9092</span><br></code></pre></td></tr></table></figure><p>这样配置之后，在Java代码中，一直连接不上，报错拒绝连接。</p><p>发现配置文件中有这么一段。<code>来自kafka3.1.0版本</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"></span><br><span class="hljs-comment">############################# Socket Server Settings #############################</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># The address the socket server listens on. It will get the value returned from</span><br><span class="hljs-comment"># java.net.InetAddress.getCanonicalHostName() if not configured.</span><br><span class="hljs-comment">#   FORMAT:</span><br><span class="hljs-comment">#     listeners = listener_name://host_name:port</span><br><span class="hljs-comment">#   EXAMPLE:</span><br><span class="hljs-comment">#     listeners = PLAINTEXT://your.host.name:9092</span><br><span class="hljs-comment">#listeners=PLAINTEXT://:9092</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># Hostname and port the broker will advertise to producers and consumers. If not set,</span><br><span class="hljs-comment"># it uses the value for &quot;listeners&quot; if configured.  Otherwise, it will use the value</span><br><span class="hljs-comment"># returned from java.net.InetAddress.getCanonicalHostName().</span><br><span class="hljs-comment">#advertised.listeners=PLAINTEXT://:9092</span><br></code></pre></td></tr></table></figure><p>如果是在服务器中使用：打开这一段就完全足够</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">listeners</span>=<span class="hljs-string">PLAINTEXT://【localhost】:9092</span><br></code></pre></td></tr></table></figure><p><strong>但是Java程序等，外部连接是连不上的.</strong></p><ul><li><strong>如果外部程序等需要连接，则打开</strong><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">advertised.listeners</span>=<span class="hljs-string">PLAINTEXT://【服务器公网ip】:9092</span><br></code></pre></td></tr></table></figure></li></ul><p>最后修改配置文件部分为：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">############################# Socket Server Settings #############################</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># The address the socket server listens on. It will get the value returned from</span><br><span class="hljs-comment"># java.net.InetAddress.getCanonicalHostName() if not configured.</span><br><span class="hljs-comment">#   FORMAT:</span><br><span class="hljs-comment">#     listeners = listener_name://host_name:port</span><br><span class="hljs-comment">#   EXAMPLE:</span><br><span class="hljs-comment">#     listeners = PLAINTEXT://your.host.name:9092</span><br><span class="hljs-comment">#listeners=PLAINTEXT://:9092</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># Hostname and port the broker will advertise to producers and consumers. If not set,</span><br><span class="hljs-comment"># it uses the value for &quot;listeners&quot; if configured.  Otherwise, it will use the value</span><br><span class="hljs-comment"># returned from java.net.InetAddress.getCanonicalHostName().</span><br><span class="hljs-attr">advertised.listeners</span>=<span class="hljs-string">PLAINTEXT://【公网ip】:9092</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kafka</tag>
      
      <tag>踩坑</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka(一)-基础</title>
    <link href="/2022/06/22/Kafka(%E4%B8%80)-%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/06/22/Kafka(%E4%B8%80)-%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>(一)基础知识和基于linux的相关操作。<br>时隔两年，重新温习一下kafka的基础、搭建、使用，慢慢记录！</p><span id="more"></span><h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><blockquote><p>Kafka是最初由Linkedin公司开发，是⼀个<strong>分布式</strong>、<strong>⽀持分区的（partition）</strong>、<strong>多副本的（replica）</strong>，基于<strong>zookeeper</strong>协调的分布式消息系统，它的最⼤的特性就是可以实时的处理⼤量数据以满⾜各种需求场景：⽐如基于hadoop的批处理系统、低延迟的实时系统、Storm&#x2F;Spark流式处理引擎，web&#x2F;nginx⽇志、访问⽇志，消息服务等等，⽤scala语⾔编写，Linkedin于2010年贡献给了Apache基⾦会并成为顶级开源项⽬。</p></blockquote><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>⽇志收集：⼀个公司可以⽤Kafka收集各种服务的log，通过kafka以统⼀接⼝服务的⽅式开放给各种consumer，例如hadoop、Hbase、Solr等。</li><li>消息系统：解耦和⽣产者和消费者、缓存消息等。</li><li>⽤户活动跟踪：Kafka经常被⽤来记录web⽤户或者app⽤户的各种活动，如浏览⽹⻚、搜索、点击等活动，这些活动信息被各个服务器发布到kafka的topic中，然后订阅者通过订阅这些topic来做实时的监控分析，或者装载到hadoop、数据仓库中做离线分析和挖掘。</li><li>运营指标：Kafka也经常⽤来记录运营监控数据。包括收集各种分布式应⽤的数据，⽣产各种操作的集中反馈，⽐如报警和报告。</li></ul><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>kafka是⼀个分布式的，分区的消息(官⽅称之为commit log)服务。它提供⼀个消息系统应该具备的功能，但是确有着独特的设计。可以这样来说，Kafka借鉴了JMS规范的思想，但是确并没有完全遵循JMS规范。<br>⾸先，让我们来看⼀下基础的消息(Message)相关术语：<br><img src="/images/Kafka(%E4%B8%80)-%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.png" alt="基本概念"></p><p>因此，从⼀个较⾼的层⾯上来看，producer通过⽹络发送消息到Kafka集群，然后consumer来进⾏消费，如下图：<br><strong>服务端(brokers)和客户端(producer、consumer)之间通信通过TCP协议来完成。</strong></p><p><img src="/images/Kafka(%E4%B8%80)-%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E6%B5%81%E7%A8%8B.png" alt="流程"></p><h1 id="二、安装流程"><a href="#二、安装流程" class="headerlink" title="二、安装流程"></a>二、安装流程</h1><h2 id="Ⅰ-环境准备"><a href="#Ⅰ-环境准备" class="headerlink" title="Ⅰ.环境准备"></a>Ⅰ.环境准备</h2><ul><li>安装JDK</li><li>安装zookeeper</li><li>安装Kafka</li></ul><h2 id="Ⅱ-zookeeper安装"><a href="#Ⅱ-zookeeper安装" class="headerlink" title="Ⅱ.zookeeper安装"></a>Ⅱ.zookeeper安装</h2><p>这里自己服务器只少了zookeeper，就附上一个zk的安装，jdk的安装自行百度。</p><p>1.首先进入&#x2F;usr&#x2F;local&#x2F;新建一个zookeeper目录（方便管理）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local<br><br><span class="hljs-built_in">mkdir</span> zookeeper<br><br><span class="hljs-built_in">cd</span> zookeeper<br></code></pre></td></tr></table></figure><p>2.下载解压zookeeper到目录（自行下载需要的版本）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://archive.apache.org/dist/zookeeper/zookeeper-3.4.9/zookeeper-3.4.9.tar.gz<br><br>tar -zxvf zookeeper-3.4.9.tar.gz<br></code></pre></td></tr></table></figure><p>3.启动zookeeper</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> zookeeper-3.4.9/<br><span class="hljs-comment"># (复制一份我们需要的配置文件，zoo_sample.cfg是默认配置文件)</span><br><span class="hljs-comment"># 进入conf目录：cd conf/</span><br><span class="hljs-built_in">cp</span> zoo_sample.cfg zoo.cfg <br><br><span class="hljs-comment"># 启动zk</span><br><span class="hljs-comment"># 进入bin目录：cd bin/</span><br>./zkServer.sh start<br><br><span class="hljs-comment"># 进入zk客户端</span><br>./zkCli.sh<br><br><span class="hljs-comment"># 后续查看使用：</span><br><span class="hljs-built_in">ls</span> /<br><span class="hljs-built_in">ls</span> /brokers<br></code></pre></td></tr></table></figure><h2 id="Ⅲ-Kafka安装"><a href="#Ⅲ-Kafka安装" class="headerlink" title="Ⅲ.Kafka安装"></a>Ⅲ.Kafka安装</h2><p><strong>1.</strong> 官网下载压缩包：<a href="https://kafka.apache.org/downloads">https://kafka.apache.org/downloads</a></p><p><strong>2.</strong> 将安装包上传到服务器路径 <strong>&#x2F;usr&#x2F;local&#x2F;kafka&#x2F;</strong> 下</p><p><strong>3.</strong> 解压，备份配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入目录</span><br><span class="hljs-built_in">cd</span> /usr/local/kafka/<br><br><span class="hljs-comment"># 解压</span><br>tar -zxvf kafka_2.12-3.2.0.tgz<br><br><span class="hljs-comment"># 备份配置文件</span><br><span class="hljs-built_in">cd</span> kafka_2.12-3.2.0/config/<br><span class="hljs-built_in">cp</span> server.properties server.properties.bak<br></code></pre></td></tr></table></figure><p><strong>4.</strong> 修改<strong>server.properties</strong>配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#broker.id属性在kafka集群中必须要是唯⼀</span><br><span class="hljs-attr">broker.id</span>=<span class="hljs-string">0</span><br><span class="hljs-comment">#kafka部署的机器ip和提供服务的端⼝号</span><br><span class="hljs-attr">listeners</span>=<span class="hljs-string">PLAINTEXT://localhost:9092</span><br><span class="hljs-comment">#kafka的消息存储⽂件</span><br><span class="hljs-attr">log.dir</span>=<span class="hljs-string">/usr/local/data/kafka-logs</span><br><span class="hljs-comment">#kafka连接zookeeper的地址</span><br><span class="hljs-attr">zookeeper.connect</span>=<span class="hljs-string">localhost:2181</span><br></code></pre></td></tr></table></figure><p><img src="/images/Kafka(%E4%B8%80)-%E5%9F%BA%E7%A1%80/server.properties%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3.png" alt="server.properties配置详解"></p><p><strong>5.</strong> 启动Kafka</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入bin目录，</span><br><span class="hljs-built_in">cd</span> /usr/local/kafka/kafka_2.12-3.2.0/bin/<br><br><span class="hljs-comment"># 指定配置文件server.properties来运行Kafka</span><br>./kafka-server-start.sh -daemon ../config/server.properties<br></code></pre></td></tr></table></figure><p><strong>6.</strong> 验证是否成功<br>进⼊到zk中（.&#x2F;zkCli.sh）的节点看id是0的broker有没有存在（上线）</p><h1 id="三、在linux基本使用"><a href="#三、在linux基本使用" class="headerlink" title="三、在linux基本使用"></a>三、在linux基本使用</h1><h2 id="Ⅰ-创建主题-topic"><a href="#Ⅰ-创建主题-topic" class="headerlink" title="Ⅰ.创建主题 - topic"></a>Ⅰ.创建主题 - topic</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ps：以下操作都在bin路径下</span><br><span class="hljs-comment"># 方式一：(我使用失败) UnrecognizedOptionException: zookeeper is not a recognized option</span><br>./kafka-topics.sh --create --zookeeper localhost:2181 --replicationfactor 1 --partitions 1 --topic <span class="hljs-built_in">test</span><br><br><span class="hljs-comment"># 方式二：成功！返回提示：Created topic test.</span><br>./kafka-topics.sh --bootstrap-server localhost:9092 --create --replication-factor 1 --partitions 1 --topic <span class="hljs-built_in">test</span><br><span class="hljs-comment"># 方式二【格式】</span><br>./kafka-topics.sh --bootstrap-server 【ip】:【端口】 --create --replication-factor 【副本个数】 --partitions 【分区个数】 --topic 【主题名称】<br></code></pre></td></tr></table></figure><blockquote><p>tips：–replication-factor 【副本个数】：这个参数和后续[六、集群]相关，这里可以删除，不用管，后续再看。</p></blockquote><p>创建成功后，可以使用以下查看当前kafka内有哪些topic</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ps：以下操作都在bin路径下</span><br><span class="hljs-comment"># 方式一：(我使用失败) UnrecognizedOptionException: zookeeper is not a recognized option</span><br>./kafka-topics.sh --list --zookeeper localhost:2181<br><br><span class="hljs-comment"># 方式二：成功！</span><br>./kafka-topics.sh --list --bootstrap-server localhost:9092<br></code></pre></td></tr></table></figure><h2 id="Ⅱ-发送消息-producer"><a href="#Ⅱ-发送消息-producer" class="headerlink" title="Ⅱ.发送消息 - producer"></a>Ⅱ.发送消息 - producer</h2><p>kafka⾃带了⼀个producer命令客户端，可以从本地⽂件中读取内容，<br>或者我们也可以以命令⾏中直接输⼊内容，并将这些内容以消息的形式发送到kafka集群中。<br>在默认情况下，每⼀个⾏会被当做成⼀个独⽴的消息。<br>使⽤kafka的发送消息的客户端，指定发送到的kafka服务器地址和topic。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ps：以下操作都在bin路径下</span><br>./kafka-console-producer.sh --broker-list localhost:9092 --topic <span class="hljs-built_in">test</span><br><span class="hljs-comment"># 【格式】</span><br>./kafka-console-producer.sh --broker-list localhost:9092 --topic 【主题名称】<br></code></pre></td></tr></table></figure><h2 id="Ⅲ-消费消息-consumer"><a href="#Ⅲ-消费消息-consumer" class="headerlink" title="Ⅲ.消费消息 - consumer"></a>Ⅲ.消费消息 - consumer</h2><p>对于consumer，kafka同样也携带了⼀个命令⾏客户端，会将获取到内容在命令中进⾏输出，<br>默认是消费最新的消息。使⽤kafka的消费者消息的客户端，从指定kafka服务器的指定topic中消费消息</p><ul><li><p>⽅式⼀：从最后⼀条消息的偏移量+1开始消费</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ps：以下操作都在bin路径下</span><br>./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic <span class="hljs-built_in">test</span><br><span class="hljs-comment"># 【格式】</span><br>./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic 【主题名称】<br></code></pre></td></tr></table></figure></li><li><p>⽅式⼀：⽅式⼆：从头开始消费</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ps：以下操作都在bin路径下</span><br>./kafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --topic <span class="hljs-built_in">test</span><br><span class="hljs-comment"># 【格式】</span><br>./kafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --topic 【主题名称】<br></code></pre></td></tr></table></figure></li></ul><p>⼏个注意点：</p><ul><li>消息会被存储</li><li>消息是顺序存储</li><li>消息是有偏移量的</li><li>消费时可以指明偏移量进⾏消费</li></ul><h1 id="四、关键细节、使用细节"><a href="#四、关键细节、使用细节" class="headerlink" title="四、关键细节、使用细节"></a>四、关键细节、使用细节</h1><h2 id="1-消息的顺序存储"><a href="#1-消息的顺序存储" class="headerlink" title="1.消息的顺序存储"></a>1.消息的顺序存储</h2><p>消息的发送⽅会把消息发送到broker中，broker会存储消息，消息是按照发送的顺序进⾏存储。<br>因此消费者在消费消息时可以指明主题中消息的偏移量。默认情况下，是从最后⼀个消息的下⼀个偏移量开始消费。</p><h2 id="2-单播消息的实现"><a href="#2-单播消息的实现" class="headerlink" title="2.单播消息的实现"></a>2.单播消息的实现</h2><p>单播消息：⼀个消费组⾥ 只会有⼀个消费者能消费到某⼀个topic中的消息。于是可以创建多个消费者，这些消费者在同⼀个消费组中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ps：以下操作都在bin路径下</span><br>./kafka-console-consumer.sh --bootstrap-server localhost:9092 --consumer-property group.id=testGroup --topic <span class="hljs-built_in">test</span><br><span class="hljs-comment"># 【格式】</span><br>./kafka-console-consumer.sh --bootstrap-server localhost:9092 --consumer-property group.id=【分组名称】 --topic 【主题名称】<br></code></pre></td></tr></table></figure><h2 id="3-多播消息的实现"><a href="#3-多播消息的实现" class="headerlink" title="3.多播消息的实现"></a>3.多播消息的实现</h2><p>在⼀些业务场景中需要让⼀条消息被多个消费者消费，那么就可以使⽤多播模式。<br>kafka实现多播，只需要让不同的消费者处于不同的消费组即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ps：以下操作都在bin路径下</span><br>./kafka-console-consumer.sh --bootstrap-server localhost:9092 --consumer-property group.id=testGroup1 --topic <span class="hljs-built_in">test</span><br>./kafka-console-consumer.sh --bootstrap-server localhost:9092 --consumer-property group.id=testGroup2 --topic <span class="hljs-built_in">test</span><br><span class="hljs-comment"># 【格式】</span><br>./kafka-console-consumer.sh --bootstrap-server localhost:9092 --consumer-property group.id=【分组名称】 --topic 【主题名称】<br></code></pre></td></tr></table></figure><h2 id="4-查看消费组及信息"><a href="#4-查看消费组及信息" class="headerlink" title="4.查看消费组及信息"></a>4.查看消费组及信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ps：以下操作都在bin路径下</span><br><span class="hljs-comment"># 查看当前主题下有哪些消费组</span><br>./kafka-consumer-groups.sh --bootstrap-server localhost:9092 --list<br><span class="hljs-comment"># 查看消费组中的具体信息：⽐如当前偏移量、最后⼀条消息的偏移量、堆积的消息数量</span><br>./kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group testGroup1<br></code></pre></td></tr></table></figure><p><img src="/images/Kafka(%E4%B8%80)-%E5%9F%BA%E7%A1%80/%E6%B6%88%E8%B4%B9%E7%BB%84%E4%BF%A1%E6%81%AF%E6%9F%A5%E7%9C%8B.png" alt="消费组信息查看"></p><p>主要参数：</p><ul><li>Currennt-offset: 最后被消费的消息的偏移量(当前消费组的已消费偏移量)</li><li>Log-end-offset: 消息总量（最后⼀条消息的偏移量）:主题对应分区消息的结束偏移量(HW)</li><li>Lag: 积压了多少条消息(当前消费组未消费的消息数)</li></ul><h1 id="五、主题、分区、日志"><a href="#五、主题、分区、日志" class="headerlink" title="五、主题、分区、日志"></a>五、主题、分区、日志</h1><h2 id="主题-Topic"><a href="#主题-Topic" class="headerlink" title="主题 - Topic"></a>主题 - Topic</h2><p>主题-topic在kafka中是⼀个逻辑的概念，kafka通过topic将消息进⾏分类。不同的topic会被订阅该topic的消费者消费。<br>但是有⼀个问题，如果说这个topic中的消息⾮常⾮常多，多到需要⼏T来存，因为消息是会被保存到log⽇志⽂件中的。<br>为了解决这个⽂件过⼤的问题，kafka提出了Partition分区的概念。</p><h2 id="分区-Partition"><a href="#分区-Partition" class="headerlink" title="分区 - Partition"></a>分区 - Partition</h2><p>通过partition将⼀个topic中的消息分区来存储。<br>这样的好处有多个：</p><ul><li>分区存储：可以解决统⼀存储⽂件过⼤的问题。</li><li>提供了读写的吞吐量：读和写可以同时在多个分区中进⾏</li></ul><p><img src="/images/Kafka(%E4%B8%80)-%E5%9F%BA%E7%A1%80/%E4%B8%BB%E9%A2%98%E5%88%86%E5%8C%BA%E7%9A%84%E6%A6%82%E5%BF%B5.png" alt="主题分区的概念"></p><p>⼀个主题中的消息量是⾮常⼤的，因此可以通过分区的设置，来分布式存储这些消息。<br>⽐如⼀个topic创建了3个分区。那么topic中的消息就会分别存放在这三个分区中。</p><p>为⼀个主题创建多个分区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ps：以下操作都在bin路径下</span><br><span class="hljs-comment"># 方式一：(我使用失败) UnrecognizedOptionException: zookeeper is not a recognized option</span><br>./kafka-topics.sh --create --zookeeper localhost:2181 --partitions 2 --topic test1<br><br><span class="hljs-comment"># 方式二：成功！返回提示：Created topic test3.</span><br>./kafka-topics.sh --bootstrap-server localhost:9092 --create --partitions 2 --topic test3<br><span class="hljs-comment"># 【格式】</span><br>./kafka-topics.sh --bootstrap-server localhost:9092 --create --partitions 【分区个数】 --topic 【主题名称】<br></code></pre></td></tr></table></figure><p>可以通过这样的命令查看topic的分区信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ps：以下操作都在bin路径下</span><br><span class="hljs-comment"># 方式一：(我使用失败) UnrecognizedOptionException: zookeeper is not a recognized option</span><br>./kafka-topics.sh --describe --zookeeper localhost:2181 --topic test1<br><br><span class="hljs-comment"># 方式二：成功！</span><br>./kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic test1<br><span class="hljs-comment"># 【格式】</span><br>./kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic 【主题名称】<br></code></pre></td></tr></table></figure><p><strong>“<code>实际上是存在/data/kafka-logs/test-0 和 test-1中的0000000.log⽂件中</code>”</strong></p><h2 id="日志-Log"><a href="#日志-Log" class="headerlink" title="日志 - Log"></a>日志 - Log</h2><ul><li><strong>00000.log</strong> ： 这个⽂件中保存的就是消息</li><li><strong>__consumer_offsets-49</strong> :kafka内部⾃⼰创建了__consumer_offsets主题包含了50个分区。<br>这个主题⽤来存放消费者消费某个主题的偏移量。因为每个消费者都会⾃⼰维护着消费的主题的偏移量，<br>也就是说每个消费者会把消费的主题的偏移量⾃主上报给kafka中的默认主题：consumer_offsets。<br>因此kafka为了提升这个主题的并发性，默认设置了50个分区。<ul><li>提交到哪个分区：通过hash函数：hash(consumerGroupId) % __consumer_offsets主题的分区数。</li><li>提交到该主题中的内容是：key是consumerGroupId+topic+分区号，value就是当前offset的值</li></ul></li><li><strong>⽂件中保存的消息</strong> ，默认保存7天。七天到后消息会被删除</li></ul><h1 id="六、集群"><a href="#六、集群" class="headerlink" title="六、集群"></a>六、集群</h1><h2 id="Ⅰ-搭建集群"><a href="#Ⅰ-搭建集群" class="headerlink" title="Ⅰ.搭建集群"></a>Ⅰ.搭建集群</h2><p><strong>1.</strong> 复制配置文件 - <code>进入/kafka/config/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看kafka服务</span><br>ps aux | grep kafka<br><span class="hljs-comment"># 复制文件</span><br><span class="hljs-built_in">cp</span> server.properties server-1.properties<br><span class="hljs-built_in">cp</span> server.properties server-2.properties<br></code></pre></td></tr></table></figure><p><strong>2.</strong> 修改 <strong>properties</strong>文件中以下几个参数：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#----------------------------------#</span><br><span class="hljs-comment"># 0 1 2</span><br><span class="hljs-attr">broker.id</span>=<span class="hljs-string">2</span><br><span class="hljs-comment"># 9092 9093 9094</span><br><span class="hljs-attr">listeners</span>=<span class="hljs-string">PLAINTEXT://localhost:9094</span><br><span class="hljs-comment"># kafka-logs kafka-logs-1 kafka-logs-2</span><br><span class="hljs-attr">log.dir</span>=<span class="hljs-string">/usr/local/data/kafka-logs-2</span><br><span class="hljs-attr">zookeeper.connect</span>=<span class="hljs-string">localhost:2181</span><br><span class="hljs-comment">#----------------------------------#</span><br></code></pre></td></tr></table></figure><p><strong>3.</strong> 启动三台broker - <code>进入/kafka/bin/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">./kafka-server-start.sh -daemon ../config/server.properties<br>./kafka-server-start.sh -daemon ../config/server-1.properties<br>./kafka-server-start.sh -daemon ../config/server-2.properties<br></code></pre></td></tr></table></figure><p><strong>4.</strong> 进入zk检查&#x2F;brokers&#x2F;ids中是否有三个（0,1,2）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/zookeeper/zookeeper-3.4.9/bin/<br>sh zkCli.sh<br><br><span class="hljs-built_in">ls</span> /brokers/ids<br></code></pre></td></tr></table></figure><h2 id="Ⅱ-副本"><a href="#Ⅱ-副本" class="headerlink" title="Ⅱ.副本"></a>Ⅱ.副本</h2><p>在创建主题的时候，除了指明主题的分区数以外，还指明了副本数，那么副本是什么概念？</p><ul><li>创建主题<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./kafka-topics.sh --bootstrap-server localhost:9092 --create --replication-factor 3 --partitions 2 --topic my-9092-topic<br>./kafka-topics.sh --bootstrap-server localhost:9092,localhost:9093,localhost:9094 --create --replication-factor 3 --partitions 2 --topic my-3-topic<br><span class="hljs-comment"># 方式【格式】</span><br>./kafka-topics.sh --bootstrap-server 【ip】:【端口】 --create --replication-factor 【副本个数】 --partitions 【分区个数】 --topic 【主题名称】<br></code></pre></td></tr></table></figure></li></ul><p>副本是为了为主题中的分区创建多个备份，多个副本在kafka集群的多个broker中，会有⼀个副本作为leader，其他是follower。</p><ul><li>查看主题信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic my-9092-topic<br>./kafka-topics.sh --bootstrap-server localhost:9092,localhost:9093,localhost:9094 --describe --topic my-3-topic<br></code></pre></td></tr></table></figure><img src="/images/Kafka(%E4%B8%80)-%E5%9F%BA%E7%A1%80/%E9%9B%86%E7%BE%A4%E5%88%9B%E5%BB%BAtopic%E5%90%8E%E6%9F%A5%E7%9C%8B%E8%AF%A6%E6%83%85-9092.png" alt="集群创建topic后查看详情-9092"></li></ul><p><img src="/images/Kafka(%E4%B8%80)-%E5%9F%BA%E7%A1%80/%E9%9B%86%E7%BE%A4%E5%88%9B%E5%BB%BAtopic%E5%90%8E%E6%9F%A5%E7%9C%8B%E8%AF%A6%E6%83%85.png" alt="集群创建topic后查看详情"></p><p>详解：</p><ul><li>leader：kafka的写和读的操作，都发⽣在leader上。leader负责把数据同步给follower。当leader挂了，经过主从选举，从多个follower中选举产⽣⼀个新的leader</li><li>follower：接收leader的同步的数据</li><li>isr：可以同步和已同步的节点会被存⼊到isr集合中。<br>这⾥有⼀个细节：如果isr中的节点性能较差，会被提出isr集合。</li></ul><h2 id="Ⅲ-图解broker、主题、分区、副本"><a href="#Ⅲ-图解broker、主题、分区、副本" class="headerlink" title="Ⅲ..图解broker、主题、分区、副本"></a>Ⅲ..图解broker、主题、分区、副本</h2><p><img src="/images/Kafka(%E4%B8%80)-%E5%9F%BA%E7%A1%80/%E9%9B%86%E7%BE%A4%E5%9B%BE%E8%A7%A3.png" alt="集群图解"></p><ul><li>kafka集群中由多个broker组成</li><li>⼀个broker中存放⼀个topic的不同partition——副本</li></ul><h2 id="Ⅳ-集群发送、消费、分组"><a href="#Ⅳ-集群发送、消费、分组" class="headerlink" title="Ⅳ.集群发送、消费、分组"></a>Ⅳ.集群发送、消费、分组</h2><ul><li><p><strong>向集群发送消息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./kafka-console-producer.sh --broker-list localhost:9092,localhost:9093,localhost:9094 --topic my-3-topic<br></code></pre></td></tr></table></figure></li><li><p><strong>从集群消费消息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 从头开始消费</span><br>./kafka-console-consumer.sh --bootstrap-server localhost:9092,localhost:9093,localhost:9094 --from-beginning --topic my-3-topic<br></code></pre></td></tr></table></figure></li><li><p><strong>指定消费组来消费消息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 多加参数 --consumer-property group.id=testGroup1 </span><br>./kafka-console-consumer.sh --bootstrap-server localhost:9092,localhost:9093,localhost:9094 --from-beginning --consumer-property group.id=testGroup1 --topic my-3-topic<br></code></pre></td></tr></table></figure></li><li><p><strong>分区分消费组的集群消费中的细节</strong><br><img src="/images/Kafka(%E4%B8%80)-%E5%9F%BA%E7%A1%80/%E9%9B%86%E7%BE%A4%E5%9B%BE%E8%A7%A3.png" alt="集群图解"></p></li><li><p>一个分区(partition)只能被⼀个消费组(group)中的⼀个消费者(consumer)消费，<br>⽬的是为了保证消费的顺序性，但是多个partition的多个消费者消费的总的顺序性是得不到保证的，那怎么做到消费的总顺序性呢？</p></li><li><p>partition的数量决定了消费组中消费者的数量，建议同⼀个消费组中消费者的数量不要超过partition的数量，否则多的消费者消费不到消息。</p></li><li><p>如果消费者挂了，那么会触发rebalance机制（后⾯介绍），会让其他消费者来消费该分区。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kafka</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java并发(三)-ReentrantLock</title>
    <link href="/2022/06/21/Java%E5%B9%B6%E5%8F%91(%E4%B8%89)-ReentrantLock/"/>
    <url>/2022/06/21/Java%E5%B9%B6%E5%8F%91(%E4%B8%89)-ReentrantLock/</url>
    
    <content type="html"><![CDATA[<p>尝试用一句话概括ReentrantLock：基于AQS，实现了公平锁和非公平锁，在开发中可以用它对共享资源进行同步。<br>此外，和synchronized一样，ReentrantLock支持可重入，但是ReentrantLock在调度上更灵活，支持更丰富的功能。</p><span id="more"></span><h1 id="ReentrantLock思维导图"><a href="#ReentrantLock思维导图" class="headerlink" title="ReentrantLock思维导图"></a>ReentrantLock思维导图</h1><p><img src="/images/Java%E5%B9%B6%E5%8F%91(%E4%B8%89)-ReentrantLock/ReentrantLock%E5%AF%BC%E5%9B%BE.png" alt="ReentrantLock导图"></p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><ul><li><strong>ReentrantLock.java</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReentrantLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Lock</span>, java.io.Serializable &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>首先，ReentrantLock实现了 <strong>“<code>Lock</code>”</strong> 接口。<br>先看看Lock.java</li></ul><h1 id="1-Lock"><a href="#1-Lock" class="headerlink" title="1.Lock"></a>1.Lock</h1><p><img src="/images/Java%E5%B9%B6%E5%8F%91(%E4%B8%89)-ReentrantLock/Lock%E6%BA%90%E7%A0%81.png" alt="Lock源码"></p><p>一共就只有六个方法：</p><ul><li><code>void lock()</code>，获取锁，假如当前锁被其他线程占用，那么将会等待锁直到获取为止。</li><li><code>void lockInterruptibly()</code>，和<code>lock()</code>类似，也是获取锁，区别在于，假如当前线程在等待锁的过程中被中断，那么将会退出等待，并抛出中断异常。</li><li><code>boolean tryLock()</code>，尝试获取锁，无论是否获取都立即放，返回值代表是否获取锁。</li><li><code>boolean tryLock(long time, TimeUnit unit)</code>，尝试获取锁并设定了等待超时时间，返回值代表是否获取锁。</li><li><code>void unlock()</code>，释放锁。</li><li><code>Condition newCondition()</code>，新建一个绑定在当前Lock对象上的<code>Condition对象</code>(见tips)。</li></ul><blockquote><p>tips：Condition对象是什么？<br>简单来说，他表示一个条件，不同线程可以通过该条件来进行通信。<br>比如：某线程可以通过<code>await</code>方法注册在condition对象上进行等待，然后通过condition对象的<code>signal</code>方法将该线程唤醒。<br>类似于Object锁的<code>wait</code>和<code>notify</code>方法，但不同的是，<strong>一个Lock对象可以关联多个Condition对象，这样可以分组等待唤醒。</strong><br>此外，Condition对象还提供了和限时、中断相关的功能，丰富了线程的调度策略。</p></blockquote><hr><p>接下来，回头看看ReentrantLock是如何按照这些抽象规定来进行实现的。</p><h1 id="2-ReentrantLock"><a href="#2-ReentrantLock" class="headerlink" title="2.ReentrantLock"></a>2.ReentrantLock</h1><p>主要重点关注以下三个方面：</p><ul><li>属性：<strong>sync</strong></li><li>内部类：<strong>Sync、NonfairSync、FairSync</strong></li><li>方法<ul><li>继承&#x2F;实现方法：<strong>实现Lock的方法</strong></li><li>私有方法：暂不关注（基本上是方便开发者获取一些状态值）</li></ul></li></ul><h2 id="tips：AQS的status状态"><a href="#tips：AQS的status状态" class="headerlink" title="tips：AQS的status状态"></a>tips：AQS的status状态</h2><blockquote><p>waitStatus主要包含四个状态：</p><ul><li>0，节点初始化默认值或节点已经释放</li><li>CANCELLED为1，表示当前节点获取锁的请求已经被取消</li><li>SIGNAL为-1，表示当前节点的后续节点需要被唤醒</li><li>CONDITION为-2，表示当前节点正在等待某一个Condition对象，和条件模式相关</li><li>PROPAGATE为-3，传递共享模式下锁释放状态，和共享模式相关</li></ul></blockquote><hr><h2 id="Ⅰ-属性"><a href="#Ⅰ-属性" class="headerlink" title="Ⅰ.属性"></a>Ⅰ.属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Sync sync;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>ReentrantLock只有一个属性：<code>Sync</code>类型的sync。sync被final修饰，意味着一旦初始化，就不可修改引用了。</p><p>在ReentrantLock构造器中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantLock</span><span class="hljs-params">()</span> &#123;<br>    sync = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantLock</span><span class="hljs-params">(<span class="hljs-type">boolean</span> fair)</span> &#123;<br>    sync = fair ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">FairSync</span>() : <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里FairSync和NonfairSync两个类，看名字就能知道分别为实现公平性和非公平性的锁，下文会详解</p></blockquote><ul><li>默认无参构造器，sync将被初始化为非公平锁对象，而有参构造器中，可以通过指定参数将其初始化为公平锁还是非公平锁对象。</li></ul><h2 id="Ⅱ-内部类"><a href="#Ⅱ-内部类" class="headerlink" title="Ⅱ.内部类"></a>Ⅱ.内部类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123;<br>    ...<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NonfairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>    ...<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-Sync"><a href="#1-Sync" class="headerlink" title="1.Sync"></a>1.Sync</h3><p>Sync继承了AQS，说明AQS中预设的都可以在这里直接拿来用了。<br>Sync被abstract修饰，它提供了一些公共的逻辑，但是需要子类来进行实例化。<br>NonfairSync和FairSync是它的唯二的两个子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>Sync没有属性，看看公共方法</p><p>Sync中除了<code>void lock()</code>和<code>void readObject(java.io.ObjectInputStream s)</code>两个方法没被<code>final</code>修饰之外，<br>其余方法都被<code>final</code>修饰，意味着不可被子类修改。<br>这些方法是对AQS内部方法的封装和拓展，本身已经完整可靠，不希望被外部破坏。</p><ul><li><p><strong>非final方法：</strong></p><ul><li><strong><code>void lock()</code></strong> ，获取锁操作，这里空实现，说明需要子类根据自己的特征来进行实现。<br>FairSync和NonfairSync因为涉及公平性的差别，所以获取锁的操作肯定是不一样的，需要自己实现。</li><li><strong><code>void readObject(java.io.ObjectInputStream s)</code></strong> ，用于反序列化，不常用。可以忽略。</li></ul></li><li><p><strong>final方法：</strong></p><ul><li><p><strong><code>1. nonfairTryAcquire(int acquires)</code></strong> 非公平尝试获取锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">nonfairTryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>            setExclusiveOwnerThread(current);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current == getExclusiveOwnerThread()) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c + acquires;<br>        <span class="hljs-keyword">if</span> (nextc &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>        setState(nextc);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有一个奇怪的点，刚刚上方不是说:<strong>“<code>FairSync和NonfairSync因为涉及公平性的差别，所以获取锁的操作肯定是不一样的，需要自己实现。</code>”</strong><br>那么在Sync这个基类中，为什么会出现<strong>nonfairTryAcquire</strong>这种方法？</p><blockquote><p>猜测应该是：FairSync和NonfairSync中都需要用到该方法，那为什么FairSync中会用到<strong>nonfairTryAcquire</strong>这种非公平的方法？存疑，下文再看。</p></blockquote><p>继续，查看 <strong><code>nonfairTryAcquire</code></strong> 方法逻辑：<br>1.<code>第3行</code>，获取state，该值由AQS维护。<br>2.<code>第4行</code>，当state为0，那么代表锁状态为空闲，便可以进行一次CAS来原子的更改state(第5行)，如果state修改成功，则代表获取了锁，将当前线程置为独占线程，并返回true，否则返回false。<br>3.<code>第10行</code>，当state不为0，说明锁被占用，判断当前线程是否已经是独占线程，<code>(既然已经被占用，为什么还要判断是否是独占线程？这里就是对**“可重入性(见下tips)”**的实现)</code><br>如果占用锁的不是当前线程，那么代表获取锁失败，返回false。<br>如果正是自己，满足可重入的条件，使用nextc这个值来记录重入的次数，因为释放锁的时候也要释放相应的次数。<br>4.<code>(第12行)</code>，这里有个细节，判断nextc是否小于0，这里会有人很奇怪，代表着锁被获取的次数，总不能是负数吧？<br>因为int为16位，所能表示的最大符号位是2147483647，一旦超出就会溢出变为负数，<br>所以我们可以这样理解：<strong>ReentrantLock允许重入的最大次数就是2147483647</strong></p><blockquote><p>tips：可重入性：<br>定义：单个线程执行时重新进入同一个子程序仍然是线程安全的<br>简单来说：一个线程可以不用释放 而 重复获取一个锁n次，只是在释放的时候也需要相应的释放n次<br>可以这么理解：假如A线程在某上下文中获取了某锁，当A线程想要再次获取该锁时，不会因为锁已经被自己占用，而需要先等待锁的释放。<br>假如A线程既获得了锁，又在等待自己释放锁，那么就会造成死锁。</p></blockquote></li><li><p><strong><code>2. tryRelease(int releases)</code></strong> 释放锁<br>释放锁是一个通用操作，放在了Sync类中供子类调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState() - releases;<br>    <span class="hljs-keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">free</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>        free = <span class="hljs-literal">true</span>;<br>        setExclusiveOwnerThread(<span class="hljs-literal">null</span>);<br>    &#125;<br>    setState(c);<br>    <span class="hljs-keyword">return</span> free;<br>&#125;<br></code></pre></td></tr></table></figure><p>逻辑：返回值是一个boolean，<br>注意，这里<strong>并非</strong>返回true代表释放成功，false代表释放失败。<br>这里的返回值代表的是<strong>是否完全释放</strong>（因为可能存在重入，所以需要释放多次）</p></li><li><p><strong><code>3. protected final boolean isHeldExclusively()</code></strong> 判断当前线程释放为获得锁的独占线程</p></li><li><p><strong><code>4. final ConditionObject newCondition()</code></strong> 基于当前Lock对象新建一个Condition对象</p></li><li><p><strong><code>5. final Thread getOwner()</code></strong> 获取正在占用锁的那个线程对象</p></li><li><p><strong><code>6. final int getHoldCount()</code></strong> 获取state的数值</p></li><li><p><strong><code>7. final boolean isLocked()</code></strong> 判断锁是否空闲</p></li></ul></li></ul><hr><p>接下来了解 <strong><code>NonfairSync</code></strong> 和 <strong><code>FairSync</code></strong> ，先了解什么是公平锁和非公平锁：</p><ul><li>公平锁就是锁的分配会按照请求锁的顺序，比如AQS中的FIFO队列，实现的就是公平锁。</li><li>非公平锁就是锁的分配不用按照请求顺序，比如是抢占式的。</li></ul><blockquote><p>公平锁就保证了，只要你排队了，那么就一定能轮到你拿锁。<br>而非公平锁是抢占式的，很有可能某个线程一直抢不到锁，而又不断有新的线程加入进来抢锁，<br>所以可能该线程一直处于阻塞状态，这种状态被成为饥饿。</p></blockquote><p>那为什么还要设计非公平锁？很多情况下，非公平锁效率更高。为什么更高？现实中不应该是排队比真枪效率更高吗？</p><blockquote><p>因为非公平锁意味着后请求锁的线程可能在前面的休眠线程恢复前拿到锁，这样就有可能提高并发的性能。<br>当唤醒挂起的线程时，线程状态切换之间会产生短暂延时。<br>非公平锁就可以利用这段时间完成操作。这就是非公平锁某些时候比公平锁性能要好的原因之一。</p></blockquote><hr><h3 id="2-NonfairSync"><a href="#2-NonfairSync" class="headerlink" title="2.NonfairSync"></a>2.NonfairSync</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NonfairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">7316153563782823691L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Performs lock.  Try immediate barge, backing up to normal</span><br><span class="hljs-comment">     * acquire on failure.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>))<br>            setExclusiveOwnerThread(Thread.currentThread());<br>        <span class="hljs-keyword">else</span><br>            acquire(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>        <span class="hljs-keyword">return</span> nonfairTryAcquire(acquires);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>NonfairSync中只重写了Sync中的<code>lock()</code>和AQS中的<code>tryAcquire()</code>两个方法。</p><ul><li><strong><code>tryAcquire(int acquires)</code></strong> ，直接调用了父类 <strong><code>Sync中的nonfairTryAcquire()</code></strong></li><li><strong><code>final void lock()</code></strong> ，首先尝试一次对锁的获取，如果CAS成功，那么当前线程成功获取锁。<br>如果一次尝试失败则调用 <strong><code>AQS提供的acquire()</code></strong> 方法。</li></ul><p>lock()这里有值得讨论的。</p><ul><li><strong>可重入性</strong>。当程序调用(第12行)<code>acquire(1)</code>的时候不要忘记(AQS源码中)acquire的内部会先调用tryAcquire()来尝试获取<br>锁（而这里的tryAcquire实现是直接调用了nonfairTryAcquire），而<code>nonfairTryAcquire()</code>内部已经实现了可重入性，所以满足。</li><li><strong>非公平性</strong>。当程序调用lock()的时候，会先进行一次CAS尝试，当尝试获取锁失败时，调用acquire。<br>在acquire内部，首先调用一次tryAcquire，而nonfairTryAcquire会直接尝试获取锁，如果锁被占用且不可重入，<br>那么就会继续执行AQS中后续的排队流程。<br>虽然只有那么两次尝试抢占，但也体现了非公平性。</li></ul><h3 id="3-FairSync"><a href="#3-FairSync" class="headerlink" title="3.FairSync"></a>3.FairSync</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3000897897090466540L</span>;<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>        acquire(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Fair version of tryAcquire.  Don&#x27;t grant access unless</span><br><span class="hljs-comment">     * recursive call or no waiters or is first.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;<br>                compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>                setExclusiveOwnerThread(current);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current == getExclusiveOwnerThread()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c + acquires;<br>            <span class="hljs-keyword">if</span> (nextc &lt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>            setState(nextc);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>FairSync中也只重写了Sync中的<code>lock()</code>和AQS中的<code>tryAcquire()</code>两个方法。</p><ul><li><strong><code>final void lock()</code></strong> ，直接调用了AQS的acquire方法。</li></ul><p>主要还是从可重入性和公平性来看：</p><ul><li><strong>可重入性</strong>。再重复一遍，当程序调用(第5行)<code>acquire(1)</code>的时候不要忘记(AQS源码中)acquire的内部会先调用tryAcquire()来尝试获取<br>锁，然后看到<code>tryAcquire(int acquires)</code>方法内部，其中<code>(22-28行)</code>当锁已经被占用的时候，将会进行可重入判断，这段类似的逻辑再<code>nonfairTryAcquire()</code>中解读过。</li><li><strong>非公平性</strong>。在<code>tryAcquire(int acquires)</code>方法中，首先判断锁是否空闲(状态&#x3D;0)，<br>如果空闲，此时并不是直接尝试通过CAS获取锁，而是需要判断是否存在前置节点。如果不存在，那就说明队列中确实已经轮到当前线程尝试获取锁，<br>否则tryAcquire返回false，当前线程会执行AQS中的后续等待逻辑。这里就体现出了公平性。</li></ul><h2 id="Ⅲ-方法"><a href="#Ⅲ-方法" class="headerlink" title="Ⅲ.方法"></a>Ⅲ.方法</h2><p>分析完了三个内部类的源码，其中NonfairSync和FairSync已经做了比较完整的封装，<br>那么可以大胆猜测ReentrantLock公有方法的实现 可能只是对sync对象的简单调用。</p><p><strong>lock()和lockInterruptibly()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>    sync.lock();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lockInterruptibly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    sync.acquireInterruptibly(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>果然，只是对sync对象的lock方法进行调用，该方法在NonfairSync、FairSync已经进行了完整的实现，这里也能体现出多态。</p><p>lockInterruptibly()和lock()方法区别在于，<strong>当线程在等待锁的期间，是否立即响应中断。</strong></p><ul><li>lock方法中，线程会在等待获取锁之后，再响应中断，<code>这里是AQS中的中断信号延迟传递的机制。</code></li><li>lockInterruptibly方法中，若线程再等待锁期间被调用了中断，那么将会立即抛出中断一次。</li></ul><blockquote><p>在这里，lockInterruptibly方法直接调用了sync对象的acquireInterruptibly方法，该方法的实现存在于AQS内部</p></blockquote><p><strong><code>看到这里，可以去看看【TIPS】Java线程的中断机制</code></strong></p><hr><p>继续看方法<strong>tryLock()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> sync.nonfairTryAcquire(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里是直接调用了sync中的nonfairTryAcquire()。<br><strong>不论ReentrantLock被指定为公平锁还是非公平锁，他们的<code>尝试获取锁操作tryLock</code>都是非公平的。</strong></p><blockquote><p>所以之前提到的存疑<code>那么在Sync这个基类中，为什么会出现nonfairTryAcquire这种方法？</code>.<br>这里的设计是合理的。</p></blockquote><hr><p>剩下的方法都是简单的调用就不一一查看，感兴趣的可以去看源码。<br>到这里就结束了ReentrantLock的学习。</p><h1 id="Java线程的中断机制"><a href="#Java线程的中断机制" class="headerlink" title="Java线程的中断机制"></a>Java线程的中断机制</h1><blockquote><p>TIPS:<br><strong>1.线程在RUNNABLE状态下</strong><br>假如现在有一条线程，它的状态是RUNNABLE，若此时你调用它的 <strong><code>interrupt</code></strong> 中断方法，<br>它将继续运行，并不会抛出中断异常，而只是修改Thread对象中的一个标志中断的boolean值，<strong>true代表调用中断，false代表未被调用中断。</strong></p><p>那么这就有个问题，开发者怎么知道线程究竟有没有被调用中断？<br>这里JDK提供了两个API，一个 <strong><code>isInterrupted</code></strong> ，返回这个Thread对象内的中断状态值；另一个 <strong><code>interrupted</code></strong> ，返回这个对象内的中断状态值并将其置为false。</p><p>若需要关注某线程在RUNNABLE状态下的中断状态，那么可以轮询 <strong><code>isInterrupted</code></strong> 方法</p><p><strong>2.线程在BLOCKED&#x2F;WAITING状态下</strong><br>假如现在有一条线程，它的状态是BLOCKED或WAITING，若此时你调用它的 <strong><code>interrupt</code></strong> 中断方法，<br>如果太线程是通过调用 <strong><code>sleep</code></strong> 、 <strong><code>wait</code></strong> 等方法进入的BLOCKED或WAITING状态的，那么该线程将修改中断状态值并直接抛出中断异常。</p><p>另一方面，如果该线程是通过 <strong><code>LockSupport.park</code></strong> 方法进入的BLOCKED状态，那么不会抛出中断异常，而是将状态值置为true</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUC</tag>
      
      <tag>Java并发</tag>
      
      <tag>ReentrantLock</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java并发(二)-AQS</title>
    <link href="/2022/06/16/Java%E5%B9%B6%E5%8F%91(%E4%BA%8C)-AQS/"/>
    <url>/2022/06/16/Java%E5%B9%B6%E5%8F%91(%E4%BA%8C)-AQS/</url>
    
    <content type="html"><![CDATA[<p>独占模式详解。<br>AQS - java.util.concurrent.locks.AbstractQueuedSynchronizer源码。</p><span id="more"></span><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The synchronization state.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> state;<br></code></pre></td></tr></table></figure><ul><li>state用于判断共享资源是否正在被占用的标记为</li></ul><p>volatile保住了线程之间的可见性，就是当一个线程修改了state的值，其他线程下一次读取能读到最新值。</p><p>为什么是int而不是boolean？</p><blockquote><p>需要了解线程获取锁的两种模式，独占和共享。<br><strong>独占模式</strong>：当一个线程获取锁时，其他线程都必须等待；<br><strong>共享模式</strong>：当一个线程获取锁时，其他也想以共享模式获取锁的线程也能一起访问共享资源，但其他想以独占模式获取锁的线程需要等待。<br>说明了共享模式下，可能有多个线程正在共享资源，所以state需要表示线程占用数量，因此是int值。</p></blockquote><hr><h2 id="head、tail"><a href="#head、tail" class="headerlink" title="head、tail"></a>head、tail</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node head;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node tail;<br></code></pre></td></tr></table></figure><p>AQS中存在一个队列用于对等待线程进行管理，这个队列通过一个FIFO的双向链表来实现，</p><ul><li>head表示队列的头</li><li>tail表示队列的尾</li></ul><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p><img src="/images/Java%E5%B9%B6%E5%8F%91-AQS(%E4%BA%8C)/%E5%86%85%E9%83%A8%E7%B1%BBNode.png" alt="内部类Node"></p><p>waitStatus主要包含四个状态：</p><ul><li>0，节点初始化默认值或节点已经释放</li><li>CANCELLED为1，表示当前节点获取锁的请求已经被取消</li><li>SIGNAL为-1，表示当前节点的后续节点需要被唤醒</li><li>CONDITION为-2，表示当前节点正在等待某一个Condition对象，和条件模式相关</li><li>PROPAGATE为-3，传递共享模式下锁释放状态，和共享模式相关<br>方法predecessor是获取前置的Node</li></ul><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>思考主要两种使用场景：</p><ul><li>尝试获取锁，不管有没有获取到，立即返回.（tryAcquire）</li><li>必须获取锁，如果当前时刻锁被占用，则进行等待。（acquire）</li></ul><h2 id="tryAcquire"><a href="#tryAcquire" class="headerlink" title="tryAcquire()"></a>tryAcquire()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>tryAcquire是被<code>protected</code>修饰的方法，参数是一个int，代表对int state的增加操作，返回值是boolean，代表是否成功获得锁。<br>该方法只有一行实现<code>throw new UnsupportedOperationException()</code>，意图很明显，AQL规定基础类必须@Override方法，否则直接抛出异常。<br>因为尝试获取锁这个操作可能包含某些业务自定义的逻辑，比如是否<strong>“<code>可重入</code>”</strong>等。</p><p><strong>若上层调用tryAcquire：</strong></p><ul><li>如果返回true，线程获得锁，此时可以对相应的共享资源进行操作，使用完之后再进行释放。</li><li>如果返回false，获取锁失败：<ul><li>上层逻辑不想等待锁，那么可以自己进行相对应的处理</li><li>上层逻辑选择等待锁，那么可以直接调用acquire方法，acquire方法内部封装了复杂的排队逻辑，非常易用。</li></ul></li></ul><h2 id="acquire"><a href="#acquire" class="headerlink" title="acquire()"></a>acquire()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!tryAcquire(arg) &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg))<br>        selfInterrupt();<br>&#125;<br></code></pre></td></tr></table></figure><p>acquire是被<code>final</code>修饰，表示不允许子类擅自@Override，<br>似乎在表示：等待并获取锁，我非常可靠，直接用就行了，其他你不用管(手动&#x2F;狗头🐕)</p><h3 id="1-逻辑判断if"><a href="#1-逻辑判断if" class="headerlink" title="1.逻辑判断if"></a>1.逻辑判断if</h3><p>if包含了两部分:</p><ul><li><code>!tryAcquire(arg)</code></li><li><code>acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</code></li></ul><p>执行流程：</p><blockquote><p>tryAcquire上方说过，表示尝试获取锁，这里加了<code>!</code>，<br>如果获取锁成功，那么<code>!tryAcquire(arg)</code>为false，说明不需要参与排队，也不用继续判断下一个条件；<br>如果获取锁失败，那么<code>!tryAcquire(arg)</code>为true，说明需要进行排队，<br>那么继续执行下一个条件 -&gt; <strong>“<code>acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</code>”</strong></p></blockquote><h3 id="2-入队addWaiter"><a href="#2-入队addWaiter" class="headerlink" title="2.入队addWaiter"></a>2.入队addWaiter</h3><ul><li>if逻辑判断中的acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</li></ul><p>需要先执行addWaiter(Node.EXCLUSIVE)添加队列的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">addWaiter</span><span class="hljs-params">(Node mode)</span> &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(Thread.currentThread(), mode);<br>    <span class="hljs-comment">// Try the fast path of enq; backup to full enq on failure</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">pred</span> <span class="hljs-operator">=</span> tail;<br>    <span class="hljs-keyword">if</span> (pred != <span class="hljs-literal">null</span>) &#123;<br>        node.prev = pred;<br>        <span class="hljs-keyword">if</span> (compareAndSetTail(pred, node)) &#123;<br>            pred.next = node;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>    &#125;<br>    enq(node);<br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法作用就是将当前线程封装成一个Node，然后加入等待对接，返回值就是该Node。</p><p>执行流程：</p><blockquote><p>新建pred节点引用，指向当前节点的尾节点，如果尾节点不为空，那么下面将进行三步操作:</p><ul><li>1.将<strong>“<code>当前节点</code>”</strong>的prev指针(前指针)指向pred节点(尾节点)</li><li>2.尝试通过CAS操作将<strong>“<code>当前节点</code>”</strong>置为尾节点：if(compareAndSetTail(pred, node))<ul><li>如果返回false，说明pred节点已经不是尾结点，<br>  在上面的执行过程中，尾结点已经被其他线程修改，那么退出判断，调用enq()方法，重新执行完整的入队方法</li><li>如果返回true，说明CAS操作之前，pred节点依然是尾结点，CAS操作使当前node顺利成为尾结点。<br>  若当前node顺利成为尾节点，那么pred节点和当前node之间的相对位置已经确定，此时将pred节点的next指针指向当前node，是不会存在线程安全问题的。</li></ul></li></ul></blockquote><p><strong>由于在多线程环境下执行，有几个容易混乱且弄不懂的细节，也是该方法的重点：</strong><br>当执行到方法行<strong>第7行：“<code>if (compareAndSetTail(pred, node))</code>”：</strong></p><ul><li>1.pred引用指向的对象如果不再是<code>尾结点</code>的话，<strong>CAS会失败</strong>，-&gt; 就会执行下面的第12行：<code>enq()</code>方法</li><li>2.如果CAS成功，虽然CAS具有原子性，但是if中的第8、9行执行并不具备原子性，<br><strong>不过此时pred节点和当前节点的相对位置已经确定(CAS成功核验)，其他线程只是正在插入新的尾结点(第6行node.prev &#x3D; pred;)，并不会影响8、9的操作，所以是线程安全的</strong></li><li>3.需要记住的是，当前后两个节点建立连接的时候，首先是后节点的pre指向前节点(第6行node.prev &#x3D; pred)，当后节点成功成为尾结点后，前节点的next才会指向后节点。</li></ul><p>理解以上，当运行到13行：<code>enq(node);</code>，说明出现了两种情况之一：</p><ul><li>队列为空</li><li>快速插入失败，想要进行完整流程的插入<br>这里说的快速插入指的是7-10行的逻辑，当并发线程较少的情况，快速插入成功率很高，程序不用进入完整的插入流程，效率会更高。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">enq</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node)</span> &#123;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail;<br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// Must initialize</span><br>            <span class="hljs-keyword">if</span> (compareAndSetHead(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>()))<br>                tail = head;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            node.prev = t;<br>            <span class="hljs-keyword">if</span> (compareAndSetTail(t, node)) &#123;<br>                t.next = node;<br>                <span class="hljs-keyword">return</span> t;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的逻辑有似曾相识的感觉，<br>就是加了一个死循环，如果队列未初始化(tail &#x3D;&#x3D; null)，那么就尝试初始化，<br>如果插入尾结点失败，那么久一直不断重试，直到插入成功为止。</p><p>对比图，快速插入和完整插入<br><img src="/images/Java%E5%B9%B6%E5%8F%91-AQS(%E4%BA%8C)/addWaiter%E5%92%8Cenq.png" alt="addWaiter和enq.png"></p><blockquote><p>思考：在我们理解中，一旦addWaiter成功，进入了FIFO队列，那么应该是“生产-消费”模式，有一个消费者不断从这个队列头部获取节点，出队节点中封装的线程拥有拿锁的权限。</p></blockquote><p><strong>但是实际上AQS并没有这么做，</strong><br><strong>而是在各个线程中维护了当前Node的waitStatus，</strong><br><strong>根据不同的状态，程序做不同的操作。通过 -&gt; “<code>acquireQueued方法</code>”</strong></p><h3 id="3-核心acquireQueued"><a href="#3-核心acquireQueued" class="headerlink" title="3.核心acquireQueued"></a>3.核心acquireQueued</h3><h4 id="acquireQueued流程"><a href="#acquireQueued流程" class="headerlink" title="acquireQueued流程"></a>acquireQueued流程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">acquireQueued</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node, <span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">failed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">interrupted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> node.predecessor();<br>            <span class="hljs-keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;<br>                setHead(node);<br>                p.next = <span class="hljs-literal">null</span>; <span class="hljs-comment">// help GC</span><br>                failed = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">return</span> interrupted;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;<br>                parkAndCheckInterrupt())<br>                interrupted = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (failed)<br>            cancelAcquire(node);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先是两个变量：</p><ul><li>failed：初始为true，意思是默认失败。</li><li>interrupted：初始为false，意思是等待锁的过程中没有被中断。</li></ul><blockquote><p>使用到这两个变量的地方：<br>1.第11行，return之前，failed会改为false，代表执行成功，并返回interrupted<br>2.第15行，如果满足if判断条件，会更改interrupted为true，最终在11行被返回出去<br>3.第18行，finally中，通过failed值来进行一个名为cancelAcquire操作(即取消当前线程获取锁的行为)</p></blockquote><p>可以将acquireQueued方法分为三部分：</p><ul><li>7-11行。当前置节点为head，说明当前节点有权限去尝试拿锁，这是<code>一种约定</code>(见下tips)。<br>如果tryAcquire返回true，代表拿到了锁，那么顺理成章，函数返回。如果不满足第7行判断条件，那么进入下一阶段。</li><li>13-15行。if中包含两个方法(详细方法体后续再看)，<br>看名字是首先判断当前线程是否需要挂起等待（shouldP…）？如果需要就挂起，并且判断外部是否调用线程中断（parkA…）；<br>如果不需要，那么继续尝试拿锁。</li><li>18-19行。如果try抛出非预期异常，那么当前获取锁行为置为取消(即CANCELLED为1，表示当前节点获取锁的请求已经被取消)</li></ul><blockquote><p>tips:<br>1.<code>一个约定</code>：<em>head节点代表当前正在持有锁的节点。</em> 若当前节点的前置节点是head，那么该节点就开始自旋获取锁。一旦head节点释放，当前节点就能第一时间获取到。<br>2.interrupted变量最终被返回出去，上层acquire方法判断该值，来选择是否调用当前线程中断。这里属于一种延迟中断机制。</p></blockquote><p><img src="/images/Java%E5%B9%B6%E5%8F%91-AQS(%E4%BA%8C)/acquireQueued%E6%96%B9%E6%B3%95.png" alt="acquireQueued方法.png"></p><h4 id="shouldParkAfterFailedAcquire"><a href="#shouldParkAfterFailedAcquire" class="headerlink" title="shouldParkAfterFailedAcquire"></a>shouldParkAfterFailedAcquire</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldParkAfterFailedAcquire</span><span class="hljs-params">(Node pred, Node node)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> pred.waitStatus;<br>    <span class="hljs-keyword">if</span> (ws == Node.SIGNAL)<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * This node has already set status asking a release</span><br><span class="hljs-comment">         * to signal it, so it can safely park.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (ws &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * Predecessor was cancelled. Skip over predecessors and</span><br><span class="hljs-comment">         * indicate retry.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">do</span> &#123;<br>            node.prev = pred = pred.prev;<br>        &#125; <span class="hljs-keyword">while</span> (pred.waitStatus &gt; <span class="hljs-number">0</span>);<br>        pred.next = node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * waitStatus must be 0 or PROPAGATE.  Indicate that we</span><br><span class="hljs-comment">         * need a signal, but don&#x27;t park yet.  Caller will need to</span><br><span class="hljs-comment">         * retry to make sure it cannot acquire before parking.</span><br><span class="hljs-comment">         */</span><br>        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>若当前节点没有拿锁的权限或拿锁失败(即acquireQueued()中的第7行if)，<br>会进入shouldParkAfterFailedAcquire判断是否需要挂起(park)，方法参数是pred Node和当前Node的引用。</p><p>首先获取pred Node的waitStatus，开头说过该枚举的含义：</p><blockquote><p>0，节点初始化默认值或节点已经释放<br>CANCELLED为1，表示当前节点获取锁的请求已经被取消<br>SIGNAL为-1，表示当前节点的后续节点需要被唤醒<br>CONDITION为-2，表示当前节点正在等待某一个Condition对象，和条件模式相关<br>PROPAGATE为-3，传递共享模式下锁释放状态，和共享模式相关</p></blockquote><p>回到方法流程：</p><ul><li>3-8行。当pred的waitStatus为SIGNAL时，说明前置节点也在拿锁，并且之后将会唤醒当前节点，所以当前线程可以挂起休息，返回true。</li><li>9-17行。如果ws大于0，说明pred的waitStatus是CANCELLED，所以可以将其从队列中删除。<br>这里通过从后向前搜索，将pred指向搜索过程中第一个waitStatus不为CANCEL的节点。相当于链式的删除被CANCEL的节点。<br>然后返回false，代表当前节点不需要挂起，因为pred指向了新的Node，需要重试外层逻辑。</li><li>19-24行。到这里ws只会出现0的情况(?见下方tips)，0表示pred处于初始化默认状态，所以通过CAS将当前pred的waitStatus修改为SIGNAL，然后返回false，重试外层逻辑。<blockquote><p>tips：走到19-24这时，pred的ws还有两种可能，0或PROPAGATE，为什么不能是CONDITION？<br>因为waitStatus只有在其他条件模式下，才会被修改为CONDITION，这里不会出现，<br>并且只有在共享模式下，才可能出现waitStatus为PROPAGATE，暂时也不用管。<br>那么在独占模式下，ws只会出现0的情况。</p></blockquote></li></ul><p>如果shouldParkAfterFailedAcquire返回false，那么在进行一轮重试acquireQueued核心流程；<br>如果返回true，则代表当前节点需要被挂起，则进入 -&gt; “<code>parkAndCheckInterrupt方法</code>”**</p><h4 id="parkAndCheckInterrupt"><a href="#parkAndCheckInterrupt" class="headerlink" title="parkAndCheckInterrupt"></a>parkAndCheckInterrupt</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">parkAndCheckInterrupt</span><span class="hljs-params">()</span> &#123;<br>    LockSupport.park(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-keyword">return</span> Thread.interrupted();<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法只有两行，对当前线程进行挂起操作。<br>这里<code>LockSupport.park(this)</code>本质是通过UNSAFE下的native方法调用操作系统原语来将当前线程挂起。</p><ul><li><strong>此时当前Node中的线程阻塞在此处，直到持有锁的线程调用“<code>release方法</code>”，release方法会唤醒后续节点。</strong></li></ul><p>那么<code>return Thread.interrupted()</code>又是什么意思呢？</p><blockquote><p>因为在线程挂起期间，该线程可能会被调用中断方法，线程在LockSupport.park(挂起)期间，无法响应中断，<br>所以只有当线程被唤醒，执行到第三行，才回去检查park期间是否被调用中断，<br>如果有的话，则将改值传递出去，通过外层来响应中断。</p></blockquote><h4 id="acquireQueued总结"><a href="#acquireQueued总结" class="headerlink" title="acquireQueued总结"></a>acquireQueued总结</h4><p>通过对acquireQueued方法分析，<br>如果当前线程所在的节点处于头节点的后一个，那么它将会不断去尝试拿锁，直到获取成功。<br>否则进行判断，是否需要挂起。<br>这样能保证head之后的一个节点在自旋CAS获取锁，其他线程都已经被挂起或正在被挂起。这样能最大限度的避免无用的自旋消耗CPU</p><hr><p><strong>上面大量的线程被挂起，那么就会有唤醒的时候。当线程释放锁，那么将会尝试唤醒后续节点。-&gt; <code>release方法</code></strong></p><hr><h2 id="tryRelease"><a href="#tryRelease" class="headerlink" title="tryRelease"></a>tryRelease</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>和tryAcquire一样，tryRelease也是AQS开放给上层自由实现的抽象方法</p><h2 id="release"><a href="#release" class="headerlink" title="release"></a>release</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">release</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-keyword">if</span> (tryRelease(arg)) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-literal">null</span> &amp;&amp; h.waitStatus != <span class="hljs-number">0</span>)<br>            unparkSuccessor(h);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>假如尝试释放锁成功，下一步就是唤醒等待队列的其他节点，这里主要是看<code>unparkSuccessor(h)方法</code>，参数是head Node。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unparkSuccessor</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * If status is negative (i.e., possibly needing signal) try</span><br><span class="hljs-comment">     * to clear in anticipation of signalling.  It is OK if this</span><br><span class="hljs-comment">     * fails or if status is changed by waiting thread.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> node.waitStatus;<br>    <span class="hljs-keyword">if</span> (ws &lt; <span class="hljs-number">0</span>)<br>        compareAndSetWaitStatus(node, ws, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Thread to unpark is held in successor, which is normally</span><br><span class="hljs-comment">     * just the next node.  But if cancelled or apparently null,</span><br><span class="hljs-comment">     * traverse backwards from tail to find the actual</span><br><span class="hljs-comment">     * non-cancelled successor.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> node.next;<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> || s.waitStatus &gt; <span class="hljs-number">0</span>) &#123;<br>        s = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail; t != <span class="hljs-literal">null</span> &amp;&amp; t != node; t = t.prev)<br>            <span class="hljs-keyword">if</span> (t.waitStatus &lt;= <span class="hljs-number">0</span>)<br>                s = t;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (s != <span class="hljs-literal">null</span>)<br>        LockSupport.unpark(s.thread);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>0，节点初始化默认值或节点已经释放<br>CANCELLED为1，表示当前节点获取锁的请求已经被取消<br>SIGNAL为-1，表示当前节点的后续节点需要被唤醒<br>CONDITION为-2，表示当前节点正在等待某一个Condition对象，和条件模式相关<br>PROPAGATE为-3，传递共享模式下锁释放状态，和共享模式相关</p></blockquote><p><strong>获取head的waitStatus，如果不为0，那么将其置为0，表示锁已释放。</strong><br>接下来获取后续节点，如果后续节点为null或处于CANCELED状态，<br>那么<code>从后往前(见tips)</code>搜索，找到除了head外，最靠前且非CANCELED状态的Node，对其进行唤醒，让它起来尝试拿锁。</p><p>这时，拿锁、挂起、释放、唤醒都能够高效进行</p><blockquote><p>tips：为什么是从后往前？而不是从头开始向尾部搜索。<br>在入队操作addWaiter方法中，前后节点的建立顺序。<br>1.后节点的pre指向前节点<br>2.前节点的next才会指向后节点<br>这两步的操作并不是原子的，也就是如果从前往后搜索，可能前节点的next还未建立好，那么搜索会中断</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUC</tag>
      
      <tag>Java并发</tag>
      
      <tag>AQS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java并发(一)-锁</title>
    <link href="/2022/06/16/Java%E5%B9%B6%E5%8F%91(%E4%B8%80)-%E9%94%81/"/>
    <url>/2022/06/16/Java%E5%B9%B6%E5%8F%91(%E4%B8%80)-%E9%94%81/</url>
    
    <content type="html"><![CDATA[<p>锁、悲观锁(对象锁)机制</p><span id="more"></span><h1 id="什么是锁？"><a href="#什么是锁？" class="headerlink" title="什么是锁？"></a>什么是锁？</h1><p>在并发环境下，会出现多个线程对一个资源进行争抢的情况。为了解决争抢时引发的问题，就出现了锁。</p><p>锁是用来控制多个线程访问共享资源的方式，一般来说，一个锁能够防止多个线程同时访问共享资源。</p><blockquote><p>可以认为本质上就是在临界资源上对线程的一种串行化。</p></blockquote><h2 id="乐观锁、悲观锁"><a href="#乐观锁、悲观锁" class="headerlink" title="乐观锁、悲观锁"></a>乐观锁、悲观锁</h2><p><img src="/images/Java%E5%B9%B6%E5%8F%91-%E9%94%81(%E4%B8%80)/%E4%B9%90%E8%A7%82%E9%94%81%E6%82%B2%E8%A7%82%E9%94%81.png" alt="乐观锁悲观锁"></p><h1 id="Java锁机制"><a href="#Java锁机制" class="headerlink" title="Java锁机制"></a>Java锁机制</h1><h2 id="Jvm运行结构"><a href="#Jvm运行结构" class="headerlink" title="Jvm运行结构"></a>Jvm运行结构</h2><p>Jvm运行内存结构主要五个部分：程序计数器(PC寄存器)、JVM栈、Native方法栈、堆、方法区。</p><p><img src="/images/Java%E5%B9%B6%E5%8F%91-%E9%94%81(%E4%B8%80)/jvm%E8%BF%90%E8%A1%8C%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84.png" alt="jvm运行内存结构"></p><ul><li>对蓝色区域进行争抢的时候，就会引发难以预料的情况。</li></ul><blockquote><p>在Java中，锁主要采用了两种实现方式：<br><code>1</code>、基于Object的悲观锁（本文主要讲解学习的）<br><code>2</code>、基于CAS的乐观锁。</p></blockquote><h2 id="对象、对象头"><a href="#对象、对象头" class="headerlink" title="对象、对象头"></a>对象、对象头</h2><p>在Java中，每个Object，都拥有一把锁，锁存放在对象头中，记录当前对象被那个线程占用。</p><ul><li>Java对象分为三个部分：<ul><li>对象头</li><li>实例数据</li><li>对齐填充字节</li></ul></li></ul><blockquote><p>实例数据就是你在初始化对象时设定的属性和状态内容。<br>对齐填充字节是为了满足 “Java对象大小是8字节的倍数” 这一条件而设计的，为对象填充一些无用字节，大可不必理会。</p></blockquote><hr><ul><li>对象头是重点，对象头包含了两部分:<ul><li>Mark Word</li><li>Class Pointer</li></ul></li></ul><blockquote><p>相比较于实例数据，对象头属于一些额储存开销，所以被设计的极小来提升效率（一般为232bit或264bit）<br>ClassPointer是一个指针，指向当前对象类型所在方法区中的Class信息。<br>Mark Word存储了很多当前对象运行时的状态信息，比如HashCode、锁状态标志、指向锁记录的指针、偏向线程Id、锁标志位等等。</p></blockquote><p>MarkWord图<br><img src="/images/Java%E5%B9%B6%E5%8F%91-%E9%94%81(%E4%B8%80)/MarkWord.png" alt="MarkWord"></p><blockquote><p>Mark Word只有32bit（或64bit）并且它是非结构化的。<br>这样，在不同的锁标识位下，不同字段可以重用不同的比特位，节省空间。</p></blockquote><p>上图中，这把抽象的 <strong><code>“锁”</code></strong> 的信息就储存在对象头的MarkWord中。<br>重点关注最后两位，这两位代表锁标志位，分别对应 <strong>“<code>无锁</code>”</strong> , <strong>“<code>偏向锁</code>”</strong> , <strong>“<code>轻量级锁</code>”</strong> , <strong>“<code>重量级锁</code>”</strong> 这四种状态。<br>锁状态是只能升级，不能降级。 <strong>无锁-&gt;偏向锁-&gt;轻量级锁-&gt;重量级锁</strong></p><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p>在Java中，启用对象锁的方式是使用 <strong>“<code>synchronized</code>”</strong> 关键字。</p><blockquote><p>synchronized被编译后会生成<code>monitorenter</code>和<code>monitorexit</code>两个字节码指令，依赖这两个指令来进行线程同步。</p></blockquote><p><img src="/images/Java%E5%B9%B6%E5%8F%91-%E9%94%81(%E4%B8%80)/synchronized%E7%BC%96%E8%AF%91%E5%90%8E.jpg" alt="synchronized编译后"></p><hr><p>monitor(管程&#x2F;监视器)<br><img src="/images/Java%E5%B9%B6%E5%8F%91-%E9%94%81(%E4%B8%80)/monitor.png" alt="monitor"></p><p>上图模拟流程：<br>1.<code>Entry Set</code>中聚集了一些想要进入<code>Monitor</code>的线程，处于<code>waiting</code>状态。<br>2.假设某个名为<code>A线程</code>成功进入<code>Monitor</code>，那么它就处于<code>active</code>状态。<br>3.此时线程执行途中，遇到一个判断条件，需要它暂时让出执行权，那么它将进入<code>Wait Set</code>，状态也被标记为<code>waiting</code>。<br>4.这时<code>Entry Set</code>中的其他线程就有机会进入<code>Monitor</code>，假设一个<code>线程B</code>成功进入并且顺利完成，<br>那么它可以通过<code>notify</code>的行是来唤醒<code>Wait Set</code>中的<code>线程A</code>，让<code>线程A</code>再次进入<code>Monitor</code>，执行完成后便退出。</p><p>这就是synchronized关键字所实现的同步机制，需要注意的：</p><blockquote><p>synchronized有性能问题，因为 <code>synchronized</code> 依赖 <code>monitor</code> 依赖 <code>Mutex Lock</code>(操作系统提供的)<br>所以每当挂起或者唤醒一个线程都要切换到操作系统的内核态，这个操作是比较重量级的。<br>在某些情况下，甚至切换时间本身就会超出线程执行任务的时间。</p></blockquote><p>但是从Java6开始，synchronized进行了优化，引入了 “<code>偏向锁</code>” , “<code>轻量级锁</code>” 的概念。<br>因此对象锁总共有四种状态，从低到高分别是 <strong>“<code>无锁</code>”</strong> , <strong>“<code>偏向锁</code>”</strong> , <strong>“<code>轻量级锁</code>”</strong> , <strong>“<code>重量级锁</code>”</strong> ，这就分别对应Mark Word中锁标记位的四种状态<br>锁状态是只能升级，不能降级。 <strong>无锁-&gt;偏向锁-&gt;轻量级锁-&gt;重量级锁</strong></p><h2 id="对象锁的四种状态"><a href="#对象锁的四种状态" class="headerlink" title="对象锁的四种状态"></a>对象锁的四种状态</h2><h3 id="无锁"><a href="#无锁" class="headerlink" title="无锁"></a>无锁</h3><p>无锁顾名思义就是没有对资源进行操作系统级别（Mute Lock）的锁定。</p><p>在这个基础上，“<strong>无锁</strong>” 其实有两种语义。</p><ul><li>某种资源不会出现在多线程环境下，或者即使出现在多线程环境下也不会出现线程竞争的情况，<br>那么确实无需堆这个资源进行任何的同步保护，直接给各个线程随意调用就可以。</li><li>资源会被竞争，但是不使用操作系统同步原语对共享资源进行锁定，而是通过一些其他的机制来控制同步。<br>比如CAS(CompareAndSwap)，通过函数级别的锁，进行 “无锁” 编程。<br>大部分情况下，无锁效率更高，但是并非意味着无锁能够全面替代有锁。</li></ul><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><ul><li><p>概念<br>假设一个对象被加锁了，但在实际运行时，只有一条线程会获取这个对象锁，<br>那么最理想的方式，是不通过系统状态切换，也不通过CAS，只在用户态把这件事做掉。<br>设想的是，最好对象锁能认识这个线程，只要这个线程过来，那么对象直接把锁交出去。<br>我们可以认为这个对象锁偏爱这个线程，所以被称为 “偏向锁”</p></li><li><p>是如何实现的？<br>在Mark Word中，当锁的标志位是01，(详细可见上图MarkWord)<br>那么判断倒数第三个bit是否为1，如果是1，代表当前对象的锁状态为偏向锁，<br>于是再去读Mark Word的前23个bit，这23个bit就是线程ID，<br>通过线程ID来确定想要获得的对象锁的线程是不是“被偏爱的线程”</p></li></ul><p>假设情况发送了变化，对象发现不只有一个线程，而是多个线程正在竞争锁，那么偏向锁会升级为<strong>“<code>轻量级锁</code>”</strong></p><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><blockquote><p>(在MarkWord中的占位详细可见上图MarkWord，以及jvm虚拟机见上上图jvm运行内存结构)</p></blockquote><p>不再是用MarkWord中的线程ID来找到线程和锁之间的绑定关系。</p><p>当一个线程想要获得某个对象的锁时，通过锁标志位00来知道是轻量级锁，<br>这时，线程会在自己的虚拟机中开辟一块 <strong>“ Lock Record ”</strong> 的空间。关于虚拟机栈，是线程私有的</p><p><strong>Lock Record 存放的是对象头的Mark Word的副本以及Owner指针。</strong><br>线程通过CAS去尝试获取锁，一旦获得，那么将会复制该对象的Mark Word到虚拟机栈的Lock Record中，并且将Lock Record中的Owner指针指向该对象锁。<br>另一方面，对象的Mark Word中的前30bit将生成一个指针，指向持有该对象锁的线程虚拟机栈中的Lock Record。<br>这样就实现了线程和对象锁的绑定，互相知道对方的存在。</p><p>这时，这个对象被锁定了，获取了这个对象锁的线程就可以去执行一些任务。<br>如果其他线程想要获取这个对象怎么办？-此时其他线程将会<strong>自旋等待</strong>（见下方小tips）。</p><p>假如对象锁被一个线程持有着，此时也有一个线程正在自旋等待，<br>如果同时又有多个线程想要获取这个对象锁。<br>也就是说，一旦自旋等待的线程数超过1个，那么轻量级锁将会升级成为<strong>“<code>重量级锁</code>”</strong></p><blockquote><p>知识盲区？（也有说 自旋个数超过CPU核数的一半  或者自旋次数超过10次才会升级成重量级锁）</p></blockquote><blockquote><p>tips：<br>自旋：可以理解为一种轮询，自己不断循环尝试去看锁有没有释放，<br>如果释放了，就获取，没有释放就进行下一轮轮询，这种方式区别于被操作系统阻塞，如果对象锁很快被释放，自旋去获得锁完全在用户空间解决，不需要系统中断和线程恢复，所以效率更高。<br>自旋相当于CPU在空转，如果长时间自旋，将会浪费CPU自源，于是出现一种叫做<strong>“自适应自旋”</strong>的优化，<br>简单来说就是自旋时间不再固定，是由上一次在同一个锁上的自旋时间以及锁的状态来决定。<br>比如：当前正在自旋等待的线程刚刚成功获得过锁，但是锁目前被其他线程持有，那么虚拟机会任务下次自旋很有可能会再次成功，进而允许更长的自旋时间。</p></blockquote><h3 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h3><p>如果被标记为重量级锁，那么就会和最初的synchronized那样，通过Monitor来对线程进行控制，此时将会使用同步原语来锁定资源，对线程的控制也最为严格</p><p><img src="/images/Java%E5%B9%B6%E5%8F%91-%E9%94%81(%E4%B8%80)/monitor.png" alt="重量级锁"></p><h3 id="对象锁的状态变化"><a href="#对象锁的状态变化" class="headerlink" title="对象锁的状态变化"></a>对象锁的状态变化</h3><p><img src="/images/Java%E5%B9%B6%E5%8F%91-%E9%94%81(%E4%B8%80)/%E5%AF%B9%E8%B1%A1%E9%94%81%E7%9A%84%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96.png" alt="对象锁的状态变化"></p><h1 id="思考？理解"><a href="#思考？理解" class="headerlink" title="思考？理解"></a>思考？理解</h1><h3 id="为什么有轻量级锁。直接使用monitor不行吗？"><a href="#为什么有轻量级锁。直接使用monitor不行吗？" class="headerlink" title="为什么有轻量级锁。直接使用monitor不行吗？"></a>为什么有轻量级锁。直接使用monitor不行吗？</h3><blockquote><p>可以的，但如果有多个线程使用同一个资源，但是他们没有竞争。<br><code>线程1</code>在13:00点使用，<code>线程2</code>在14:00点使用，没有竞争。如果还用monitor是不是有点杀鸡用牛刀了。<br>为了提升性能，提出了轻量级锁。不再用对象关联monitor了，而是对象的mark word字段和线程栈的 lock record进行交换作为锁。<br>如果有锁重入，就会创建多个lock record放入线程栈，<br>那么问题有来了，<code>如果重入多了，多次创建lock record不是也消耗性能吗？</code><br>所以提出了偏向锁。对线头设置线程id，解决重入问题。</p></blockquote><h3 id="理清下这些锁在什么场景下使用？"><a href="#理清下这些锁在什么场景下使用？" class="headerlink" title="理清下这些锁在什么场景下使用？"></a>理清下这些锁在什么场景下使用？</h3><ul><li>偏向锁：只有一个线程，没有其他线程</li><li>轻量级锁：多个线程但是没有竞争<br>这点尤为重要，轻量级锁是解决不了锁竞争的。轻量级锁解决的问题是在多线程没有竞争下，仍旧关联monitor的问题。</li><li>重量级锁：多个线程有竞争</li></ul><h3 id="锁升级的过程："><a href="#锁升级的过程：" class="headerlink" title="锁升级的过程："></a>锁升级的过程：</h3><blockquote><p>对象默认是开启<code>偏向锁</code>的，当一个线程使用时，对象mark word会设置该线程的id，<br>如果还有另外一个线程 会升级为<code>轻量级锁</code>，<br>如果<code>轻量级锁</code>升级<code>失败</code>，说明有线程正在使用资源，发生了资源竞争，会升级为<code>重量级锁</code>。<br>如果<code>轻量级锁</code>升级<code>成功</code>了，在释放锁的使用，对象会变成<code>无锁状态</code>，不再是<code>偏向</code>的，下次加锁是会直接在<code>轻量级锁</code>。</p></blockquote><h3 id="还有一点可能有异议？"><a href="#还有一点可能有异议？" class="headerlink" title="还有一点可能有异议？"></a>还有一点可能有异议？</h3><blockquote><p>自旋的过程是发生在有锁竞争的情况下，所以该锁已经是<code>重量级锁</code>了。<br>自旋是已经升级为<code>重量级锁</code>入队之前进行的自旋，自旋失败会入队排队，但此时已经是<code>重量级锁</code>了，<br>从<code>偏项锁</code>升级为<code>轻量级锁</code>的时候就一次cas，成功就成功，不成功就升级为<code>重量级锁</code>。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>锁</tag>
      
      <tag>JUC</tag>
      
      <tag>Java并发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring专题-知识点</title>
    <link href="/2022/06/15/Spring%E4%B8%93%E9%A2%98-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2022/06/15/Spring%E4%B8%93%E9%A2%98-%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>Spring专题-知识点，面试回答思路整理。</p><span id="more"></span><h1 id="1、谈谈Spring-IOC的理解，原理与实现"><a href="#1、谈谈Spring-IOC的理解，原理与实现" class="headerlink" title="1、谈谈Spring IOC的理解，原理与实现?"></a>1、谈谈Spring IOC的理解，原理与实现?</h1><h2 id="总"><a href="#总" class="headerlink" title="总:"></a>总:</h2><ul><li><p>控制反转：理论思想，原来的对象是由使用者来进行控制，有了spring之后，可以把整个对象交给spring来帮我们进行管理</p></li><li><p>DI：依赖注入，把对应的属性的值注入到具体的对象中，@Autowired，populateBean完成属性值的注入</p></li><li><p>容器：存储对象，使用map结构来存储，在spring中一般存在三级缓存，singletonObjects存放完整的bean对象,整个bean的生命周期，从创建到使用到销毁的过程全部都是由容器来管理（bean的生命周期）</p></li></ul><h2 id="分"><a href="#分" class="headerlink" title="分:"></a>分:</h2><p><code>1、</code>一般聊ioc容器的时候要涉及到容器的创建过程（beanFactory,DefaultListableBeanFactory）,向bean工厂中设置一些参数（BeanPostProcessor,Aware接口的子类）等等属性</p><p><code>2</code>、加载解析bean对象，准备要创建的bean对象的定义对象beanDefinition,(xml或者注解的解析过程)</p><p><code>3</code>、beanFactoryPostProcessor的处理，此处是扩展点，PlaceHolderConfigurSupport,ConfigurationClassPostProcessor</p><p><code>4</code>、BeanPostProcessor的注册功能，方便后续对bean对象完成具体的扩展功能</p><p><code>5</code>、通过反射的方式讲BeanDefinition对象实例化成具体的bean对象，</p><p><code>6</code>、bean对象的初始化过程（填充属性，调用aware子类的方法，调用BeanPostProcessor前置处理方法，调用init-mehtod方法，调用BeanPostProcessor的后置处理方法）</p><p><code>7</code>、生成完整的bean对象，通过getBean方法可以直接获取</p><p><code>8</code>、销毁过程</p><h1 id="2、谈一下spring-IOC的底层实现"><a href="#2、谈一下spring-IOC的底层实现" class="headerlink" title="2、谈一下spring IOC的底层实现"></a>2、谈一下spring IOC的底层实现</h1><ul><li><p>X底层实现：工作原理，过程，数据结构，流程，设计模式，设计思想</p></li><li><p>√ 你对他的理解和你了解过的实现过程</p></li><li><p>反射，工厂，设计模式（会的说，不会的不说），关键的几个方法【createBeanFactory，getBean,doGetBean,createBean,doCreateBean,createBeanInstance(getDeclaredConstructor,newinstance),populateBean,initializingBean】</p></li></ul><p><code>1</code>、先通过createBeanFactory创建出一个Bean工厂（DefaultListableBeanFactory）</p><p><code>2</code>、开始循环创建对象，因为容器中的bean默认都是单例的，所以优先通过getBean,doGetBean从容器中查找，找不到的话，</p><p><code>3</code>、通过createBean,doCreateBean方法，以反射的方式创建对象，一般情况下使用的是无参的构造方法（getDeclaredConstructor，newInstance）</p><p><code>4</code>、进行对象的属性填充populateBean</p><p><code>5</code>、进行其他的初始化操作（initializingBean）</p><h1 id="3、描述一下bean的生命周期？"><a href="#3、描述一下bean的生命周期？" class="headerlink" title="3、描述一下bean的生命周期？"></a>3、描述一下bean的生命周期？</h1><p>【背图-见最后】记住图中的流程</p><p>在表述的时候不要只说图中有的关键点，要学会扩展描述：</p><p><code>1</code>、实例化bean：反射的方式生成对象</p><p><code>2</code>、填充bean的属性：populateBean(),循环依赖的问题（三级缓存）</p><p><code>3</code>、调用aware接口相关的方法：invokeAwareMethod(完成BeanName,BeanFactory,BeanClassLoader对象的属性设置)</p><p><code>4</code>、调用BeanPostProcessor中的前置处理方法：使用比较多的有（ApplicationContextPostProcessor,设置ApplicationContext,Environment,ResourceLoader,EmbeddValueResolver等对象）</p><p><code>5</code>、调用initmethod方法：invokeInitmethod(),判断是否实现了initializingBean接口，如果有，调用afterPropertiesSet方法，没有就不调用</p><p><code>6</code>、调用BeanPostProcessor的后置处理方法：spring的aop就是在此处实现的，AbstractAutoProxyCreator注册Destuction相关的回调接口：钩子函数</p><p><code>7</code>、获取到完整的对象，可以通过getBean的方式来进行对象的获取</p><p><code>8</code>、销毁流程，1.判断是否实现了DispoableBean接口，2.调用destroyMethod方法</p><h1 id="4、Spring-是如何解决循环依赖的问题的？"><a href="#4、Spring-是如何解决循环依赖的问题的？" class="headerlink" title="4、Spring 是如何解决循环依赖的问题的？"></a>4、Spring 是如何解决循环依赖的问题的？</h1><blockquote><p>三级缓存，提前暴露对象，aop</p></blockquote><ul><li><p>总：什么是循环依赖问题，A依赖B,B依赖A</p></li><li><p>分：先说明bean的创建过程：实例化，初始化（填充属性）</p><p>  <code>1</code>、先创建A对象，实例化A对象，此时A对象中的b属性为空，填充属性b</p><p>  <code>2</code>、从容器中查找B对象，如果找到了，直接赋值不存在循环依赖问题（不通），找不到直接创建B对象</p><p>  <code>3</code>、实例化B对象，此时B对象中的a属性为空，填充属性a</p><p>  <code>4</code>、从容器中查找A对象，找不到，直接创建</p></li><li><p>形成闭环的原因</p></li></ul><p>此时，如果仔细琢磨的话，会发现A对象是存在的，只不过此时的A对象不是一个完整的状态，只完成了实例化但是未完成初始化，如果在程序调用过程中，拥有了某个对象的引用，能否在后期给他完成赋值操作，可以优先把非完整状态的对象优先赋值，等待后续操作来完成赋值，相当于提前暴露了某个不完整对象的引用，所以解决问题的核心在于实例化和初始化分开操作，这也是解决循环依赖问题的关键，</p><p>当所有的对象都完成实例化和初始化操作之后，还要把完整对象放到容器中，此时在容器中存在对象的几个状态，完成实例化&#x3D;但未完成初始化，完整状态，因为都在容器中，所以要使用不同的map结构来进行存储，此时就有了一级缓存和二级缓存，如果一级缓存中有了，那么二级缓存中就不会存在同名的对象，因为他们的查找顺序是1，2，3这样的方式来查找的。一级缓存中放的是完整对象，二级缓存中放的是非完整对象</p><p>为什么需要三级缓存？三级缓存的value类型是ObjectFactory,是一个函数式接口，存在的意义是保证在整个容器的运行过程中同名的bean对象只能有一个。</p><p>如果一个对象需要被代理，或者说需要生成代理对象，那么要不要优先生成一个普通对象？要</p><p>普通对象和代理对象是不能同时出现在容器中的，因此当一个对象需要被代理的时候，就要使用代理对象覆盖掉之前的普通对象，在实际的调用过程中，是没有办法确定什么时候对象被使用，所以就要求当某个对象被调用的时候，优先判断此对象是否需要被代理，类似于一种回调机制的实现，因此传入lambda表达式的时候，可以通过lambda表达式来执行对象的覆盖过程，getEarlyBeanReference()</p><p>因此，所有的bean对象在创建的时候都要优先放到三级缓存中，在后续的使用过程中，如果需要被代理则返回代理对象，如果不需要被代理，则直接返回普通对象</p><h1 id="4-1、缓存的放置时间和删除时间"><a href="#4-1、缓存的放置时间和删除时间" class="headerlink" title="4.1、缓存的放置时间和删除时间"></a>4.1、缓存的放置时间和删除时间</h1><ul><li><p>三级缓存：createBeanInstance之后：addSingletonFactory</p></li><li><p>二级缓存：第一次从三级缓存确定对象是代理对象还是普通对象的时候，同时删除三级缓存 getSingleton</p></li><li><p>一级缓存：生成完整对象之后放到一级缓存，删除二三级缓存:addSingleton</p></li></ul><h1 id="5、Bean-Factory与FactoryBean有什么区别？"><a href="#5、Bean-Factory与FactoryBean有什么区别？" class="headerlink" title="5、Bean Factory与FactoryBean有什么区别？"></a>5、Bean Factory与FactoryBean有什么区别？</h1><ul><li><p>相同点：都是用来创建bean对象的</p></li><li><p>不同点：使用BeanFactory创建对象的时候，必须要遵循严格的生命周期流程，太复杂了，，如果想要简单的自定义某个对象的创建，同时创建完成的对象想交给spring来管理，那么就需要实现FactroyBean接口了</p><p>  isSingleton:是否是单例对象</p><p>  getObjectType:获取返回对象的类型</p><p>  getObject:自定义创建对象的过程(new，反射，动态代理)</p></li></ul><h1 id="6、Spring中用到的设计模式"><a href="#6、Spring中用到的设计模式" class="headerlink" title="6、Spring中用到的设计模式?"></a>6、Spring中用到的设计模式?</h1><p>单例模式：bean默认都是单例的</p><p>原型模式：指定作用域为prototype</p><p>工厂模式：BeanFactory</p><p>模板方法：postProcessBeanFactory,onRefresh,initPropertyValue</p><p>策略模式：XmlBeanDefinitionReader,PropertiesBeanDefinitionReader</p><p>观察者模式：listener，event，multicast</p><p>适配器模式：Adapter</p><p>装饰者模式：BeanWrapper</p><p>责任链模式：使用aop的时候会先生成一个拦截器链</p><p>代理模式：动态代理</p><p>委托者模式：delegate</p><p>。。。。。。。。。等。。。</p><h1 id="7、Spring的AOP的底层实现原理"><a href="#7、Spring的AOP的底层实现原理" class="headerlink" title="7、Spring的AOP的底层实现原理?"></a>7、Spring的AOP的底层实现原理?</h1><blockquote><p>动态代理。aop是ioc的一个扩展功能，先有的ioc，再有的aop，只是在ioc的整个流程中新增的一个扩展点而已：BeanPostProcessor</p></blockquote><ul><li><p>总：aop概念，应用场景，动态代理</p></li><li><p>分：bean的创建过程中有一个步骤可以对bean进行扩展实现，aop本身就是一个扩展功能，所以在BeanPostProcessor的后置处理方法中来进行实现</p><p>  <code>1</code>、代理对象的创建过程（advice，切面，切点）</p><p>  <code>2</code>、通过jdk或者cglib的方式来生成代理对象</p><p>  <code>3</code>、在执行方法调用的时候，会调用到生成的字节码文件中，直接回找到DynamicAdvisoredInterceptor类中的intercept方法，从此方法开始执行</p><p>  <code>4</code>、根据之前定义好的通知来生成拦截器链</p><p>  <code>5</code>、从拦截器链中依次获取每一个通知开始进行执行，在执行过程中，为了方便找到下一个通知是哪个，会有一个CglibMethodInvocation的对象，找的时候是从-1的位置一次开始查找并且执行的。</p></li></ul><h1 id="8、Spring的事务是如何回滚的-事务管理是如何实现的？"><a href="#8、Spring的事务是如何回滚的-事务管理是如何实现的？" class="headerlink" title="8、Spring的事务是如何回滚的?事务管理是如何实现的？"></a>8、Spring的事务是如何回滚的?事务管理是如何实现的？</h1><ul><li><p>总：spring的事务是由aop来实现的，首先要生成具体的代理对象，然后按照aop的整套流程来执行具体的操作逻辑，正常情况下要通过通知来完成核心功能，但是事务不是通过通知来实现的，而是通过一个TransactionInterceptor来实现的，然后调用invoke来实现具体的逻辑</p></li><li><p>分：</p><p>  <code>1</code>、先做准备工作，解析各个方法上事务相关的属性，根据具体的属性来判断是否开始新事务</p><p>  <code>2</code>、当需要开启的时候，获取数据库连接，关闭自动提交功能，开起事务</p><p>  <code>3</code>、执行具体的sql逻辑操作</p><p>  <code>4</code>、在操作过程中，如果执行失败了，那么会通过completeTransactionAfterThrowing看来完成事务的回滚操作，回滚的具体逻辑是通过doRollBack方法来实现的，实现的时候也是要先获取连接对象，通过连接对象来回滚</p><p>  <code>5</code>、如果执行过程中，没有任何意外情况的发生，那么通过commitTransactionAfterReturning来完成事务的提交操作，提交的具体逻辑是通过doCommit方法来实现的，实现的时候也是要获取连接，通过连接对象来提交</p><p>  <code>6</code>、当事务执行完毕之后需要清除相关的事务信息cleanupTransactionInfo</p></li></ul><p>如果想要聊的更加细致的话，需要知道TransactionInfo,TransactionStatus,</p><h1 id="9、谈一下spring事务传播？"><a href="#9、谈一下spring事务传播？" class="headerlink" title="9、谈一下spring事务传播？"></a>9、谈一下spring事务传播？</h1><ul><li>传播特性有几种？7种<blockquote><p>【Required】【Requires_new】【nested】【Support】【Not_Support】【Never】【Mandatory】</p></blockquote></li></ul><p><code>Q1</code>、 某一个事务嵌套另一个事务的时候怎么办？<br><code>Q2</code>、 A方法调用B方法，AB方法都有事务，并且传播特性不同，那么A如果有异常，B怎么办，B如果有异常，A怎么办？</p><ul><li><p>总：事务的传播特性指的是不同方法的嵌套调用过程中，事务应该如何进行处理，是用同一个事务还是不同的事务，当出现异常的时候会回滚还是提交，两个方法之间的相关影响，在日常工作中，使用比较多的是required，Requires_new,nested</p></li><li><p>分：<br>  <code>1</code>、先说事务的不同分类，可以分为三类：支持当前事务，不支持当前事务，嵌套事务</p><p>  <code>2</code>、如果外层方法是required，内层方法是，required,requires_new,nested</p><p>  <code>3</code>、如果外层方法是requires_new，内层方法是，required,requires_new,nested</p><p>  <code>4</code>、如果外层方法是nested，内层方法是，required,requires_new,nested</p></li></ul><h1 id="10、【总览图】"><a href="#10、【总览图】" class="headerlink" title="10、【总览图】"></a>10、【总览图】</h1><p><img src="/images/Spring%E4%B8%93%E9%A2%98-%E7%9F%A5%E8%AF%86%E7%82%B9/spring%E6%BA%90%E7%A0%81.jpg" alt="总览图.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信公众号开发配置(个人订阅号)</title>
    <link href="/2022/06/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE(%E4%B8%AA%E4%BA%BA%E8%AE%A2%E9%98%85%E5%8F%B7)/"/>
    <url>/2022/06/13/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE(%E4%B8%AA%E4%BA%BA%E8%AE%A2%E9%98%85%E5%8F%B7)/</url>
    
    <content type="html"><![CDATA[<p>好多年前申请了一个微信公众号，都冻结好几回了，之前看到朋友在弄，我也尝试弄一个看看。【简洁版】</p><span id="more"></span><h1 id="一、公众号"><a href="#一、公众号" class="headerlink" title="一、公众号"></a>一、公众号</h1><h2 id="1-申请"><a href="#1-申请" class="headerlink" title="1.申请"></a>1.申请</h2><p>这个还是需要去到官方，自行申请使用</p><blockquote><p><a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a></p></blockquote><h2 id="2-文档"><a href="#2-文档" class="headerlink" title="2.文档"></a>2.文档</h2><p>官方文档，建议阅读一下，也可以跳过，先按照步骤配置部署，后续再看</p><blockquote><p><a href="https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Overview.html">https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Overview.html</a></p></blockquote><h1 id="二、Java代码"><a href="#二、Java代码" class="headerlink" title="二、Java代码"></a>二、Java代码</h1><h2 id="1-初始代码"><a href="#1-初始代码" class="headerlink" title="1.初始代码"></a>1.初始代码</h2><p>官方提供非常方便的初始化代码。clone到本地，打开</p><blockquote><p><a href="https://github.com/binarywang/weixin-java-mp-demo">https://github.com/binarywang/weixin-java-mp-demo</a></p></blockquote><h2 id="2-修改代码"><a href="#2-修改代码" class="headerlink" title="2.修改代码"></a>2.修改代码</h2><h3 id="2-1-文件准备"><a href="#2-1-文件准备" class="headerlink" title="2.1.文件准备"></a>2.1.文件准备</h3><ul><li>复制application.yml.template模板文件，粘贴为application.yml<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE(%E4%B8%AA%E4%BA%BA%E8%AE%A2%E9%98%85%E5%8F%B7)/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%B2%98%E8%B4%B4%E4%BF%AE%E6%94%B9.jpg" alt="配置文件粘贴修改.jpg"></li></ul><h3 id="2-2-登录公众号官网"><a href="#2-2-登录公众号官网" class="headerlink" title="2.2.登录公众号官网"></a>2.2.登录公众号官网</h3><ul><li>查看帐号appId，secret，token，aesKey(测试帐号无)<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE(%E4%B8%AA%E4%BA%BA%E8%AE%A2%E9%98%85%E5%8F%B7)/%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE%E6%9F%A5%E7%9C%8B.png" alt="密钥配置查看.png"></li></ul><blockquote><p>测试帐号是没有aesKey，不需要配置可以空，token可以自定义，测试为明文易于开发</p></blockquote><h3 id="2-3-修改application-yml"><a href="#2-3-修改application-yml" class="headerlink" title="2.3.修改application.yml"></a>2.3.修改application.yml</h3><ul><li>将官网配置填入<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE(%E4%B8%AA%E4%BA%BA%E8%AE%A2%E9%98%85%E5%8F%B7)/%E5%A1%AB%E5%86%99%E5%85%AC%E4%BC%97%E5%8F%B7%E9%85%8D%E7%BD%AE1.png" alt="填写公众号配置1.png"></li></ul><h3 id="2-4-自定义服务端口"><a href="#2-4-自定义服务端口" class="headerlink" title="2.4.自定义服务端口"></a>2.4.自定义服务端口</h3><ul><li>因为默认启动端口是8080，部署的时候可能被占用，所以可以提前修改<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-string">xxxx</span> <span class="hljs-comment"># 填你的端口号</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2-5-新增本地测试接口"><a href="#2-5-新增本地测试接口" class="headerlink" title="2.5 新增本地测试接口"></a>2.5 新增本地测试接口</h3><ul><li>因为部署配置的时候，微信会发送请求来核验服务情况（详情阅读<a href="https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Overview.html">官方文档</a>），自定义接口你可以提前自测服务是否有成功启动。</li></ul><p>可以直接新增到WxPortalController中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(value = &quot;/test&quot;, produces = &quot;text/plain;charset=utf-8&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">authGet</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String appid)</span> &#123;<br>    <span class="hljs-keyword">return</span> appid;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE(%E4%B8%AA%E4%BA%BA%E8%AE%A2%E9%98%85%E5%8F%B7)/%E8%87%AA%E6%B5%8B%E4%BB%A3%E7%A0%811.png" alt="自测代码1.png"></p><blockquote><p>注意这个请求本地访问为 <a href="http://localhost:【port】/wx/portal/{appid}/test">http://localhost:【port】/wx/portal/{appid}/test</a><br>路径中的[produces]这个属性是字符解码防止乱码，而不是路径</p></blockquote><h1 id="三、服务器"><a href="#三、服务器" class="headerlink" title="三、服务器"></a>三、服务器</h1><p>自行准备：</p><ul><li>1.Java运行环境</li></ul><p>需要：</p><ul><li>1.Java项目部署jar包</li><li>2.nginx（开发者测试appid的不需要，正式的微信只支持80端口和443端口）</li></ul><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="1-项目打包"><a href="#1-项目打包" class="headerlink" title="1.项目打包"></a>1.项目打包</h3><ul><li>通过idea中的Maven插件，install项目，在项目中的target中得到，xxxx.jar<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE(%E4%B8%AA%E4%BA%BA%E8%AE%A2%E9%98%85%E5%8F%B7)/%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85.png" alt="项目打包.png"></li></ul><h3 id="2-将xx-jar上传服务器启动"><a href="#2-将xx-jar上传服务器启动" class="headerlink" title="2.将xx.jar上传服务器启动"></a>2.将xx.jar上传服务器启动</h3><ul><li><p>可以通过MobaXterm，xshell，命令等方式，上传到服务器（建议目录&#x2F;usr&#x2F;local&#x2F;xxx下）</p><blockquote><p>命令: java -jar xxx.jar &gt; xxx.file 2&gt;&amp;1 &amp;</p></blockquote></li><li><p>命令执行为jar包启动，日志输出在指定文件下</p></li></ul><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>自行网上查找教程这里不多赘述</li></ul><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><ul><li>找到nginx安装目录下 nginx&#x2F;conf&#x2F;nginx.conf</li></ul><ol><li><p>备份配置文件</p><blockquote><p>cp nginx.conf nginx_bak.conf</p></blockquote></li><li><p>配置Java转发</p><blockquote><p>vi nginx.conf</p></blockquote></li><li><p>配置详情<br>在http-server下面加入。【需要自行修改】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 自行修改【gzh】：这里是转发的路径，比如ip/gzh会转发到proxy_pass中配置的路径</span><br>location /gzh/ &#123;<br>     <span class="hljs-comment"># 截去gzh - 自行修改</span><br>     rewrite ^.+gzh/?(.*)$ /<span class="hljs-variable">$1</span> <span class="hljs-built_in">break</span>;<br>     <span class="hljs-comment"># 自己的项目地址及端口号 - 记得修改</span><br>     proxy_pass  http://127.0.0.1:【port】;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>4.重启nginx</p><blockquote><p>进入目录：cd nginx&#x2F;sbin<br>执行：.&#x2F;nginx -s reload</p></blockquote><h1 id="四-公众号官网配置"><a href="#四-公众号官网配置" class="headerlink" title="四.公众号官网配置"></a>四.公众号官网配置</h1><ul><li>注意：因为配置了nginx转发，如果上方加了【gzh】那么路径为</li></ul><blockquote><p>http:&#x2F;&#x2F;【服务器ip】&#x2F;【gzh或你自定义的】&#x2F;wx&#x2F;portal&#x2F;【填你的AppID】</p></blockquote><p>配置点击完成查看服务器运行日志</p><blockquote><p>cat xxx.file</p></blockquote><p>看到打印了成功接收到微信的消息就没有问题</p><p>补充：持续打印日志</p><blockquote><p>tail -f xxx.file</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信公众号</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring源码解析图(一)</title>
    <link href="/2022/06/09/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%9B%BE(%E4%B8%80)/"/>
    <url>/2022/06/09/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%9B%BE(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<p>之前学习查看Spring源码的记录。回过头看看发现又忘了，哈哈哈，记录一下之前的图片。</p><span id="more"></span><h1 id="1-Spring架构原理图"><a href="#1-Spring架构原理图" class="headerlink" title="1.Spring架构原理图"></a>1.Spring架构原理图</h1><p><img src="/images/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%9B%BE(%E4%B8%80)/Spring%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E5%9B%BE.jpg" alt="Spring架构原理图"></p><h1 id="2-Spring流程图"><a href="#2-Spring流程图" class="headerlink" title="2.Spring流程图"></a>2.Spring流程图</h1><p><img src="/images/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%9B%BE(%E4%B8%80)/Spring%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="Spring流程图"></p><h1 id="3-Bean生命周期流程"><a href="#3-Bean生命周期流程" class="headerlink" title="3.Bean生命周期流程"></a>3.Bean生命周期流程</h1><p><img src="/images/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%9B%BE(%E4%B8%80)/Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%B5%81%E7%A8%8B.jpg" alt="Bean生命周期流程"></p><h1 id="4-bean初始化流程"><a href="#4-bean初始化流程" class="headerlink" title="4.bean初始化流程"></a>4.bean初始化流程</h1><p><img src="/images/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%9B%BE(%E4%B8%80)/bean%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B.jpg" alt="bean初始化流程"></p><h1 id="5-容器刷新流程"><a href="#5-容器刷新流程" class="headerlink" title="5.容器刷新流程"></a>5.容器刷新流程</h1><p><img src="/images/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%9B%BE(%E4%B8%80)/%E5%AE%B9%E5%99%A8%E5%88%B7%E6%96%B0%E6%B5%81%E7%A8%8B.jpg" alt="容器刷新流程"></p><h1 id="6-AOP原理"><a href="#6-AOP原理" class="headerlink" title="6.AOP原理"></a>6.AOP原理</h1><p><img src="/images/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%9B%BE(%E4%B8%80)/AOP%E5%8E%9F%E7%90%86.jpg" alt="AOP原理"></p><h1 id="7-监听器原理"><a href="#7-监听器原理" class="headerlink" title="7.监听器原理"></a>7.监听器原理</h1><p><img src="/images/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%9B%BE(%E4%B8%80)/%E7%9B%91%E5%90%AC%E5%99%A8%E5%8E%9F%E7%90%86.jpg" alt="监听器原理"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python-PySide6学习使用</title>
    <link href="/2022/06/08/Python-PySide6%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/06/08/Python-PySide6%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>python图形界面的开发使用，还不太会。<br>最近的python学习到这里结束了，之后有时间在研究一下吧。</p><span id="more"></span><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul><li>1.安装PySide6</li><li>2.打开图形化界面。【见下图】先点击进入pyside6的源码位置，找到exe文件</li><li>3.生成代码 PySide6-uic 【demo.ui】 o 【ui_demo.py】</li></ul><p><img src="/images/python-pyside6%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/%E4%BB%A3%E7%A0%81%E5%9B%BE%E7%89%87.jpg" alt="代码图片"><br><img src="/images/python-pyside6%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/%E5%B7%A5%E5%85%B7exe.png" alt="工具exe位置"></p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>1.目前测试代码会卡死。【应该是没有自定义信号？】</p><p><img src="/images/python-pyside6%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/%E7%9F%A5%E8%AF%86.png" alt="工具exe位置"></p><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><blockquote><pre><code class="hljs"># ------------- 使用 -------------# self.ui.___ACTION___triggered.connect(___FUNCTION___)# self.ui.___BUTTON___clicked.connect___FUNCTION___)# self.ui.___COMBO_BOX___.currentIndexChanged.connect(___FUNCTION___)# self.ui.___SPIN_BOX___.valueChanged.connect(___FUNCTION___)# #自定义信号.属性名.connect(_FUNCTION___)# -------------------------------</code></pre></blockquote><h1 id="源码-master分支"><a href="#源码-master分支" class="headerlink" title="源码 - master分支"></a>源码 - master分支</h1><p><a href="https://github.com/nullaman/python_studay">https://github.com/nullaman/python_studay</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python图形界面</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python-YOLO学习使用</title>
    <link href="/2022/06/08/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/06/08/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>YOLO系列的学习。智商和知识有限，带专的我目前处在了解和使用的阶段。</p><p>牢记：卷积神经网络，不要当成一个算法，当成一个方法，提取特征的方法！</p><span id="more"></span><h1 id="相关的知识"><a href="#相关的知识" class="headerlink" title="相关的知识"></a>相关的知识</h1><h2 id="学习中相关知识盲区记录"><a href="#学习中相关知识盲区记录" class="headerlink" title="学习中相关知识盲区记录"></a>学习中相关知识盲区记录</h2><blockquote><p>牢记：卷积神经网络，不要当成一个算法，当成一个方法，提取特征的方法！</p></blockquote><h3 id="1-基础"><a href="#1-基础" class="headerlink" title="1.基础"></a>1.基础</h3><ul><li>召回率（查重率）</li><li>precision 准度 &#x3D; TP &#x2F; (TP+FP)</li><li>true positives 正确的判定</li><li>false positives 错误的判定为正例</li><li>Recall 召回 &#x3D; TP&#x2F;(TP+FN)</li><li>FN  false negatives，正类判定为负类，“去真”,<br>例如：<br>已知：100总人数，男80，女20<br>目标：找到所有女<br>结果：从中选了50人，其中20女，30男</li></ul><blockquote><p>TP:20，FP:30，FN:0（女生全部找出来了，没有女生被当做男生）<br>true negatives：负类判断为负类，也就是一个男生被当成男生<br>TN:50</p></blockquote><p><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/%E7%9F%A5%E8%AF%86%E7%9B%B2%E5%8C%BA1.png" alt="图片加载"></p><h3 id="2-全连接、卷积、感受野"><a href="#2-全连接、卷积、感受野" class="headerlink" title="2.全连接、卷积、感受野"></a>2.全连接、卷积、感受野</h3><ul><li>全连接层(Fully Connected Layer)</li></ul><p>是早期构建卷积神经网络的主要结构，位于卷积神经发网络的末尾，全连接层的每一个节点都与前层的节点全部互连，整合前层网络提取的特征，并把这些特征映射到样本标记空间。全连接层对前层输出的特征进行加权求和，并把结果输入到激活函数，最终完成目标的分类。</p><ul><li><p><a href="https://towardsdatascience.com/convolutional-neural-network-17fb77e76c05">卷积层(CONV)</a></p></li><li><p>感受野</p></li></ul><p>用来表示网络内部的不同位置的神经元对原图像的感受范围的大小。神经元之所以无法对原始图像的所有信息进行感知，是因为在这些网络结构中普遍使用卷积层和pooling层，在层与层之间均为局部相连（通过sliding filter）。神经元感受野的值越大表示其能接触到的原始图像范围就越大，也意味着他可能蕴含更为全局、语义层次更高的特征；而值越小则表示其所包含的特征越趋向于局部和细节。因此感受野的值可以大致用来判断每一层的抽象层次。</p><blockquote><p>卷积取的是局部特征，全连接就是把以前的局部特征重新通过权值矩阵组装成完整的图。因为用到了所有的局部特征，所以叫全连接。</p></blockquote><h3 id="3-损失函数"><a href="#3-损失函数" class="headerlink" title="3.损失函数"></a>3.损失函数</h3><p><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0.png" alt="图片加载"></p><h3 id="3-知识图片补充记录"><a href="#3-知识图片补充记录" class="headerlink" title="3.知识图片补充记录"></a>3.知识图片补充记录</h3><p><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/%E6%AF%8F%E4%B8%AA%E5%90%AB%E4%B9%89.png" alt="图片加载"><br><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84.png" alt="图片加载"><br><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/%E6%A0%B8%E5%BF%83%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84.png" alt="图片加载"></p><h3 id="4-深度残差网络？-论文"><a href="#4-深度残差网络？-论文" class="headerlink" title="4.深度残差网络？-论文"></a>4.深度残差网络？-论文</h3><p><a href="https://arxiv.org/pdf/1512.03385.pdf">？深度残差网络-论文</a></p><h1 id="YOLO学习使用"><a href="#YOLO学习使用" class="headerlink" title="YOLO学习使用"></a>YOLO学习使用</h1><h2 id="官方YOLOv5介绍"><a href="#官方YOLOv5介绍" class="headerlink" title="官方YOLOv5介绍"></a>官方YOLOv5介绍</h2><blockquote><p>YOLOv5🚀是在 COCO 数据集上预训练的一系列对象检测架构和模型，代表Ultralytics 对未来视觉 AI 方法的开源研究，结合了经过数千小时的研究和开发的经验教训和最佳实践。</p></blockquote><h2 id="项目结构介绍"><a href="#项目结构介绍" class="headerlink" title="项目结构介绍"></a>项目结构介绍</h2><p><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/my-yolo5%E7%9B%AE%E5%BD%95%E8%AF%B4%E6%98%8E.png" alt="图片加载"></p><ul><li>自己新建的项目<ul><li>自己数据集<ul><li>train 训练集 训练数量偏多<ul><li>images 训练图片存放</li><li>labels 对应图片的labels数据</li></ul></li><li>valid 验证集 一般比训练图片少<ul><li>images 验证图片存放</li><li>labels 对应验证图片的labels数据</li></ul></li><li>data.yaml 配置文件 : 主要配置自己的训练集和验证集 以及分类。见下图【mytest-data-yaml】</li></ul></li><li>官方<a href="https://github.com/ultralytics/yolov5">下载</a>的yolov5代码<ul><li>data 存放自带的一些数据图片，还有coco数据集配置。注：coco数据集需要自行下载，非常大。见下图【yolo5-data】</li><li>models 存放网络模型架构yaml配置文件。见下图【yolo5-models】</li><li>runs 运行日志。见下图【yolo5-runs】<ul><li>detect 执行检测的输出结果</li><li>train 训练效果，训练日志输出<ul><li>weights 训练的成果中有best.pt还有最后一次last.pt，可以配置预加载继续训练</li></ul></li></ul></li><li>utils 主要方法。见下图【yolo5-utils&amp;weights】</li><li>weights 一般存放一些预加载网络模型。见下图【yolo5-utils&amp;weights】</li><li>detect.py 要执行的方法 【详细见下】</li><li>train.py 要执行的方法 【详细见下】</li></ul></li></ul></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>1.根据上方创建自己项目目录</li><li>2.修改配置文件</li><li>3.训练train.py，检测detect.py</li></ul><h2 id="train-py和detect-py"><a href="#train-py和detect-py" class="headerlink" title="train.py和detect.py"></a>train.py和detect.py</h2><blockquote><p>train.py配置训练自己的网络模型<br><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/train%E4%BB%A3%E7%A0%81.jpg" alt="mytest-data-yaml.jpg"></p></blockquote><blockquote><p>detect.py执行检测<br><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/detect%E4%BB%A3%E7%A0%81.png" alt="mytest-data-yaml.jpg"></p></blockquote><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>图片【mytest-data-yaml】<br><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/mytest-data-yaml.jpg" alt="mytest-data-yaml"></p><p>图片【yolo5-data.png】<br><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/yolo5-data.png" alt="yolo5-data.png"></p><p>图片【yolo5-models.png】<br><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/yolo5-models.png" alt="yolo5-models.png"></p><p>图片【yolo5-runs.png】<br><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/yolo5-runs.png" alt="yolo5-runs.png"></p><p>图片【yolo5-utils&amp;weights.png】<br><img src="/images/Python-YOLO%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/yolo5-utils&weights.png" alt="yolo5-utils&amp;weights.png"></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>卷积神经网络CNN</tag>
      
      <tag>yolo</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习python基础/爬虫等</title>
    <link href="/2022/06/08/%E5%AD%A6%E4%B9%A0python%E5%9F%BA%E7%A1%80%E7%AD%89/"/>
    <url>/2022/06/08/%E5%AD%A6%E4%B9%A0python%E5%9F%BA%E7%A1%80%E7%AD%89/</url>
    
    <content type="html"><![CDATA[<p>学习了感兴趣的一些东西，python基础，爬虫基础等，还写了个小玩意爬dy直播间的实时评论，存在自己数据库。<br>因为有一段时间了，就记录一下。</p><span id="more"></span><h1 id="源码-master分支"><a href="#源码-master分支" class="headerlink" title="源码 - master分支"></a>源码 - master分支</h1><p><a href="https://github.com/nullaman/python_studay">https://github.com/nullaman/python_studay</a></p><h1 id="学习目录-持续更新"><a href="#学习目录-持续更新" class="headerlink" title="学习目录 - 持续更新"></a>学习目录 - 持续更新</h1><h3 id="demo1-demo3"><a href="#demo1-demo3" class="headerlink" title="demo1-demo3"></a>demo1-demo3</h3><p>python基础</p><h3 id="demo1"><a href="#demo1" class="headerlink" title="demo1"></a>demo1</h3><p>requests入门等<br>第二章 : re，bs4，xpath使用<br>第三章 : cookie，网易云评论抓取<br>第四章 : 多线程，协程，线程池，异步，aiohttp，aiofile<br>第五章 : selenium，无头浏览器，超级鹰<br>mytest : dy直播接聊天评论抓取，写入数据库</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>come back ~ 冲冲冲！！！</title>
    <link href="/2022/06/08/come-back/"/>
    <url>/2022/06/08/come-back/</url>
    
    <content type="html"><![CDATA[<p>我又回来啦！之前博客github忘记备份，电脑重置了，搁置了一年半载，重新部署搞了一个博客，加油！！！！</p>]]></content>
    
    
    <categories>
      
      <category>加油</category>
      
    </categories>
    
    
    <tags>
      
      <tag>加油</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原型模式-Java设计模式(六)</title>
    <link href="/2019/12/11/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%85%AD)/"/>
    <url>/2019/12/11/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%85%AD)/</url>
    
    <content type="html"><![CDATA[<p>原型模式-Java设计模式(六)</p><span id="more"></span><h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><blockquote><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><blockquote><p>在运行期建立和删除原型<br>(个人理解：消息模块的消息记录对象，除了接收人不同，其他字段均相等，可使用，无需频繁new对象)</p></blockquote><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><blockquote><p>优点： 1、性能提高。 2、逃避构造函数的约束。<br>缺点： 1、配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。 2、必须实现 Cloneable 接口。</p></blockquote><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><blockquote><p>1、当一个系统应该独立于它的产品创建，构成和表示时。<br>2、当要实例化的类是在运行时刻指定时，例如，通过动态装载。<br>3、为了避免创建一个与产品类层次平行的工厂类层次时。<br>4、当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。</p></blockquote><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><blockquote><p>继承 Cloneable，重写 clone()</p></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote><p>与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。<br>浅拷贝实现 Cloneable，重写，<br>深拷贝是通过实现 Serializable 读取二进制流。</p></blockquote><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="简历类"><a href="#简历类" class="headerlink" title="简历类"></a>简历类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 简历类 - 实现Cloneable,重写clone()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Resume</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String date;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String content;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDate</span><span class="hljs-params">(String date)</span> &#123;<br>        <span class="hljs-built_in">this</span>.date = date;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContent</span><span class="hljs-params">(String content)</span> &#123;<br>        <span class="hljs-built_in">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Resume</span> <span class="hljs-variable">resume</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            resume = (Resume) <span class="hljs-built_in">super</span>.clone();<br>        &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> resume;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;，在【&quot;</span> + <span class="hljs-built_in">this</span>.getDate() + <span class="hljs-string">&quot;】在【&quot;</span> + <span class="hljs-built_in">this</span>.getContent() + <span class="hljs-string">&quot;】干活。&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 引用方式 和 clone()对比</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Resume</span> <span class="hljs-variable">resume</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Resume</span>();<br>        resume.setDate(LocalDate.now().minusMonths(<span class="hljs-number">1</span>).toString());<br>        resume.setName(<span class="hljs-string">&quot;aman&quot;</span>);<br>        resume.setContent(<span class="hljs-number">999</span> + <span class="hljs-string">&quot;企业&quot;</span>);<br>        System.out.println(resume);<br><br>        <span class="hljs-type">Resume</span> <span class="hljs-variable">AAA</span> <span class="hljs-operator">=</span> resume;<br>        System.out.println(<span class="hljs-string">&quot;===========【 1 】============&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;resume:|||&quot;</span> + resume);<br>        System.out.println(<span class="hljs-string">&quot;AAA:   |||&quot;</span> + AAA);<br><br>        System.out.println(<span class="hljs-string">&quot;===========【 2 】============&quot;</span>);<br>        <span class="hljs-comment">// ！！！更改任意一个，都会改变 ！！！</span><br>        <span class="hljs-comment">//Resume.setContent(&quot;????????&quot;);</span><br>        AAA.setContent(<span class="hljs-string">&quot;????????&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;resume:|||&quot;</span> + resume);<br>        System.out.println(<span class="hljs-string">&quot;AAA:   |||&quot;</span> + AAA);<br><br>        System.out.println(<span class="hljs-string">&quot;===========【 3 】============&quot;</span>);<br>        <span class="hljs-type">Resume</span> <span class="hljs-variable">clone</span> <span class="hljs-operator">=</span> (Resume) resume.clone();<br>        System.out.println(<span class="hljs-string">&quot;resume:|||&quot;</span> + resume);<br>        System.out.println(<span class="hljs-string">&quot;AAA:   |||&quot;</span> + AAA);<br>        System.out.println(<span class="hljs-string">&quot;clone: |||&quot;</span> + clone);<br><br>        System.out.println(<span class="hljs-string">&quot;===========【 4 】============&quot;</span>);<br>        clone.setContent(<span class="hljs-string">&quot;clone嘻嘻嘻嘻&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;resume:|||&quot;</span> + resume);<br>        System.out.println(<span class="hljs-string">&quot;AAA:   |||&quot;</span> + AAA);<br>        System.out.println(<span class="hljs-string">&quot;clone: |||&quot;</span> + clone);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%85%AD)/test1.png" alt="图片加载"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 克隆多个</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Resume</span> <span class="hljs-variable">resume</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Resume</span>();<br>        resume.setDate(LocalDate.now().minusMonths(<span class="hljs-number">1</span>).toString());<br>        resume.setName(<span class="hljs-string">&quot;aman&quot;</span>);<br>        resume.setContent(<span class="hljs-number">999</span> + <span class="hljs-string">&quot;企业&quot;</span>);<br>        System.out.println(resume);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">10</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;=======================&quot;</span>);<br>            i++;<br>            resume.clone();<br>            resume.setContent(String.valueOf(i));<br>            System.out.println(resume);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/images/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%85%AD)/test2.png" alt="图片加载"></p><h2 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h2><p><img src="/images/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%85%AD)/UML1.png" alt="图片加载"><br><img src="/images/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%85%AD)/UML2.png" alt="图片加载"></p><h1 id="源码-prototype分支"><a href="#源码-prototype分支" class="headerlink" title="源码 - prototype分支"></a>源码 - prototype分支</h1><blockquote><p>不同分支对应不同设计模式源码<br><a href="https://github.com/nullaman/JavaDesignMode">https://github.com/nullaman/JavaDesignMode</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java设计模式</tag>
      
      <tag>原型模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工厂方法模式-Java设计模式(六)</title>
    <link href="/2019/12/10/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%85%AD)/"/>
    <url>/2019/12/10/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%85%AD)/</url>
    
    <content type="html"><![CDATA[<p>方法工厂模式-Java设计模式(六)</p><span id="more"></span><h1 id="方法工厂模式"><a href="#方法工厂模式" class="headerlink" title="方法工厂模式"></a>方法工厂模式</h1><blockquote><p>定义一个创建对象的接口，让子类决定实例化哪一个类。<br>工厂方法使一个类的实例化延迟到其子类。</p></blockquote><h2 id="与简单工厂的区别"><a href="#与简单工厂的区别" class="headerlink" title="与简单工厂的区别"></a>与简单工厂的区别</h2><blockquote><p>简单工厂最大的有点就在于工厂类中包含了必要的逻辑判断，根据客户端的选择条件动态实例化相关的类，对于客户端来说，去除了与具体产品的依赖。</p></blockquote><h2 id="实现说明"><a href="#实现说明" class="headerlink" title="实现说明"></a>实现说明</h2><blockquote><p>工厂方法模式实现时，客户端需要决定实例化哪一个工厂来实现运算类，选择判断的问题还是存在的，<br>也就是说，工厂方法把简单工厂内部逻辑判断移动到了客户端代码来进行。<br>你想要加功能，本来是改工厂类的，而现在是修改客户端。</p></blockquote><h1 id="代码-amp-UML结构图"><a href="#代码-amp-UML结构图" class="headerlink" title="代码 &amp; UML结构图"></a>代码 &amp; UML结构图</h1><p>学雷锋的例子~</p><h2 id="【工厂接口】"><a href="#【工厂接口】" class="headerlink" title="【工厂接口】"></a>【工厂接口】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 工厂接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IFactory</span> &#123;<br><br>    LeiFeng <span class="hljs-title function_">createLeiFeng</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="【雷锋】类"><a href="#【雷锋】类" class="headerlink" title="【雷锋】类"></a>【雷锋】类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 雷锋类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LeiFeng</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSweep</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;扫地&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doWash</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;洗衣&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doRice</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;做饭&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="【大学生】-学雷锋"><a href="#【大学生】-学雷锋" class="headerlink" title="【大学生】-学雷锋"></a>【大学生】-学雷锋</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 大学生学雷锋 - 继承工厂接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Undergraduate</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IFactory</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> LeiFeng <span class="hljs-title function_">createLeiFeng</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LeiFeng</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="【志愿者】-学雷锋"><a href="#【志愿者】-学雷锋" class="headerlink" title="【志愿者】-学雷锋"></a>【志愿者】-学雷锋</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 志愿者学雷锋 - 继承工厂接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Volunteer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IFactory</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> LeiFeng <span class="hljs-title function_">createLeiFeng</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LeiFeng</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">IFactory</span> <span class="hljs-variable">volunteer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Volunteer</span>();<br>        <span class="hljs-type">LeiFeng</span> <span class="hljs-variable">heiHei</span> <span class="hljs-operator">=</span> volunteer.createLeiFeng();<br>        System.out.println(<span class="hljs-string">&quot;志愿者学雷锋&quot;</span>);<br>        heiHei.doRice();<br>        heiHei.doSweep();<br>        heiHei.doWash();<br><br>        System.out.println(<span class="hljs-string">&quot;---------分割线----------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;大学生学雷锋&quot;</span>);<br>        <span class="hljs-type">IFactory</span> <span class="hljs-variable">undergraduate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Undergraduate</span>();<br>        <span class="hljs-type">LeiFeng</span> <span class="hljs-variable">xiaoMing</span> <span class="hljs-operator">=</span> undergraduate.createLeiFeng();<br>        xiaoMing.doRice();<br>        xiaoMing.doSweep();<br>        xiaoMing.doWash();<br><br>        <span class="hljs-type">LeiFeng</span> <span class="hljs-variable">hongHong</span> <span class="hljs-operator">=</span> undergraduate.createLeiFeng();<br>        hongHong.doRice();<br>        hongHong.doSweep();<br>        hongHong.doWash();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h2><p><img src="/images/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%85%AD)/%E6%96%B9%E6%B3%95%E5%B7%A5%E5%8E%82UML1.png" alt="图片加载"><br><img src="/images/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%85%AD)/%E6%96%B9%E6%B3%95%E5%B7%A5%E5%8E%82UML2.png" alt="图片加载"></p><h1 id="源码-methodFactory分支"><a href="#源码-methodFactory分支" class="headerlink" title="源码 - methodFactory分支"></a>源码 - methodFactory分支</h1><blockquote><p>不同分支对应不同设计模式源码<br><a href="https://github.com/nullaman/JavaDesignMode">https://github.com/nullaman/JavaDesignMode</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java设计模式</tag>
      
      <tag>工厂模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MybatisPlus删除对于Long序列号的坑</title>
    <link href="/2019/12/09/MybatisPlus%E5%88%A0%E9%99%A4%E5%AF%B9%E4%BA%8ELong%E5%BA%8F%E5%88%97%E5%8F%B7%E7%9A%84%E5%9D%91/"/>
    <url>/2019/12/09/MybatisPlus%E5%88%A0%E9%99%A4%E5%AF%B9%E4%BA%8ELong%E5%BA%8F%E5%88%97%E5%8F%B7%E7%9A%84%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<p>今天得到反馈bug：班级excel批量导入之后，删除一个班级会导致班级批量删除…</p><span id="more"></span><h1 id="有问题的代码"><a href="#有问题的代码" class="headerlink" title="有问题的代码"></a>有问题的代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(value = &quot;删除单个班级数据&quot;)</span><br><span class="hljs-meta">@LyraLog(&quot;删除班级&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">deleteClassById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>    <span class="hljs-keyword">if</span> (schoolClassService.removeById(id)) &#123;<br>        <span class="hljs-keyword">return</span> R.ok(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> R.failed(<span class="hljs-string">&quot;删除失败&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>看到这段代码发现问题不止批量删除一个 emmmmm ，连数据判断都没…<br>然后我前后端都加了日志输出，加了个判断。排查问题。</p><h2 id="2-0"><a href="#2-0" class="headerlink" title="2.0"></a>2.0</h2><p>写的时候发现一点问题：Long？行吧，那就Long把<br><img src="/images/MybatisPlus%E5%88%A0%E9%99%A4%E5%AF%B9%E4%BA%8ELong%E5%BA%8F%E5%88%97%E5%8F%B7%E7%9A%84%E5%9D%91/Str%E5%88%A4%E6%96%ADLong.png" alt="图片加载失败"><br>最后写成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(value = &quot;删除单个班级数据&quot;)</span><br><span class="hljs-meta">@LyraLog(&quot;删除班级&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;Object&gt; <span class="hljs-title function_">deleteClassById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 删除id : &#123;&#125; &quot;</span>, id);<br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(id.toString())) &#123;<br>        <span class="hljs-keyword">return</span> R.ok(<span class="hljs-string">&quot;删除失败，数据异常。&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (schoolClassService.removeById(id)) &#123;<br>        <span class="hljs-keyword">return</span> R.ok(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> R.failed(<span class="hljs-string">&quot;删除失败&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h1><blockquote><p>1.导入数据！主键唯一，没有问题</p></blockquote><blockquote><p>2.前后端接收到的id对应上了，没有问题！<br>查看sql，吓一跳，删除了三条？？？</p></blockquote><p><img src="/images/MybatisPlus%E5%88%A0%E9%99%A4%E5%AF%B9%E4%BA%8ELong%E5%BA%8F%E5%88%97%E5%8F%B7%E7%9A%84%E5%9D%91/sql.png" alt="图片加载"></p><blockquote><p>3.数据库查询该id<br><img src="/images/MybatisPlus%E5%88%A0%E9%99%A4%E5%AF%B9%E4%BA%8ELong%E5%BA%8F%E5%88%97%E5%8F%B7%E7%9A%84%E5%9D%91/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%A0%E9%99%A4%E5%89%8D.png" alt="图片加载"></p></blockquote><p>我发现导入数据中的id确实只有一个啊，但是我看到导入数据的id有三条比较近。<br><img src="/images/MybatisPlus%E5%88%A0%E9%99%A4%E5%AF%B9%E4%BA%8ELong%E5%BA%8F%E5%88%97%E5%8F%B7%E7%9A%84%E5%9D%91/%E5%88%A0%E9%99%A4%E7%9A%84%E4%B8%89%E6%9D%A1.png" alt="图片加载"><br>该不会就是这三条被删了把？我刷新数据库。</p><p><img src="/images/MybatisPlus%E5%88%A0%E9%99%A4%E5%AF%B9%E4%BA%8ELong%E5%BA%8F%E5%88%97%E5%8F%B7%E7%9A%84%E5%9D%91/%E5%88%A0%E9%99%A4%E5%90%8E%E7%9A%84.png" alt="图片加载"><br><img src="/images/MybatisPlus%E5%88%A0%E9%99%A4%E5%AF%B9%E4%BA%8ELong%E5%BA%8F%E5%88%97%E5%8F%B7%E7%9A%84%E5%9D%91/%E6%88%91%E5%A4%AA%E9%9A%BE%E4%BA%86.jpg" alt="图片加载"></p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><blockquote><p>把Long改为String即可。这应该算是MybatisPlus的bug？？？</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发中的坑</tag>
      
      <tag>Long序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代理模式-Java设计模式(五)</title>
    <link href="/2019/12/05/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BA%94)/"/>
    <url>/2019/12/05/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BA%94)/</url>
    
    <content type="html"><![CDATA[<p>代理模式-Java设计模式(五)</p><span id="more"></span><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><blockquote><p>为其他对象提供一种代理以控制对这个对象的访问</p></blockquote><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><blockquote><p>想在访问一个类时做一些控制。</p></blockquote><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><blockquote><p>增加中间层。</p></blockquote><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><blockquote><p>实现与被代理类组合。</p></blockquote><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><blockquote><p>优点：1、职责清晰。 2、高扩展性。 3、智能化。<br>缺点：1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外</p></blockquote><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><blockquote><p>按职责来划分，通常有以下使用场景： 1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protect or Access）代理。 5、Cache代理。 6、防火墙（Firewall）代理。 7、同步化（Synchronization）代理。 8、智能引用（Smart Reference）代理。</p></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote><p>1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。<br>2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</p></blockquote><h1 id="代码-amp-结构图"><a href="#代码-amp-结构图" class="headerlink" title="代码 &amp; 结构图"></a>代码 &amp; 结构图</h1><p>小明想托我帮他送礼物给女神。</p><h2 id="【送礼物】接口"><a href="#【送礼物】接口" class="headerlink" title="【送礼物】接口"></a>【送礼物】接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 送礼物接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Gifts</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 送花</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">flower</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 送巧克力</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">chocolate</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="【女神类】"><a href="#【女神类】" class="headerlink" title="【女神类】"></a>【女神类】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 女神</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Girl</span> &#123;<br>    <span class="hljs-comment">// 名称</span><br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="【小明类】"><a href="#【小明类】" class="headerlink" title="【小明类】"></a>【小明类】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 小明想送礼物给 女神</span><br><span class="hljs-comment"> * 实现了送礼物接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XiaoMing</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Gifts</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Girl girl;<br><br>    XiaoMing(Girl girl) &#123;<br>        <span class="hljs-built_in">this</span>.girl = girl;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flower</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(girl.getName() + <span class="hljs-string">&quot;，送你花花~&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">chocolate</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(girl.getName() + <span class="hljs-string">&quot;，送你巧克力~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="【代理类】相当于我"><a href="#【代理类】相当于我" class="headerlink" title="【代理类】相当于我"></a>【代理类】相当于我</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 代理类，相当于我，帮小明送</span><br><span class="hljs-comment"> * 实现了送礼物接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Gifts</span> &#123;<br><br>    <span class="hljs-keyword">private</span> XiaoMing xiaoMing;<br><br>    <span class="hljs-comment">// ！！！注意！！！new小明，带入女神</span><br>    Proxy(Girl girl) &#123;<br>        <span class="hljs-built_in">this</span>.xiaoMing = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XiaoMing</span>(girl);<br>    &#125;<br><br>    <span class="hljs-comment">// 调用小明送礼物方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flower</span><span class="hljs-params">()</span> &#123;<br>        xiaoMing.flower();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">chocolate</span><span class="hljs-params">()</span> &#123;<br>        xiaoMing.chocolate();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Girl</span> <span class="hljs-variable">girl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Girl</span>();<br>        girl.setName(<span class="hljs-string">&quot;红红&quot;</span>);<br><br>        <span class="hljs-type">Proxy</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(girl);<br><br>        proxy.flower(); <span class="hljs-comment">// 红红，送你花花~</span><br>        <br>        proxy.chocolate(); <span class="hljs-comment">// 红红，送你巧克力~</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h2><p><img src="/images/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BA%94)/UML1.png" alt="图片加载"><br><img src="/images/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BA%94)/UML2.png" alt="图片加载"></p><h1 id="源码-proxy分支"><a href="#源码-proxy分支" class="headerlink" title="源码 - proxy分支"></a>源码 - proxy分支</h1><blockquote><p>不同分支对应不同设计模式源码<br><a href="https://github.com/nullaman/JavaDesignMode">https://github.com/nullaman/JavaDesignMode</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java设计模式</tag>
      
      <tag>代理模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zxing下载二维码</title>
    <link href="/2019/12/05/zxing%E4%B8%8B%E8%BD%BD%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    <url>/2019/12/05/zxing%E4%B8%8B%E8%BD%BD%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>今天改需求看到之前写的zxing二维码，记录一下。</p><span id="more"></span><h1 id="Maven仓库"><a href="#Maven仓库" class="headerlink" title="Maven仓库"></a>Maven仓库</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.zxing<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.zxing<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javase<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="简单下载单张"><a href="#简单下载单张" class="headerlink" title="简单下载单张"></a>简单下载单张</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 下载二维码</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> roomId 二维码中存放的的数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/code/download/&#123;roomId&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;二维码下载&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">downloadCode</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String roomId, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">if</span> (roomId == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// ---------加密内容------------</span><br>    <span class="hljs-comment">// log.info(&quot;------------&gt;要加密的数据roomId:&#123;&#125;&quot;, roomId);</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(roomId.toString().getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>    <span class="hljs-keyword">if</span> (content != <span class="hljs-literal">null</span> &amp;&amp; !<span class="hljs-string">&quot;&quot;</span>.equals(content)) &#123;<br>        <span class="hljs-comment">// ----------二维码设置----------</span><br>        <span class="hljs-comment">// 图像宽度</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">width</span> <span class="hljs-operator">=</span> <span class="hljs-number">300</span>;<br>        <span class="hljs-comment">// 图像高度</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> <span class="hljs-number">300</span>;<br>        <span class="hljs-comment">// 图像类型</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;png&quot;</span>;<br>        Map&lt;EncodeHintType, Object&gt; hints = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;EncodeHintType, Object&gt;(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">// 编码格式</span><br>        hints.put(EncodeHintType.CHARACTER_SET, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        <span class="hljs-comment">// 设置容错等级</span><br>        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.M);<br>        <span class="hljs-comment">// 设置边距默认是5</span><br>        hints.put(EncodeHintType.MARGIN, <span class="hljs-number">2</span>);<br>        <span class="hljs-type">BitMatrix</span> <span class="hljs-variable">bitMatrix</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            bitMatrix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QRCodeWriter</span>().encode(content, BarcodeFormat.QR_CODE, width, height, hints);<br>            <span class="hljs-type">BufferedImage</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> MatrixToImageWriter.toBufferedImage(bitMatrix);<br>            <span class="hljs-comment">// 二维码图片转化成字节数组</span><br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">write</span> <span class="hljs-operator">=</span> ImageIO.write(image, format, out);<br>            inputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(out.toByteArray());<br>            outputStream = response.getOutputStream();<br>            response.reset();<br>            <span class="hljs-comment">// 设置文件头编码方式和文件名</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> LocalDate.now().toString();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;二维码&quot;</span> + date + <span class="hljs-string">&quot;.png&quot;</span>;<br>            response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            <span class="hljs-comment">// 如果是IE,通过URLEncoder对filename进行UTF8编码。而其他的浏览器（firefox、chrome、safari、opera），则要通过字节转换成ISO8859-1。</span><br>            <span class="hljs-keyword">if</span> (request.getHeader(<span class="hljs-string">&quot;User-Agent&quot;</span>).toUpperCase().indexOf(<span class="hljs-string">&quot;MSIE&quot;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>                fileName = URLEncoder.encode(fileName, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                fileName = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(fileName.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>), <span class="hljs-string">&quot;ISO8859-1&quot;</span>);<br>            &#125;<br>            response.setContentType(<span class="hljs-string">&quot;application/octet-stream&quot;</span>);<br>            response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + fileName);<br>            <span class="hljs-type">byte</span>[] bf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> ((len = inputStream.read(bf)) &gt; <span class="hljs-number">0</span>) &#123;<br>                outputStream.write(bf, <span class="hljs-number">0</span>, len);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (WriterException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (outputStream != <span class="hljs-literal">null</span>) &#123;<br>                outputStream.flush();<br>                outputStream.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (inputStream != <span class="hljs-literal">null</span>) &#123;<br>                inputStream.close();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><blockquote><p>一般项目中请求接口需要带token的，下载时如果是直接请求下载接口，需要暴露接口。在配置文件中暴露</p></blockquote><h1 id="下载多个二维码，打包-zip包"><a href="#下载多个二维码，打包-zip包" class="headerlink" title="下载多个二维码，打包.zip包"></a>下载多个二维码，打包.zip包</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取到宿舍dormId --下载二维码zip包</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> dormId 业务查询的楼栋id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/download/&#123;dormId&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;二维码下载&quot;)</span><br><span class="hljs-keyword">public</span> R <span class="hljs-title function_">downloadCode</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String dormId, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>    Dormitory dormitory=dormitoryService.getById(dormId);<br>    <span class="hljs-comment">//按宿舍楼id查询所有宿舍</span><br>    List&lt;Room&gt; roomIdList = roomService.getbyDormIdRoomAll(dormId);<br>    <span class="hljs-comment">//按宿舍楼id查询所有床位</span><br>    List&lt;Bunk&gt; bunkList = bunkService.getByDormIdBunkAll(dormId);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> request.getSession().getServletContext().getRealPath(<span class="hljs-string">&quot;/&quot;</span>);<br>    <span class="hljs-comment">//1 生成二维码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> realPath + dormitory.getTowerName();<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br>    <span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>        file.mkdirs();<br>    &#125;<br>    <span class="hljs-comment">///////////////每条线程的数据数量</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">threadSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>    <span class="hljs-comment">// 总数据条数</span><br>    <span class="hljs-type">int</span> dataSize2=bunkList.size();<br>    <span class="hljs-comment">// 线程数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">threadNum</span> <span class="hljs-operator">=</span> dataSize2 / threadSize + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 定义标记,过滤threadNum为整数</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">special</span> <span class="hljs-operator">=</span> dataSize2 % threadSize == <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 创建一个线程池</span><br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(threadNum);<br>    <span class="hljs-comment">// 定义一个任务集合</span><br>    List&lt;Callable&lt;Integer&gt;&gt; tasks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Callable&lt;Integer&gt;&gt;();<br>    Callable&lt;Integer&gt; task = <span class="hljs-literal">null</span>;<br>    List&lt;Bunk&gt; bunkCall = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">///////////////////////</span><br>    <span class="hljs-comment">// 确定每条线程的数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; threadNum; i++) &#123;<br>        <span class="hljs-keyword">if</span> (i == threadNum - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (special) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            bunkCall = bunkList.subList(threadSize * i, dataSize2);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            bunkCall = bunkList.subList(threadSize * i, threadSize * (i + <span class="hljs-number">1</span>));<br>        &#125;<br>        <span class="hljs-keyword">final</span> List&lt;Bunk&gt; bunkListStr = bunkCall;<br>        task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Callable</span>&lt;Integer&gt;() &#123;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                    <span class="hljs-keyword">for</span> (Bunk bunk : bunkListStr) &#123;<br>                        QRCodeUtil.generateQRImage(<br>                                InspectionConstant.inspectionType.DORM_BED.toString() + <span class="hljs-string">&quot;|&quot;</span> + bunk.getId(),<br>                                path + <span class="hljs-string">&quot;/&quot;</span> + bunk.getRoomId() + <span class="hljs-string">&quot;号宿舍&quot;</span> + bunk.getNumber() + <span class="hljs-string">&quot;床位&quot;</span> + <span class="hljs-string">&quot;.jpg&quot;</span>,<br>                                <span class="hljs-literal">null</span>,bunk.getNumber()<br>                        );<span class="hljs-comment">//生成二维码的方法</span><br>                    &#125;<br>                    count++;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">// 这里提交的任务容器列表和返回的Future列表存在顺序对应的关系</span><br>        tasks.add(task);<br>    &#125;<br>        <span class="hljs-comment">//生成二维码</span><br>        QRCodeUtil.generateQRImage(<br>                InspectionConstant.inspectionType.DORM_TOWER.toString() + <span class="hljs-string">&quot;|&quot;</span> + dormId,<br>                path + <span class="hljs-string">&quot;/宿舍楼&quot;</span> + dormitory.getTowerName() + <span class="hljs-string">&quot;.jpg&quot;</span>,<br>                <span class="hljs-literal">null</span>,dormitory.getTowerName());<br>        <span class="hljs-keyword">for</span> (Room x : roomIdList) &#123;<br>            <span class="hljs-comment">//生成二维码的方法</span><br>            QRCodeUtil.generateQRImage(<br>                    InspectionConstant.inspectionType.DORM_ROOM.toString() + <span class="hljs-string">&quot;|&quot;</span> + x.getId(),<br>                    path + <span class="hljs-string">&quot;/宿舍&quot;</span> + x.getNumber() + <span class="hljs-string">&quot;.jpg&quot;</span>,<br>                    <span class="hljs-literal">null</span>,x.getNumber()<br>            );<br>        &#125;<br>        <span class="hljs-comment">//开始执行线程任务</span><br>        List&lt;Future&lt;Integer&gt;&gt; results = exec.invokeAll(tasks);<br><br>    <span class="hljs-comment">// 关闭线程池</span><br>    exec.shutdown();<br>    <span class="hljs-comment">//2 生成zip文件</span><br>    ZipHelper.zipCompress(path, path + <span class="hljs-string">&quot;.zip&quot;</span>);<br>    <span class="hljs-comment">//3 下载</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">zipFileName</span> <span class="hljs-operator">=</span> path + <span class="hljs-string">&quot;.zip&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span>  dormitory.getTowerName()+ <span class="hljs-string">&quot;.zip&quot;</span>;<br>    <span class="hljs-comment">//设置文件MIME类型</span><br>    response.setContentType(<span class="hljs-string">&quot;application/octet-stream&quot;</span>);<br><br>    response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    <span class="hljs-comment">//设置Content-Disposition</span><br>    response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(filename, <span class="hljs-string">&quot;utf-8&quot;</span>));<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(zipFileName);<br>    <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getOutputStream();<br><br>    <span class="hljs-comment">//写文件</span><br>    <span class="hljs-type">int</span> b;<br>    <span class="hljs-keyword">while</span> ((b = in.read()) != -<span class="hljs-number">1</span>) &#123;<br>        out.write(b);<br>    &#125;<br>    out.flush();<br>    <span class="hljs-comment">//4 删除多余文件</span><br>    ZipHelper.deleteDir(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path));<br>    in.close();<span class="hljs-comment">//先关闭输入流才能删除</span><br>    ZipHelper.deleteDir(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(zipFileName));<br>    out.close();<br><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        R.failed(<span class="hljs-string">&quot;下载二维码错误&quot;</span>+e);<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二维码</tag>
      
      <tag>ZXing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>装饰器模式-Java设计模式(四)</title>
    <link href="/2019/12/04/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)/"/>
    <url>/2019/12/04/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)/</url>
    
    <content type="html"><![CDATA[<p>装饰器模式-Java设计模式(四)</p><span id="more"></span><h1 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h1><blockquote><p>为已有的功能，动态地添加更多功能的一种方式。<br>动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。</p></blockquote><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><blockquote><p>当系统中需要新加功能时，是向旧的类中添加新的代码。这些新的代码通常装饰了原有的核心职责或主要行为，在主类中加入新的字段，新的方法和逻辑，从而增加了主类的复杂度，而新的东西仅仅只是为了满足一些特定情况下才会执行的特殊行为需要。<br>ps:例如【LOL英雄&#x2F;技能】【Pubg中枪&#x2F;配件】</p></blockquote><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><blockquote><p>优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。<br>缺点：多层装饰比较复杂。</p></blockquote><hr><hr><h1 id="代码-amp-结构图-LOL"><a href="#代码-amp-结构图-LOL" class="headerlink" title="代码 &amp; 结构图(LOL)"></a>代码 &amp; 结构图(LOL)</h1><h2 id="【英雄】接口"><a href="#【英雄】接口" class="headerlink" title="【英雄】接口"></a>【英雄】接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 英雄接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Hero</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 学习技能</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">learnSkills</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="【具体英雄】类，实现英雄接口"><a href="#【具体英雄】类，实现英雄接口" class="headerlink" title="【具体英雄】类，实现英雄接口"></a>【具体英雄】类，实现英雄接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 具体英雄类，实现英雄接口</span><br><span class="hljs-comment"> * - 亚索</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Yasso</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Hero</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 英雄名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Yasso</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">learnSkills</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot;学习了以上技能。&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="【技能栏】类，实现英雄接口"><a href="#【技能栏】类，实现英雄接口" class="headerlink" title="【技能栏】类，实现英雄接口"></a>【技能栏】类，实现英雄接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 技能栏类，实现英雄接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Skills</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Hero</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Hero hero;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Skills</span><span class="hljs-params">(Hero hero)</span> &#123;<br>        <span class="hljs-built_in">this</span>.hero = hero;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">learnSkills</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (hero != <span class="hljs-literal">null</span>) &#123;<br>            hero.learnSkills();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="【技能】QWER类，继承技能栏类"><a href="#【技能】QWER类，继承技能栏类" class="headerlink" title="【技能】QWER类，继承技能栏类"></a>【技能】QWER类，继承技能栏类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 技能Q ，继承技能栏类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Q</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Skills</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String skillName;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Q</span><span class="hljs-params">(Hero hero, String skillName)</span> &#123;<br>        <span class="hljs-built_in">super</span>(hero);<br>        <span class="hljs-built_in">this</span>.skillName = skillName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">learnSkills</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;学习了技能Q:&quot;</span> + skillName);<br>        <span class="hljs-built_in">super</span>.learnSkills();<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 技能W ，继承技能栏类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">W</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Skills</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String skillName;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">W</span><span class="hljs-params">(Hero hero, String skillName)</span> &#123;<br>        <span class="hljs-built_in">super</span>(hero);<br>        <span class="hljs-built_in">this</span>.skillName = skillName;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">learnSkills</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;学习了技能W:&quot;</span> + skillName);<br>        <span class="hljs-built_in">super</span>.learnSkills();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 技能E ，继承技能栏类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">E</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Skills</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String skillName;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">E</span><span class="hljs-params">(Hero hero, String skillName)</span> &#123;<br>        <span class="hljs-built_in">super</span>(hero);<br>        <span class="hljs-built_in">this</span>.skillName = skillName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">learnSkills</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;学习了技能E:&quot;</span> + skillName);<br>        <span class="hljs-built_in">super</span>.learnSkills();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 技能R ，继承技能栏类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">R</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Skills</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String skillName;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">R</span><span class="hljs-params">(Hero hero, String skillName)</span> &#123;<br>        <span class="hljs-built_in">super</span>(hero);<br>        <span class="hljs-built_in">this</span>.skillName = skillName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">learnSkills</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;学习了技能R:&quot;</span> + skillName);<br>        <span class="hljs-built_in">super</span>.learnSkills();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="【技能】测试"><a href="#【技能】测试" class="headerlink" title="【技能】测试"></a>【技能】测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建叫亚索的英雄</span><br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">yasso</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yasso</span>(<span class="hljs-string">&quot;亚索&quot;</span>);<br><br>        <span class="hljs-type">Skills</span> <span class="hljs-variable">skills</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Skills</span>(yasso);<br>        <br>        <span class="hljs-type">Skills</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Q</span>(skills, <span class="hljs-string">&quot;斩钢闪&quot;</span>);<br>        q.learnSkills();<br>        System.out.println(<span class="hljs-string">&quot;-----1------分割线----------&quot;</span>);<br>        <span class="hljs-type">Skills</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">E</span>(q, <span class="hljs-string">&quot;风盾&quot;</span>);<br>        e.learnSkills();<br>        System.out.println(<span class="hljs-string">&quot;-----2------分割线----------&quot;</span>);<br>        <span class="hljs-type">Skills</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">W</span>(e, <span class="hljs-string">&quot;踏前斩&quot;</span>);<br>        w.learnSkills();<br>        System.out.println(<span class="hljs-string">&quot;-----3------分割线----------&quot;</span>);<br>        <span class="hljs-type">Skills</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>(w, <span class="hljs-string">&quot;狂风绝熄斩&quot;</span>);<br>        r.learnSkills();<br>        System.out.println(<span class="hljs-string">&quot;-----4------分割线----------&quot;</span>);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h2><p><img src="/images/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)/%E4%BA%9A%E7%B4%A2%E8%BE%93%E5%87%BA.png" alt="图片加载"></p><h2 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h2><p><img src="/images/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)/LOL-UML1.png" alt="图片加载"><br><img src="/images/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)/LOL-UML2.png" alt="图片加载"></p><hr><hr><h1 id="代码-amp-结构图-Pubg"><a href="#代码-amp-结构图-Pubg" class="headerlink" title="代码 &amp; 结构图(Pubg)"></a>代码 &amp; 结构图(Pubg)</h1><h2 id="【枪】"><a href="#【枪】" class="headerlink" title="【枪】"></a>【枪】</h2><h3 id="【枪】接口"><a href="#【枪】接口" class="headerlink" title="【枪】接口"></a>【枪】接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 枪接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Gun</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 开火</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">fire</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【具体枪】类，继承枪接口"><a href="#【具体枪】类，继承枪接口" class="headerlink" title="【具体枪】类，继承枪接口"></a>【具体枪】类，继承枪接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * M416类，实现枪接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">M416</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Gun</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fire</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;突突突···开火*30&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="【扩容弹夹】"><a href="#【扩容弹夹】" class="headerlink" title="【扩容弹夹】"></a>【扩容弹夹】</h2><h3 id="【扩容弹夹】抽象类，继承枪接口"><a href="#【扩容弹夹】抽象类，继承枪接口" class="headerlink" title="【扩容弹夹】抽象类，继承枪接口"></a>【扩容弹夹】抽象类，继承枪接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 扩容弹夹抽象类，实现枪接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractMagazine</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Gun</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Gun gun;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AbstractMagazine</span><span class="hljs-params">(Gun gun)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gun = gun;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fire</span><span class="hljs-params">()</span> &#123;<br>        gun.fire();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【扩容弹夹】实现类，继承扩容弹夹抽象类"><a href="#【扩容弹夹】实现类，继承扩容弹夹抽象类" class="headerlink" title="【扩容弹夹】实现类，继承扩容弹夹抽象类"></a>【扩容弹夹】实现类，继承扩容弹夹抽象类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 扩容弹夹实现类，继承扩容弹夹抽象类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Magazine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMagazine</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Magazine</span><span class="hljs-params">(Gun gun)</span> &#123;<br>        <span class="hljs-built_in">super</span>(gun);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fire</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;突突突···开火*40&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【扩容弹夹】测试"><a href="#【扩容弹夹】测试" class="headerlink" title="【扩容弹夹】测试"></a>【扩容弹夹】测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;【获取：M416】&quot;</span>);<br>        <span class="hljs-type">Gun</span> <span class="hljs-variable">m416</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">M416</span>();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;【上弹开火！】&quot;</span>);<br>        m416.fire();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;【获取：扩容弹夹】&quot;</span>);<br>        m416 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Magazine</span>(m416);<br>        m416.fire();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试输出-1"><a href="#测试输出-1" class="headerlink" title="测试输出"></a>测试输出</h3><p><img src="/images/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)/%E6%89%A9%E5%AE%B9%E8%BE%93%E5%87%BA.png" alt="图片加载"></p><hr><h2 id="新增【4倍镜】"><a href="#新增【4倍镜】" class="headerlink" title="新增【4倍镜】"></a>新增【4倍镜】</h2><h3 id="增加需求：【4倍镜】"><a href="#增加需求：【4倍镜】" class="headerlink" title="增加需求：【4倍镜】"></a>增加需求：【4倍镜】</h3><blockquote><p>这是之前没有的功能，新增接口Aim4X</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 4倍镜接口，实现枪接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Aim4X</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Gun</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">aim4X</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 4倍镜抽象类，实现4倍镜接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Abstract4X</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Aim4X</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Gun gun;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Abstract4X</span><span class="hljs-params">(Gun gun)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gun = gun;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fire</span><span class="hljs-params">()</span> &#123;<br>        gun.fire();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 虚假的4倍镜类，继承4倍镜抽象类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ostensible4X</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Abstract4X</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Ostensible4X</span><span class="hljs-params">(Gun gun)</span> &#123;<br>        <span class="hljs-built_in">super</span>(gun);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">aim4X</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;装上了虚假的4倍，描边枪法。&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 真实的4倍镜类，继承4倍镜抽象类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Real4X</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Abstract4X</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Real4X</span><span class="hljs-params">(Gun gun)</span> &#123;<br>        <span class="hljs-built_in">super</span>(gun);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">aim4X</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;装上了真实的4倍，突突突百发百中。&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【4倍镜】测试"><a href="#【4倍镜】测试" class="headerlink" title="【4倍镜】测试"></a>【4倍镜】测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;【获取：M416】&quot;</span>);<br>        <span class="hljs-type">Gun</span> <span class="hljs-variable">m416</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">M416</span>();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;【上弹开火！】&quot;</span>);<br>        m416.fire();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;【获取：扩容弹夹】&quot;</span>);<br>        m416 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Magazine</span>(m416);<br>        m416.fire();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;【获取：虚假的4倍】&quot;</span>);<br>        <span class="hljs-comment">// !!!注意!!!</span><br>        <span class="hljs-type">Aim4X</span> <span class="hljs-variable">aim4X</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ostensible4X</span>(m416);<br>        <br>        aim4X.aim4X();<br>        aim4X.fire();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;【获取：虚假的4倍】&quot;</span>);<br>        aim4X = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Real4X</span>(m416);<br>        aim4X.aim4X();<br>        aim4X.fire();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试输出-2"><a href="#测试输出-2" class="headerlink" title="测试输出"></a>测试输出</h3><p><img src="/images/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)/4X%E8%BE%93%E5%87%BA.png" alt="图片加载"></p><hr><h2 id="新增【8倍镜】"><a href="#新增【8倍镜】" class="headerlink" title="新增【8倍镜】"></a>新增【8倍镜】</h2><h3 id="增加需求：【8倍镜】，它具有4倍瞄准功能，也具有8倍瞄准功能。"><a href="#增加需求：【8倍镜】，它具有4倍瞄准功能，也具有8倍瞄准功能。" class="headerlink" title="增加需求：【8倍镜】，它具有4倍瞄准功能，也具有8倍瞄准功能。"></a>增加需求：【8倍镜】，它具有4倍瞄准功能，也具有8倍瞄准功能。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 8倍接口，继承4倍接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Aim8X</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Aim4X</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">aim8X</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 8倍抽象类，实现8倍接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Abstract8X</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Aim8X</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Gun gun;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Abstract8X</span><span class="hljs-params">(Gun gun)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gun = gun;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fire</span><span class="hljs-params">()</span> &#123;<br>        gun.fire();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 8倍类，继承8倍抽象类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">End8X</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Abstract8X</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">End8X</span><span class="hljs-params">(Gun gun)</span> &#123;<br>        <span class="hljs-built_in">super</span>(gun);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">aim4X</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;8X---&gt;4X&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">aim8X</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;最终的8X&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【8倍镜】测试"><a href="#【8倍镜】测试" class="headerlink" title="【8倍镜】测试"></a>【8倍镜】测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;【获取：M416】&quot;</span>);<br>        <span class="hljs-type">Gun</span> <span class="hljs-variable">m416</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">M416</span>();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;【上弹开火！】&quot;</span>);<br>        m416.fire();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;【获取：扩容弹夹】&quot;</span>);<br>        m416 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Magazine</span>(m416);<br>        m416.fire();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;【获取：虚假的4倍】&quot;</span>);<br>        <span class="hljs-comment">// !!!注意!!!</span><br>        <span class="hljs-type">Aim4X</span> <span class="hljs-variable">aim4X</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ostensible4X</span>(m416);<br>        <br>        aim4X.aim4X();<br>        aim4X.fire();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;【获取：虚假的4倍】&quot;</span>);<br>        aim4X = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Real4X</span>(m416);<br>        aim4X.aim4X();<br>        aim4X.fire();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;【获取：8X】&quot;</span>);<br>        <span class="hljs-comment">// !!!注意!!!</span><br>        <span class="hljs-type">Aim8X</span> <span class="hljs-variable">aim8X</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">End8X</span>(aim4X);<br>        <br>        aim8X.aim8X();<br>        aim8X.aim4X();<br>        aim8X.fire();<br>        System.out.println(<span class="hljs-string">&quot;--------分割线---------&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试输出-3"><a href="#测试输出-3" class="headerlink" title="测试输出"></a>测试输出</h3><p><img src="/images/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)/8X%E8%BE%93%E5%87%BA.png" alt="图片加载"></p><hr><h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><p><img src="/images/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)/PUBG-UML1.png" alt="图片加载"><br><img src="/images/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)/PUBG-UML2.png" alt="图片加载"></p><hr><hr><h1 id="源码-decorator分支"><a href="#源码-decorator分支" class="headerlink" title="源码 - decorator分支"></a>源码 - decorator分支</h1><blockquote><p>不同分支对应不同设计模式源码<br><a href="https://github.com/nullaman/JavaDesignMode">https://github.com/nullaman/JavaDesignMode</a></p></blockquote><h1 id="JDK中的例子"><a href="#JDK中的例子" class="headerlink" title="JDK中的例子"></a>JDK中的例子</h1><p>InputStream<br><img src="/images/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%9B%9B)/JDK%E4%B8%ADInputStream.png" alt="图片加载"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java设计模式</tag>
      
      <tag>装饰器模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JRebel热部署</title>
    <link href="/2019/12/03/JRebel%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
    <url>/2019/12/03/JRebel%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p>好用的插件。</p><span id="more"></span><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><p>File &gt; settings &gt; plugins &gt; Marketplace &gt; 搜索下载JRebel</p></blockquote><p><img src="/images/JRebel%E7%83%AD%E9%83%A8%E7%BD%B2/%E4%B8%8B%E8%BD%BD%E6%8F%92%E4%BB%B6.png" alt="图片加载"></p><h1 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h1><blockquote><p>help&gt;JRebel&gt;Activaction</p></blockquote><p><img src="/images/JRebel%E7%83%AD%E9%83%A8%E7%BD%B2/%E6%BF%80%E6%B4%BB.png" alt="图片加载"></p><blockquote><p>TeamUrl：<a href="http://jrebel.autoseasy.cn/jrebelServer/db293adf-2076-4917-bdd6-e32271419591">http://jrebel.autoseasy.cn/jrebelServer/db293adf-2076-4917-bdd6-e32271419591</a><br>邮箱：瞎填就行<br>2019-12-03测试有效：</p></blockquote><p><img src="/JRebel%E7%83%AD%E9%83%A8%E7%BD%B2/%E6%BF%80%E6%B4%BB%E7%A0%81.png" alt="图片加载"></p><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><blockquote><p>File &gt; settings &gt; JRebel &gt; Work offline</p></blockquote><p><img src="/images/JRebel%E7%83%AD%E9%83%A8%E7%BD%B2/%E5%90%AF%E5%8A%A8.png" alt="图片加载"></p><h1 id="相关配置使用"><a href="#相关配置使用" class="headerlink" title="相关配置使用"></a>相关配置使用</h1><h2 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h2><p><img src="/images/JRebel%E7%83%AD%E9%83%A8%E7%BD%B2/%E7%9B%B8%E5%85%B31.png" alt="图片加载"></p><h2 id="Ctrl-Alt-Shift-x2F-弹出"><a href="#Ctrl-Alt-Shift-x2F-弹出" class="headerlink" title="Ctrl+Alt+Shift+&#x2F; 弹出"></a>Ctrl+Alt+Shift+&#x2F; 弹出</h2><p><img src="/images/JRebel%E7%83%AD%E9%83%A8%E7%BD%B2/%E7%9B%B8%E5%85%B32.0.png" alt="图片加载"><br><img src="/images/JRebel%E7%83%AD%E9%83%A8%E7%BD%B2/%E7%9B%B8%E5%85%B32.1.png" alt="图片加载"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>左下交<br><img src="/images/JRebel%E7%83%AD%E9%83%A8%E7%BD%B2/%E4%BD%BF%E7%94%A81.png" alt="图片加载"><br>右上角<br><img src="/images/JRebel%E7%83%AD%E9%83%A8%E7%BD%B2/%E4%BD%BF%E7%94%A82.png" alt="图片加载"></p>]]></content>
    
    
    <categories>
      
      <category>Idea</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JRebel热部署</tag>
      
      <tag>插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>六大原则-Java设计模式(三)</title>
    <link href="/2019/12/03/%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%B8%89)/"/>
    <url>/2019/12/03/%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%B8%89)/</url>
    
    <content type="html"><![CDATA[<p>单一职责原则<br>开放封闭原则<br>依赖倒转原则<br>里氏代换原则<br>…待补充</p><span id="more"></span><h1 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h1><blockquote><p>就一个类而言，应该仅有一个引起它变化的原因。</p></blockquote><p>例如：俄罗斯方块。<br>每一个键位，下降、左移、右移、旋转都只对应了一个动作(职责)。</p><blockquote><p>如果一个类承担的职责过多，就等于把这些耦合在了一起，一个职责的变化可能会削弱或抑制这个类完成其他职责的能力。<br>这种耦合会导致脆弱的设计，当变化发生时，设计会遭受意想不到的破坏。</p></blockquote><blockquote><p>软件设计真正要做的许多内容，就是发现职责并把那些职责相互分离。<br>如果你能想到多余一个动机去改变一个类，那么这个类就具有多余一个职责。</p></blockquote><hr><hr><h1 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h1><blockquote><p>软件实体(类，模块，函数…等等)应该是可以扩展，但是不可修改。<br>对于扩展是开放的，对于修改是封闭的。</p></blockquote><p>例如：弹性上班工作制度。<br>有的公司员工离公司很远，上班还要送小孩子上学，经常迟到。身为老板，直接按照迟到制度扣钱？还是网开一面允许迟到？</p><ul><li>直接扣钱：员工对工资不满意，离职想法。</li><li>允许迟到：其他员工对此也非常不爽，我也天天迟到。</li></ul><hr><p>其实，老板想要的只是每天8个小时的上班时间，甚至时间都不重要，想要的只是业绩目标能完成或者超额完成。<br>于是就有了弹性上班制度：</p><ul><li>早上班早下班</li><li>允许迟到次数，迟到了当天下班后补时间</li><li>甚至对销售人员以业绩为准 … 等等</li></ul><hr><blockquote><p>开放封闭原则：对时间制度的扩展开放，对工作时间或业绩成绩的关闭。</p></blockquote><blockquote><p>绝对封闭是不可能的，无论模块多么‘封闭’，都会存在一些无法对之封闭的变化。<br>所以，设计人员必须对于他设计的模块应该对哪种变化做出选择。他必须猜测出最有可能发生的变化总类，然后构造抽象来隔离变化。</p></blockquote><blockquote><p>面对需求，对程序的改动是通过增加新代码进行的，而不是改现有代码。<br>开放封闭原则是面向对象设计的核心所在，遵循这个原则可以带来面向对象技术所声称的巨大好处，也就是可维护、可扩展、可复用、灵活性好。<br>开发人员应该仅对程序中呈现出频繁变化的那些部分做出抽象，然而，对于应用程序中的每个部分都刻意地进行抽象同样不是一个好主意。<br>拒绝不成熟的抽象和抽象本身一样重要。</p></blockquote><hr><hr><h1 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h1><blockquote><p>高层模块不应该依赖低层模块。两个都应该依赖抽象<br>抽象不应该依赖细节，细节应该依赖于抽象<br>要针对接口编程，不要对实现编程</p></blockquote><p>例如：电脑零件。<br>无论主板、CPU、内存、硬盘都是针对接口设计的，<br>如果针对实现来设计，内存对应到某品牌的主板，那么换内存的时候就会有要换主板的尴尬。</p><blockquote><p>依赖倒转可以说是面向对象设计的标志，用哪种语言来编写程序不重要，如果编写时考虑的都是如何针对抽象编程而不是针对细节编程，<br>即程序的所有的依赖关系都终止于抽象类或者接口，那就是面向对象的设计，反之就是过程化的设计了。</p></blockquote><hr><hr><h1 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h1><blockquote><p>子类必须能够替代掉他们的父类型<br>解释：一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且它察觉不出父类对象和子类对象的区别。<br>也就是说，在软件里面，把父类替换成子类，程序的行为没有变化。<br>简单的说，子类型必须能够替换掉他们的父类型。</p></blockquote><p>例如：</p><ul><li>错误的：父类-鸟-飞的方法，子类-企鹅。</li><li>正确的：父类-动物-吃喝拉撒的方法，子类-猫狗等。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>六大原则</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>策略模式-Java设计模式(二)</title>
    <link href="/2019/12/02/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BA%8C)/"/>
    <url>/2019/12/02/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<p>策略模式-Java设计模式(二)</p><span id="more"></span><h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><blockquote><p>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。(超市打折…)</p></blockquote><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><blockquote><p>1.在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。<br>2.一个系统有许多许多类，而区分它们的只是他们直接的行为。</p></blockquote><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><blockquote><p>优点：<br>1.算法可以自由切换。<br>2.避免使用多重条件判断。<br>3.扩展性良好。</p></blockquote><blockquote><p>缺点：<br>1.策略类会增多。<br>2.所有策略类都需要对外暴露。</p></blockquote><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><blockquote><p>实现同一个接口。</p></blockquote><hr><hr><h1 id="代码-amp-结构图"><a href="#代码-amp-结构图" class="headerlink" title="代码 &amp; 结构图"></a>代码 &amp; 结构图</h1><h2 id="【商场商品打折、涨价、降价】例子"><a href="#【商场商品打折、涨价、降价】例子" class="headerlink" title="【商场商品打折、涨价、降价】例子"></a>【商场商品打折、涨价、降价】例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 公共算法接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Strategy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">doOperation</span><span class="hljs-params">(<span class="hljs-type">double</span> num1, <span class="hljs-type">double</span> num2)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 涨价</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperationAdd</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Strategy</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> price 价钱</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> add   涨价</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">doOperation</span><span class="hljs-params">(<span class="hljs-type">double</span> price, <span class="hljs-type">double</span> add)</span> &#123;<br>        <span class="hljs-keyword">return</span> price + add;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 打折</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperationDiscount</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Strategy</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> price    价钱</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> discount 折扣</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">doOperation</span><span class="hljs-params">(<span class="hljs-type">double</span> price, <span class="hljs-type">double</span> discount)</span> &#123;<br>        <span class="hljs-keyword">return</span> price * discount;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 降价</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperationSubstract</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Strategy</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> price     价钱</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> substract 减价</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">doOperation</span><span class="hljs-params">(<span class="hljs-type">double</span> price, <span class="hljs-type">double</span> substract)</span> &#123;<br>        <span class="hljs-keyword">return</span> price - substract;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="执行的策略类"><a href="#执行的策略类" class="headerlink" title="执行的策略类"></a>执行的策略类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 执行的策略类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CashContext</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Strategy strategy;<br><br>    CashContext() &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStrategy</span><span class="hljs-params">(Strategy strategy)</span> &#123;<br>        <span class="hljs-built_in">this</span>.strategy = strategy;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">executeStrategy</span><span class="hljs-params">(<span class="hljs-type">double</span> num1, <span class="hljs-type">double</span> num2)</span> &#123;<br>        <span class="hljs-keyword">return</span> strategy.doOperation(num1, num2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建对象</span><br>        <span class="hljs-type">CashContext</span> <span class="hljs-variable">cashContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CashContext</span>();<br><br>        <span class="hljs-comment">// 根据不同的情况，调用不同的算法</span><br>        cashContext.setStrategy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OperationAdd</span>());<br>        <span class="hljs-comment">// 涨价：110.0</span><br>        System.out.println(<span class="hljs-string">&quot;涨价：&quot;</span> + cashContext.executeStrategy(<span class="hljs-number">100</span>, <span class="hljs-number">10</span>));<br><br>        cashContext.setStrategy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OperationDiscount</span>());<br>        <span class="hljs-comment">// 打折：80.0</span><br>        System.out.println(<span class="hljs-string">&quot;打折：&quot;</span> + cashContext.executeStrategy(<span class="hljs-number">100</span>, <span class="hljs-number">0.8</span>));<br><br>        cashContext.setStrategy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OperationSubstract</span>());<br>        <span class="hljs-comment">// 降价：90.0</span><br>        System.out.println(<span class="hljs-string">&quot;降价：&quot;</span> + cashContext.executeStrategy(<span class="hljs-number">100</span>, <span class="hljs-number">10</span>));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="策略模式UML结构图"><a href="#策略模式UML结构图" class="headerlink" title="策略模式UML结构图"></a>策略模式UML结构图</h2><p><img src="/images/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BA%8C)/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F-%E5%95%86%E5%9C%BA%E6%89%93%E6%8A%98.png" alt="图片加载"></p><h1 id="源码-strategy分支"><a href="#源码-strategy分支" class="headerlink" title="源码 - strategy分支"></a>源码 - strategy分支</h1><blockquote><p>不同分支对应不同设计模式源码<br><a href="https://github.com/nullaman/JavaDesignMode">https://github.com/nullaman/JavaDesignMode</a></p></blockquote><hr><hr><h1 id="JDK中的例子"><a href="#JDK中的例子" class="headerlink" title="JDK中的例子"></a>JDK中的例子</h1><p>Comparator接口</p><blockquote><p>java.util.Comparator</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.util;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><span class="hljs-keyword">import</span> java.util.function.ToIntFunction;<br><span class="hljs-keyword">import</span> java.util.function.ToLongFunction;<br><span class="hljs-keyword">import</span> java.util.function.ToDoubleFunction;<br><span class="hljs-keyword">import</span> java.util.Comparators;<br><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Comparator</span>&lt;T&gt; &#123;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(T o1, T o2)</span>;<br>    <br>    <span class="hljs-comment">// ...</span><br>    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java设计模式</tag>
      
      <tag>策略模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单的工厂模式-Java设计模式(一)</title>
    <link href="/2019/11/28/%E7%AE%80%E5%8D%95%E7%9A%84%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%B8%80)/"/>
    <url>/2019/11/28/%E7%AE%80%E5%8D%95%E7%9A%84%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<p>简单的工厂模式-Java设计模式(一)</p><span id="more"></span><h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><blockquote><p>简单工厂模式不是 23 种里的一种，简而言之，就是有一个专门生产某个产品的类。 更像是一种编码的风格和习惯。</p></blockquote><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><blockquote><p>1.工厂类负责创建的对象比较少。<br>2.客户端（应用层）只知道传入工厂类的参数，对于如何创建对象（逻辑）不关心。</p></blockquote><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><blockquote><p>优点：只需要传入一个正确的参数，就可以获取你所需要的对象，无需知道其创建细节。<br>缺点：工厂类的职责相对过重，增加新的产品需要修改工厂类的判断逻辑，无法满足开闭原则，对多个产品的扩展不利。</p></blockquote><hr><hr><h1 id="代码-amp-结构图"><a href="#代码-amp-结构图" class="headerlink" title="代码 &amp; 结构图"></a>代码 &amp; 结构图</h1><h2 id="动物例子"><a href="#动物例子" class="headerlink" title="动物例子"></a>动物例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 动物接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;鸟在天上飞&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fish</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;鱼在水中游泳&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;人在地上走&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="工厂类"><a href="#工厂类" class="headerlink" title="工厂类"></a>工厂类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 工厂类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnimalFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Animal <span class="hljs-title function_">createAnimal</span><span class="hljs-params">(String animal)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (animal) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;fish&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fish</span>();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;bird&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bird</span>();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;people&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>();<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">fish</span> <span class="hljs-operator">=</span> AnimalFactory.createAnimal(<span class="hljs-string">&quot;fish&quot;</span>);<br>        <span class="hljs-comment">// 调用方法</span><br>        fish.run(); <span class="hljs-comment">//输出结果: 鱼在水中游泳</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="UML结构图"><a href="#UML结构图" class="headerlink" title="UML结构图"></a>UML结构图</h2><p><img src="/images/%E7%AE%80%E5%8D%95%E7%9A%84%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%B8%80)/%E5%8A%A8%E7%89%A9UML%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="图片加载"></p><h1 id="源码-simpleFactory分支"><a href="#源码-simpleFactory分支" class="headerlink" title="源码 - simpleFactory分支"></a>源码 - simpleFactory分支</h1><blockquote><p>不同分支对应不同设计模式源码<br><a href="https://github.com/nullaman/JavaDesignMode">https://github.com/nullaman/JavaDesignMode</a></p></blockquote><hr><hr><h1 id="JDK中的例子"><a href="#JDK中的例子" class="headerlink" title="JDK中的例子"></a>JDK中的例子</h1><p>Calendar类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Calendar.getInstance();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Gets a calendar using the default time zone and locale. The</span><br><span class="hljs-comment"> * &lt;code&gt;Calendar&lt;/code&gt; returned is based on the current time</span><br><span class="hljs-comment"> * in the default time zone with the default</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> Locale.Category#FORMAT FORMAT&#125; locale.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> a Calendar.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Calendar <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> createCalendar(TimeZone.getDefault(), Locale.getDefault(Locale.Category.FORMAT));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Calendar <span class="hljs-title function_">createCalendar</span><span class="hljs-params">(TimeZone zone,</span><br><span class="hljs-params">                                       Locale aLocale)</span><br>&#123;<br>    <span class="hljs-type">CalendarProvider</span> <span class="hljs-variable">provider</span> <span class="hljs-operator">=</span><br>        LocaleProviderAdapter.getAdapter(CalendarProvider.class, aLocale)<br>                             .getCalendarProvider();<br>    <span class="hljs-keyword">if</span> (provider != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> provider.getInstance(zone, aLocale);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException iae) &#123;<br>            <span class="hljs-comment">// fall back to the default instantiation</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">Calendar</span> <span class="hljs-variable">cal</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">if</span> (aLocale.hasExtensions()) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">caltype</span> <span class="hljs-operator">=</span> aLocale.getUnicodeLocaleType(<span class="hljs-string">&quot;ca&quot;</span>);<br>        <span class="hljs-keyword">if</span> (caltype != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">switch</span> (caltype) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;buddhist&quot;</span>:<br>            cal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuddhistCalendar</span>(zone, aLocale);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;japanese&quot;</span>:<br>                cal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JapaneseImperialCalendar</span>(zone, aLocale);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;gregory&quot;</span>:<br>                cal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GregorianCalendar</span>(zone, aLocale);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (cal == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// If no known calendar type is explicitly specified,</span><br>        <span class="hljs-comment">// perform the traditional way to create a Calendar:</span><br>        <span class="hljs-comment">// create a BuddhistCalendar for th_TH locale,</span><br>        <span class="hljs-comment">// a JapaneseImperialCalendar for ja_JP_JP locale, or</span><br>        <span class="hljs-comment">// a GregorianCalendar for any other locales.</span><br>        <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> The language, country and variant strings are interned.</span><br>        <span class="hljs-keyword">if</span> (aLocale.getLanguage() == <span class="hljs-string">&quot;th&quot;</span> &amp;&amp; aLocale.getCountry() == <span class="hljs-string">&quot;TH&quot;</span>) &#123;<br>            cal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuddhistCalendar</span>(zone, aLocale);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (aLocale.getVariant() == <span class="hljs-string">&quot;JP&quot;</span> &amp;&amp; aLocale.getLanguage() == <span class="hljs-string">&quot;ja&quot;</span><br>                   &amp;&amp; aLocale.getCountry() == <span class="hljs-string">&quot;JP&quot;</span>) &#123;<br>            cal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JapaneseImperialCalendar</span>(zone, aLocale);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GregorianCalendar</span>(zone, aLocale);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cal;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java设计模式</tag>
      
      <tag>工厂模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GET请求400</title>
    <link href="/2019/11/27/GET%E8%AF%B7%E6%B1%82400/"/>
    <url>/2019/11/27/GET%E8%AF%B7%E6%B1%82400/</url>
    
    <content type="html"><![CDATA[<p>今天项目部署测试正式服，<br>发现在开发环境下没有问题的GET请求接口，到了正式环境居然报了400。</p><span id="more"></span><h1 id="GET请求的长度"><a href="#GET请求的长度" class="headerlink" title="GET请求的长度"></a>GET请求的长度</h1><p>曾经就百度过关于GET请求的长度问题，已经被他人实际测试验证过</p><p>GET最大长度不是【256】个字节.</p><p>经过实际测试：</p><p>在IE8下的URL地址总长度为：4076，超过该长度会自动忽略后面的内容；</p><p>在firefox 25下的URL地址总长度可以达到:7530，超过该长度会访问错误；</p><p>在chrome 29.0.1547.62 的最大总长度达到:7675，超过该长度会访问错误；</p><p>参考博文<a href="https://blog.csdn.net/salonzhou/article/details/15338473">Get方法可传递的字符串的最大长度是多少？</a></p><p>评论：【据我所知，url是可以很长的，一般达到几千的长度，但是url的参数最长只能256，如果你带10个255长度的参数，那么你的url长度就达到了 2550左右，一样是没问题的，重点值单个参数长度不能超过256】</p><h1 id="我的报错代码排错"><a href="#我的报错代码排错" class="headerlink" title="我的报错代码排错"></a>我的报错代码排错</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/list/&#123;tableId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R <span class="hljs-title function_">getRegionLogging</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;tableId&quot;)</span> String tableId)</span> &#123;<br>    <span class="hljs-keyword">return</span> R.ok();<br>&#125;<br></code></pre></td></tr></table></figure><p>其中我的【tableId】为组合字符串，以”|”分割的四个关键字段，</p><p>一个日期为”2019-11-27”，三个长度为11的String字符串。</p><p>得出：70字节<br><img src="/images/GET%E8%AF%B7%E6%B1%82400/TableId%E5%86%85%E5%AE%B9.png" alt="图片加载"><br><img src="/images/GET%E8%AF%B7%E6%B1%82400/TableId%E9%95%BF%E5%BA%A6.png" alt="图片加载"></p><p>应该不可能超出长度限制。</p><p>但是在正式服一直400.</p><p>原因未知。。。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>修改为POST请求了。【无奈…】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/list&quot;)</span><br><span class="hljs-keyword">public</span> R <span class="hljs-title function_">getRegionLogging</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Map&lt;String, String&gt; map)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">tableId</span> <span class="hljs-operator">=</span> map.get(<span class="hljs-string">&quot;tableId&quot;</span>);<br>    <span class="hljs-keyword">return</span> R.ok();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GET请求</tag>
      
      <tag>开发中的坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java富文本框标签过滤</title>
    <link href="/2019/11/25/Java%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A1%86%E6%A0%87%E7%AD%BE%E8%BF%87%E6%BB%A4/"/>
    <url>/2019/11/25/Java%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A1%86%E6%A0%87%E7%AD%BE%E8%BF%87%E6%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>今天改【通知】模块的需求，记录一下之前改的需求，<br>前端说小程序一页面无法对富文本框的标签进行识别转义，后台需要进行一些标签过滤。</p><span id="more"></span><h1 id="一些代码"><a href="#一些代码" class="headerlink" title="一些代码"></a>一些代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * html标签的过滤和清洗</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> caoxiang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019/10/30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HtmlUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">mySanitizeHtml</span><span class="hljs-params">(String htmlContent)</span> &#123;<br>        <span class="hljs-comment">// 过滤文章内容中的html</span><br>        htmlContent = htmlContent.replaceAll(<span class="hljs-string">&quot;&lt;/?[^&lt;]+&gt;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">// 去除字符串中的空格 回车 换行符 制表符 等</span><br>        htmlContent = htmlContent.replaceAll(<span class="hljs-string">&quot;\\s*|\t|\r|\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">// 去除空格</span><br>        htmlContent = htmlContent.replaceAll(<span class="hljs-string">&quot;&amp;nbsp;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">// 去掉其他一些字符</span><br>        htmlContent = htmlContent.replaceAll(<span class="hljs-string">&quot;\\\\&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        htmlContent = htmlContent.replaceAll(<span class="hljs-string">&quot;\\\\\\\\&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">// 后面的如果有特殊字符，根据自己需要进行过滤。</span><br>        <br>        <span class="hljs-comment">// 打印结果</span><br>        System.out.println(htmlContent);<br>        <span class="hljs-keyword">return</span> htmlContent;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2019/11/25/hello-world/"/>
    <url>/2019/11/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>花了几天时间终于弄完了~ 之后就是坚持记录啦~</p><span id="more"></span><p>从买服务器，到搭建部署Typecho，然后是WordPress，最后到了github-hexo，</p><p>哈哈哈~路途曲折，但是挺好玩的。</p><p>空闲时间到处翻翻找找~</p><p>终于全部配置完成了，加油鸭！！冲冲冲</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合Kafka使用</title>
    <link href="/2019/11/21/SpringBoot%E6%95%B4%E5%90%88Kafka%E4%BD%BF%E7%94%A8/"/>
    <url>/2019/11/21/SpringBoot%E6%95%B4%E5%90%88Kafka%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>终于想起了我有博客…最近好不容易忙完巡检模块，想写点什么。<br>之前公司订餐系列模块用到了kafka，整理一些配置和使用把。</p><span id="more"></span><h1 id="一-整理的一些bootstrap-yml配置"><a href="#一-整理的一些bootstrap-yml配置" class="headerlink" title="一.整理的一些bootstrap.yml配置"></a>一.整理的一些bootstrap.yml配置</h1><p>都是网上啊啥找的一些配置信息，可以参考使用。<br>具体的优化啊，高级配置的话还是参照官网<a href="http://kafka.apache.org/">kafka</a>去琢磨加深把。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kafka:</span><br>  <span class="hljs-attr">bootstrap-servers:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span> <span class="hljs-comment">#你kafka服务器地址</span><br>  <span class="hljs-comment">#生产者的配置，大部分我们可以使用默认的，这里列出几个比较重要的属性</span><br>  <span class="hljs-attr">producer:</span><br>    <span class="hljs-comment">#每批次发送消息的数量</span><br>    <span class="hljs-attr">batch-size:</span> <span class="hljs-number">16</span><br>    <span class="hljs-comment">#设置大于0的值将使客户端重新发送任何数据，一旦这些数据发送失败。</span><br>    <span class="hljs-comment">#注意，这些重试与客户端接收到发送错误时的重试没有什么不同。允许重试将潜在的改变数据的顺序，</span><br>    <span class="hljs-comment">#如果这两个消息记录都是发送到同一个partition，则第一个消息失败第二个发送成功，则第二条消息会比第一条消息出现要早。</span><br>    <span class="hljs-attr">retries:</span> <span class="hljs-number">0</span><br>    <span class="hljs-comment">#producer可以用来缓存数据的内存大小。如果数据产生速度大于向broker发送的速度，</span><br>    <span class="hljs-comment">#producer会阻塞或者抛出异常，以“block.on.buffer.full”来表明。</span><br>    <span class="hljs-comment">#这项设置将和producer能够使用的总内存相关，但并不是一个硬性的限制，</span><br>    <span class="hljs-comment">#因为不是producer使用的所有内存都是用于缓存。一些额外的内存会用于压缩（如果引入压缩机制），同样还有一些用于维护请求。</span><br>    <span class="hljs-attr">buffer-memory:</span> <span class="hljs-number">33554432</span><br>    <span class="hljs-attr">acks:</span> <span class="hljs-string">all</span><br>    <span class="hljs-comment">#key序列化方式</span><br>    <span class="hljs-attr">key-serializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringSerializer</span><br>    <span class="hljs-attr">value-serializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringSerializer</span><br>  <span class="hljs-comment">#消费者的配置</span><br>  <span class="hljs-attr">consumer:</span><br>    <span class="hljs-comment">#Kafka中没有初始偏移或如果当前偏移在服务器上不再存在时,默认区最新 ，有三个选项 【latest, earliest, none】</span><br>    <span class="hljs-attr">auto-offset-reset:</span> <span class="hljs-string">latest</span><br>    <span class="hljs-comment">#是否开启自动提交</span><br>    <span class="hljs-attr">enable-auto-commit:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment">#自动提交的时间间隔</span><br>    <span class="hljs-attr">auto-commit-interval:</span> <span class="hljs-number">100</span><br>    <span class="hljs-comment">#key的解码方式</span><br>    <span class="hljs-attr">key-deserializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringDeserializer</span><br>    <span class="hljs-comment">#value的解码方式</span><br>    <span class="hljs-attr">value-deserializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringDeserializer</span><br>    <span class="hljs-comment">#在/usr/local/etc/kafka/consumer.properties中有配置</span><br>    <span class="hljs-attr">group-id:</span> <span class="hljs-string">consumerGroup</span> <span class="hljs-comment">#【你自己配置的】</span><br></code></pre></td></tr></table></figure><h1 id="二-Kafka生产者"><a href="#二-Kafka生产者" class="headerlink" title="二.Kafka生产者"></a>二.Kafka生产者</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.RecordMetadata;<br><span class="hljs-keyword">import</span> org.springframework.kafka.core.KafkaTemplate;<br><span class="hljs-keyword">import</span> org.springframework.kafka.support.ProducerListener;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.Scheduled;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生产者</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> aman</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019/10/26</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderSendMsgByKafka</span> &#123;<br><br>    <span class="hljs-keyword">private</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RepastOrderService repastOrderService;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TOPIC_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;CloudSchoolRepast&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定时任务每天一点发送每天的订餐信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Scheduled(cron = &quot;0 0 1 * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendOrderMessageByKafka</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 发送数据到消息队列</span><br><span class="hljs-comment">         * send有多个重载方法</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            kafkaTemplate.send(TOPIC_NAME, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;data&quot;</span>, JSON.toJSONString(order));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;发送异常try : 主题名称topic = &#123;&#125;, 异常exception = &#123;&#125;&quot;</span>, TOPIC_NAME);<br>        &#125;<br>        <span class="hljs-comment">//消息发送的监听器，用于回调返回信息</span><br>        kafkaTemplate.setProducerListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerListener</span>&lt;String, String&gt;() &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 成功后调用</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> topic 主题</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> partition 目标分区</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> recordMetadata 发送成功的结果</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSuccess</span><span class="hljs-params">(String topic, Integer partition, String key, String value, RecordMetadata recordMetadata)</span> &#123;<br>                log.info(<span class="hljs-string">&quot;发送成功 : 主题名称topic = &#123;&#125;, 分区partition = &#123;&#125;, 键key = &#123;&#125;, 值value = &#123;&#125;, recordMetadata = &#123;&#125;&quot;</span>, topic, partition, key, value, recordMetadata);<br>            &#125;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 失败后调用, ProducerRecord被覆盖后不调用</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> topic 主题</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> partition 目标分区</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> exception 异常</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(String topic, Integer partition, String key, String value, Exception exception)</span> &#123;<br>                log.error(<span class="hljs-string">&quot;发送异常onError : 主题名称topic = &#123;&#125;, 分区partition = &#123;&#125;, 键key = &#123;&#125;, 值value = &#123;&#125;, 异常exception = &#123;&#125;&quot;</span>, topic, partition, key, value, exception);<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="三-Kafka消费者"><a href="#三-Kafka消费者" class="headerlink" title="三.Kafka消费者"></a>三.Kafka消费者</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;<br><span class="hljs-keyword">import</span> org.springframework.kafka.annotation.KafkaListener;<br><span class="hljs-keyword">import</span> org.springframework.kafka.annotation.TopicPartition;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Optional;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Kafka消费者</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> caoxiang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 20119/10/26</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RepastConsumer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TOPIC_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;CloudSchoolRepast&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RepastOrderService repastOrderService;<br><br>    <span class="hljs-meta">@KafkaListener(id = &quot;RepastConsumerAfter&quot;, topicPartitions = &#123;@TopicPartition(topic = TOPIC_NAME, partitions = &#123;&quot;1&quot;&#125;)&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listen</span><span class="hljs-params">(ConsumerRecord&lt;?, ?&gt; record)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         *  如果record.value()为空,返回空的Optional,</span><br><span class="hljs-comment">         *  否则返回一个value值为record.value()的Optional</span><br><span class="hljs-comment">         */</span><br>        Optional&lt;?&gt; kafkaMessage = Optional.ofNullable(record.value());<br>        log.info(<span class="hljs-string">&quot;Receiver record = &#123;&#125;&quot;</span>, record);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 判断Optional的value值是否为空</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span> (kafkaMessage.isPresent()) &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 获取Optional的value值  List&lt;OrderBySendKafka&gt;</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> kafkaMessage.get();<br>            log.info(<span class="hljs-string">&quot;Receiver message = &#123;&#125;&quot;</span>, message);<br>        &#125;<br>    &#125;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一次玩服务器，搭建vpn、博客记录</title>
    <link href="/2019/10/30/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%90%AD%E5%BB%BAvpn%E3%80%81%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/"/>
    <url>/2019/10/30/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%90%AD%E5%BB%BAvpn%E3%80%81%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>自己购买搭建服务器<br>搭建vpn<br>搭建博客：Typecho【部署在自己服务器】、WordPress【部署在自己服务器】、github【无需购买服务器】<br>以及关于宝塔的一些记录总结…吧…</p><span id="more"></span><h1 id="一-购买服务器"><a href="#一-购买服务器" class="headerlink" title="一.购买服务器"></a>一.购买服务器</h1><p>我是在<a href="https://www.vultr.com/">Vultr</a>购买的【海外】服务器。</p><p>这里是计时收费,删除所有服务器的话就不扣钱了，暂停的话还是会扣费的。</p><h1 id="二-搭建vpn"><a href="#二-搭建vpn" class="headerlink" title="二.搭建vpn"></a>二.搭建vpn</h1><p>（个人需求，嘻嘻嘻xixixi）</p><h2 id="我用的是win10的-PowerShell-操作，输入以下连接你的服务器"><a href="#我用的是win10的-PowerShell-操作，输入以下连接你的服务器" class="headerlink" title="我用的是win10的 PowerShell 操作，输入以下连接你的服务器"></a>我用的是win10的 PowerShell 操作，输入以下连接你的服务器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh root@你的服务器ip地址<br></code></pre></td></tr></table></figure><h2 id="输入服务器密码，然后执行以下三行"><a href="#输入服务器密码，然后执行以下三行" class="headerlink" title="输入服务器密码，然后执行以下三行"></a>输入服务器密码，然后执行以下三行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh   <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x shadowsocks-all.sh <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./shadowsocks-all.sh 2&gt;&amp;1 | <span class="hljs-built_in">tee</span> shadowsocks-all.log <br></code></pre></td></tr></table></figure><h2 id="开始配置参数：第一个选择-2-shadowsocksR-后-输入设置ssr密码"><a href="#开始配置参数：第一个选择-2-shadowsocksR-后-输入设置ssr密码" class="headerlink" title="开始配置参数：第一个选择 2.shadowsocksR 后,输入设置ssr密码"></a>开始配置参数：第一个选择 2.shadowsocksR 后,输入设置ssr密码</h2><p>之后就按照需求配置，贴出我的是：</p><p>端口：大点好点把，不容易被墙。(据说是</p><p>加密：aes-256-cfb</p><p>协议：auth_sha1_v4</p><p>混淆：http_simple</p><h2 id="完成之后-下载ssr工具（Windows-、Android）配置一下以上的参数，连接就可以翻墙了。"><a href="#完成之后-下载ssr工具（Windows-、Android）配置一下以上的参数，连接就可以翻墙了。" class="headerlink" title="完成之后.下载ssr工具（Windows 、Android）配置一下以上的参数，连接就可以翻墙了。"></a>完成之后.下载ssr工具（<a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases/download/4.9.0/ShadowsocksR-win-4.9.0.zip">Windows</a> 、<a href="https://github.com/shadowsocksrr/shadowsocksr-android/releases/download/3.5.4/shadowsocksr-android-3.5.4.apk">Android</a>）配置一下以上的参数，连接就可以翻墙了。</h2><h1 id="三-宝塔一键安装。我的服务器是CentOs7"><a href="#三-宝塔一键安装。我的服务器是CentOs7" class="headerlink" title="三.宝塔一键安装。我的服务器是CentOs7"></a>三.宝塔一键安装。我的服务器是CentOs7</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">yum install -<span class="hljs-keyword">y</span> wget &amp;&amp; wget -O install.<span class="hljs-keyword">sh</span> http://download.bt.<span class="hljs-keyword">cn</span>/install/install_6.<span class="hljs-number">0</span>.<span class="hljs-keyword">sh</span> &amp;&amp; <span class="hljs-keyword">sh</span> install.<span class="hljs-keyword">sh</span>  <br></code></pre></td></tr></table></figure><p>安装完成，按照默认提示地址、用户名、密码 登陆宝塔。</p><p>宝塔的面板配置：以下可以理解为：</p><p>宝塔访问路径为： [域名] : [端口] &#x2F; [安全入口]</p><p>面板端口：可以自己更改</p><p>域名：自己购买的，配置了解析服务器地址的域名</p><p>ip：同域名</p><p>面板用户：宝塔登陆账号</p><p>面板密码：登陆密码 </p><h1 id="四-搭建博客（Typecho、WordPress、github无需购买服务器）"><a href="#四-搭建博客（Typecho、WordPress、github无需购买服务器）" class="headerlink" title="四.搭建博客（Typecho、WordPress、github无需购买服务器）"></a>四.搭建博客（Typecho、WordPress、github无需购买服务器）</h1><h2 id="Typecho【部署在自己服务器】"><a href="#Typecho【部署在自己服务器】" class="headerlink" title="Typecho【部署在自己服务器】"></a>Typecho【部署在自己服务器】</h2><h2 id="WordPress【部署在自己服务器】"><a href="#WordPress【部署在自己服务器】" class="headerlink" title="WordPress【部署在自己服务器】"></a>WordPress【部署在自己服务器】</h2><h2 id="github-hexo【无需购买服务器】"><a href="#github-hexo【无需购买服务器】" class="headerlink" title="github-hexo【无需购买服务器】"></a>github-hexo【无需购买服务器】</h2><h3 id="关于hexo写博文的图片显示，使用和一些坑。"><a href="#关于hexo写博文的图片显示，使用和一些坑。" class="headerlink" title="关于hexo写博文的图片显示，使用和一些坑。"></a>关于hexo写博文的图片显示，使用和一些坑。</h3><p>使用：将hexo根目录下配置文件_config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>执行，安装插件</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">npm install hexo-asset-<span class="hljs-built_in">image</span> –<span class="hljs-built_in">save</span><br></code></pre></td></tr></table></figure><p>之后写博文的时候，</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;demo&quot;</span> <br></code></pre></td></tr></table></figure><p>新建demo会在source目录下创建一个和你的博文demo相同名称的文件夹，将图片放入该文件夹，使用下面来调用</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[图片失败的文字]</span>(demo/图片.jpg)<br></code></pre></td></tr></table></figure><p>！！！然后重新hexo g，查看一下生成的index运气好，有用。看到的是</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;/2019/10/30/demo/&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;archive-article-date&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>运气不好,遇到坑了。看到的就是大概下面这种类型，图片没有用</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;/.com//demo.png&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;archive-article-date&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>解决：打开根目录下的package.json<br>修改以下的为0.0.1（”hexo-asset-image”: “0.0.1”,）<br><img src="/images/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%90%AD%E5%BB%BAvpn%E3%80%81%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/img_package_001.png" alt="图片加载"><br>然后，在博客根目录下执行</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>查看一下，应该就没得问题了。试试~<br><img src="/images/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%90%AD%E5%BB%BAvpn%E3%80%81%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/bg1.png" alt="图片加载"><br><img src="/images/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%8E%A9%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%90%AD%E5%BB%BAvpn%E3%80%81%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/bg2.png" alt="图片加载"></p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>服务器</tag>
      
      <tag>vpn</tag>
      
      <tag>博客</tag>
      
      <tag>宝塔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
